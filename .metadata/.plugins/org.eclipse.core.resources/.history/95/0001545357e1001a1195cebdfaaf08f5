/*
 * spi.c
 *
 *  Created on: 15 Aug 2020
 *      Author: vikylenaidoo
 */
//---------------------------------INCLUDES-----------------------------------------//
#include "spi.h"

//-------------------------------PRIVATE DEFINES---------------------------------//
#define GPIO_SPI_Port_CS			GPIOE
#define GPIO_SPI_Pin_CS_Acc			GPIO_Pin_7
#define GPIO_SPI_Pin_CS_Gyro		GPIO_Pin_8
#define GPIO_SPI_Pin_CS_Mag			GPIO_Pin_9
#define GPIO_SPI_Pin_CS_Baro		GPIO_Pin_10

#define GPIO_SPI_PORT				GPIOA
#define GPIO_SPI_Pin_SCK			GPIO_Pin_5
#define GPIO_SPI_Pin_MISO			GPIO_Pin_6
#define GPIO_SPI_Pin_MOSI			GPIO_Pin_7


//------------------------------STATIC FUNCTIONS--------------------------------//

/**
 * @brief deselect cs pin means set high
 */
static void cs_deselect(SPI_ChipSelectTypeDef cs){
	switch(cs){
	case SPI_CS_Acc: 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Acc);
	case SPI_CS_Gyro: 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Gyro);
	case SPI_CS_Mag: 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Mag);
	case SPI_CS_Baro: 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Baro);
	default:		;
	}
}

/**
 * @brief select cs pin means set low
 */
static void cs_select(SPI_ChipSelectTypeDef cs){
	switch(cs){
	case SPI_CS_Acc: 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Acc);
	case SPI_CS_Gyro: 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Gyro);
	case SPI_CS_Mag: 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Mag);
	case SPI_CS_Baro: 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Baro);
	default:		;
	}
}
//------------------------------PUBLIC FUNCTIONS-----------------------------------//

/**
 * @brief intialise all clock and registers needed for spi. assign and initialise all gpio pins needed
 * @return void
 */
void spi_initialise(void){

	//enable SPI clock: APB2 for SPI1
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
	//enable GPIO clock for SCK, MOSI, MISO
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	//enable GPIO clock for CS pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);

	//SPI GPIO configurations:
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure SPI Chip Select pins */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;

	/* SPI Accelerometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_CS_Acc;
	GPIO_Init(GPIO_SPI_CS_BOSCH, &GPIO_InitStructure);

	/* SPI Gyroscope CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_CS_Gyro;
	GPIO_Init(GPIO_SPI_CS_BOSCH, &GPIO_InitStructure);

	/* SPI Magnetometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_CS_Mag;
	GPIO_Init(GPIO_SPI_CS_BOSCH, &GPIO_InitStructure);

	/* SPI Barometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_CS_Baro;
	GPIO_Init(GPIO_SPI_CS_BOSCH, &GPIO_InitStructure);

	//deselect all cs pins
	cs_deselect(SPI_CS_Acc);
	cs_deselect(SPI_CS_Gyro);
	cs_deselect(SPI_CS_Mag);
	cs_deselect(SPI_CS_Baro);

	/* Configure SPI pins: SCK and MOSI with default alternate function push-pull output*/
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;

	/* SPI SCK pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_SCK;
	GPIO_Init(GPIO_SPI_BOSCH, &GPIO_InitStructure);

	/* SPI MOSI pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_SPI_BOSCH_MOSI;
	GPIO_Init(GPIO_SPI_BOSCH, &GPIO_InitStructure);

	/* Configure MISO as Input with internal pull-up */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

	/* SPI MISO pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_SPI_BOSCH_MISO;
	GPIO_Init(GPIO_SPI_BOSCH, &GPIO_InitStructure);

	/* Connect SPI pins to AF5 */
	GPIO_PinAFConfig(GPIO_SPI_BOSCH, GPIO_Pin_SPI_BOSCH_SCK_Src, GPIO_AF_SPI_BOSCH );	// SCK
	GPIO_PinAFConfig(GPIO_SPI_BOSCH, GPIO_Pin_SPI_BOSCH_MOSI_Src, GPIO_AF_SPI_BOSCH );	// MOSI
	GPIO_PinAFConfig(GPIO_SPI_BOSCH, GPIO_Pin_SPI_BOSCH_MISO_Src, GPIO_AF_SPI_BOSCH );	// MISO


}
