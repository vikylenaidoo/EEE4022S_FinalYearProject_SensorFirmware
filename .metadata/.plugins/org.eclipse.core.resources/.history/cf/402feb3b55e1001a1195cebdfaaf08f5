/*
 * spi.c
 *
 *  Created on: 15 Aug 2020
 *      Author: vikylenaidoo
 */
//---------------------------------INCLUDES-----------------------------------------//
#include "spi.h"

//-------------------------------PRIVATE DEFINES---------------------------------//
#define GPIO_SPI_CS_BOSCH			GPIOE
#define GPIO_Pin_CS_Acc			GPIO_Pin_7
#define GPIO_Pin_CS_Gyro		GPIO_Pin_8
#define GPIO_Pin_CS_Mag			GPIO_Pin_9
#define GPIO_Pin_CS_Baro		GPIO_Pin_10
//------------------------------STATIC FUNCTIONS--------------------------------//

/**
 * @brief deselect cs pin means set high
 */
static void cs_deselect(SPI_ChipSelectTypeDef cs){
	switch(cs){
	case CS_Acc: 	GPIO_SetBits(GPIO_SPI_CS_BOSCH, GPIO_Pin_CS_Acc);
	case CS_Gyro: 	GPIO_SetBits(GPIO_SPI_CS_BOSCH, GPIO_Pin_CS_Gyro);
	case CS_Mag: 	GPIO_SetBits(GPIO_SPI_CS_BOSCH, GPIO_Pin_CS_Mag);
	case CS_Baro: 	GPIO_SetBits(GPIO_SPI_CS_BOSCH, GPIO_Pin_CS_Baro);
	default:		;
	}
}

/**
 * @brief select cs pin means set low
 */
static void cs_select(SPI_ChipSelectTypeDef cs){
	switch(cs){
	case CS_Acc: 	GPIO_ResetBits(GPIO_SPI_CS_BOSCH, GPIO_Pin_CS_Acc);
	case CS_Gyro: 	GPIO_ResetBits(GPIO_SPI_CS_BOSCH, GPIO_Pin_CS_Gyro);
	case CS_Mag: 	GPIO_ResetBits(GPIO_SPI_CS_BOSCH, GPIO_Pin_CS_Mag);
	case CS_Baro: 	GPIO_ResetBits(GPIO_SPI_CS_BOSCH, GPIO_Pin_CS_Baro);
	default:		;
	}
}
//------------------------------PUBLIC FUNCTIONS-----------------------------------//

/**
 * @brief intialise all clock and registers needed for spi. assign and initialise all gpio pins needed
 * @return void
 */
void spi_initialise(void){

	//enable SPI clock: APB2 for SPI1
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
	//enable GPIO clock for SCK, MOSI, MISO
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	//enable GPIO clock for CS pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);

	//SPI GPIO configurations:
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure SPI Chip Select pins */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;

	/* SPI Accelerometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_CS_Acc;
	GPIO_Init(GPIO_SPI_CS_BOSCH, &GPIO_InitStructure);

	/* SPI Gyroscope CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_CS_Gyro;
	GPIO_Init(GPIO_SPI_CS_BOSCH, &GPIO_InitStructure);

	/* SPI Magnetometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_CS_Mag;
	GPIO_Init(GPIO_SPI_CS_BOSCH, &GPIO_InitStructure);

	/* SPI Barometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_CS_Baro;
	GPIO_Init(GPIO_SPI_CS_BOSCH, &GPIO_InitStructure);





}
