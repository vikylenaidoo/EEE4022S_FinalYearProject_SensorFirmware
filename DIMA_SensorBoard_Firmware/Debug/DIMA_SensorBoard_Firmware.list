
DIMA_SensorBoard_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001924  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001aac  08001aac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001aac  08001aac  00011aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ab0  08001ab0  00011ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08001ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00001020  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20001030  20001030  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000051be  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000011d8  00000000  00000000  000251fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006d0  00000000  00000000  000263d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000608  00000000  00000000  00026aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002795  00000000  00000000  000270b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002382  00000000  00000000  00029845  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002bbc7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001b74  00000000  00000000  0002bc44  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002d7b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001a94 	.word	0x08001a94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001a94 	.word	0x08001a94

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f023 0201 	bic.w	r2, r3, #1
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2200      	movs	r2, #0
 80002aa:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2200      	movs	r2, #0
 80002b0:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2200      	movs	r2, #0
 80002b6:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2200      	movs	r2, #0
 80002bc:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2221      	movs	r2, #33	; 0x21
 80002c2:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a46      	ldr	r2, [pc, #280]	; (80003e0 <DMA_DeInit+0x154>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d103      	bne.n	80002d4 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80002cc:	4b45      	ldr	r3, [pc, #276]	; (80003e4 <DMA_DeInit+0x158>)
 80002ce:	223d      	movs	r2, #61	; 0x3d
 80002d0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80002d2:	e07e      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a44      	ldr	r2, [pc, #272]	; (80003e8 <DMA_DeInit+0x15c>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d104      	bne.n	80002e6 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80002dc:	4b41      	ldr	r3, [pc, #260]	; (80003e4 <DMA_DeInit+0x158>)
 80002de:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80002e2:	609a      	str	r2, [r3, #8]
}
 80002e4:	e075      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a40      	ldr	r2, [pc, #256]	; (80003ec <DMA_DeInit+0x160>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d104      	bne.n	80002f8 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80002ee:	4b3d      	ldr	r3, [pc, #244]	; (80003e4 <DMA_DeInit+0x158>)
 80002f0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80002f4:	609a      	str	r2, [r3, #8]
}
 80002f6:	e06c      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a3d      	ldr	r2, [pc, #244]	; (80003f0 <DMA_DeInit+0x164>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d104      	bne.n	800030a <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000300:	4b38      	ldr	r3, [pc, #224]	; (80003e4 <DMA_DeInit+0x158>)
 8000302:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000306:	609a      	str	r2, [r3, #8]
}
 8000308:	e063      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a39      	ldr	r2, [pc, #228]	; (80003f4 <DMA_DeInit+0x168>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d103      	bne.n	800031a <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000312:	4b34      	ldr	r3, [pc, #208]	; (80003e4 <DMA_DeInit+0x158>)
 8000314:	4a38      	ldr	r2, [pc, #224]	; (80003f8 <DMA_DeInit+0x16c>)
 8000316:	60da      	str	r2, [r3, #12]
}
 8000318:	e05b      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a37      	ldr	r2, [pc, #220]	; (80003fc <DMA_DeInit+0x170>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d103      	bne.n	800032a <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000322:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <DMA_DeInit+0x158>)
 8000324:	4a36      	ldr	r2, [pc, #216]	; (8000400 <DMA_DeInit+0x174>)
 8000326:	60da      	str	r2, [r3, #12]
}
 8000328:	e053      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a35      	ldr	r2, [pc, #212]	; (8000404 <DMA_DeInit+0x178>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d103      	bne.n	800033a <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000332:	4b2c      	ldr	r3, [pc, #176]	; (80003e4 <DMA_DeInit+0x158>)
 8000334:	4a34      	ldr	r2, [pc, #208]	; (8000408 <DMA_DeInit+0x17c>)
 8000336:	60da      	str	r2, [r3, #12]
}
 8000338:	e04b      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a33      	ldr	r2, [pc, #204]	; (800040c <DMA_DeInit+0x180>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d104      	bne.n	800034c <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000342:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <DMA_DeInit+0x158>)
 8000344:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000348:	60da      	str	r2, [r3, #12]
}
 800034a:	e042      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a30      	ldr	r2, [pc, #192]	; (8000410 <DMA_DeInit+0x184>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d103      	bne.n	800035c <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000354:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <DMA_DeInit+0x188>)
 8000356:	223d      	movs	r2, #61	; 0x3d
 8000358:	609a      	str	r2, [r3, #8]
}
 800035a:	e03a      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a2e      	ldr	r2, [pc, #184]	; (8000418 <DMA_DeInit+0x18c>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d104      	bne.n	800036e <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000364:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <DMA_DeInit+0x188>)
 8000366:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800036a:	609a      	str	r2, [r3, #8]
}
 800036c:	e031      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a2a      	ldr	r2, [pc, #168]	; (800041c <DMA_DeInit+0x190>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d104      	bne.n	8000380 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000376:	4b27      	ldr	r3, [pc, #156]	; (8000414 <DMA_DeInit+0x188>)
 8000378:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800037c:	609a      	str	r2, [r3, #8]
}
 800037e:	e028      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a27      	ldr	r2, [pc, #156]	; (8000420 <DMA_DeInit+0x194>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d104      	bne.n	8000392 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000388:	4b22      	ldr	r3, [pc, #136]	; (8000414 <DMA_DeInit+0x188>)
 800038a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800038e:	609a      	str	r2, [r3, #8]
}
 8000390:	e01f      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a23      	ldr	r2, [pc, #140]	; (8000424 <DMA_DeInit+0x198>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d103      	bne.n	80003a2 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800039a:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <DMA_DeInit+0x188>)
 800039c:	4a16      	ldr	r2, [pc, #88]	; (80003f8 <DMA_DeInit+0x16c>)
 800039e:	60da      	str	r2, [r3, #12]
}
 80003a0:	e017      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a20      	ldr	r2, [pc, #128]	; (8000428 <DMA_DeInit+0x19c>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d103      	bne.n	80003b2 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <DMA_DeInit+0x188>)
 80003ac:	4a14      	ldr	r2, [pc, #80]	; (8000400 <DMA_DeInit+0x174>)
 80003ae:	60da      	str	r2, [r3, #12]
}
 80003b0:	e00f      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a1d      	ldr	r2, [pc, #116]	; (800042c <DMA_DeInit+0x1a0>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d103      	bne.n	80003c2 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80003ba:	4b16      	ldr	r3, [pc, #88]	; (8000414 <DMA_DeInit+0x188>)
 80003bc:	4a12      	ldr	r2, [pc, #72]	; (8000408 <DMA_DeInit+0x17c>)
 80003be:	60da      	str	r2, [r3, #12]
}
 80003c0:	e007      	b.n	80003d2 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a1a      	ldr	r2, [pc, #104]	; (8000430 <DMA_DeInit+0x1a4>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d103      	bne.n	80003d2 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <DMA_DeInit+0x188>)
 80003cc:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80003d0:	60da      	str	r2, [r3, #12]
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40026010 	.word	0x40026010
 80003e4:	40026000 	.word	0x40026000
 80003e8:	40026028 	.word	0x40026028
 80003ec:	40026040 	.word	0x40026040
 80003f0:	40026058 	.word	0x40026058
 80003f4:	40026070 	.word	0x40026070
 80003f8:	2000003d 	.word	0x2000003d
 80003fc:	40026088 	.word	0x40026088
 8000400:	20000f40 	.word	0x20000f40
 8000404:	400260a0 	.word	0x400260a0
 8000408:	203d0000 	.word	0x203d0000
 800040c:	400260b8 	.word	0x400260b8
 8000410:	40026410 	.word	0x40026410
 8000414:	40026400 	.word	0x40026400
 8000418:	40026428 	.word	0x40026428
 800041c:	40026440 	.word	0x40026440
 8000420:	40026458 	.word	0x40026458
 8000424:	40026470 	.word	0x40026470
 8000428:	40026488 	.word	0x40026488
 800042c:	400264a0 	.word	0x400264a0
 8000430:	400264b8 	.word	0x400264b8

08000434 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <DMA_Init+0xac>)
 800044c:	4013      	ands	r3, r2
 800044e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800045e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800046a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	6a1b      	ldr	r3, [r3, #32]
 8000470:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000476:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800047c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000482:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000488:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	4313      	orrs	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f023 0307 	bic.w	r3, r3, #7
 80004a2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4313      	orrs	r3, r2
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	68fa      	ldr	r2, [r7, #12]
 80004b8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	691a      	ldr	r2, [r3, #16]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	685a      	ldr	r2, [r3, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	689a      	ldr	r2, [r3, #8]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	60da      	str	r2, [r3, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	f01c803f 	.word	0xf01c803f

080004e4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d006      	beq.n	8000504 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f043 0201 	orr.w	r2, r3, #1
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000502:	e005      	b.n	8000510 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f023 0201 	bic.w	r2, r3, #1
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	601a      	str	r2, [r3, #0]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	b29b      	uxth	r3, r3
}
 800052a:	4618      	mov	r0, r3
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000536:	b480      	push	{r7}
 8000538:	b085      	sub	sp, #20
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800053e:	2300      	movs	r3, #0
 8000540:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800054e:	2301      	movs	r3, #1
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e001      	b.n	8000558 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000558:	7bfb      	ldrb	r3, [r7, #15]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000568:	b480      	push	{r7}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000572:	2300      	movs	r3, #0
 8000574:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <DMA_GetFlagStatus+0x6c>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d802      	bhi.n	8000588 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <DMA_GetFlagStatus+0x70>)
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	e001      	b.n	800058c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <DMA_GetFlagStatus+0x74>)
 800058a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000592:	2b00      	cmp	r3, #0
 8000594:	d003      	beq.n	800059e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	e002      	b.n	80005a4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80005aa:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80005ae:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	4013      	ands	r3, r2
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80005ba:	2301      	movs	r3, #1
 80005bc:	75fb      	strb	r3, [r7, #23]
 80005be:	e001      	b.n	80005c4 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80005c0:	2300      	movs	r3, #0
 80005c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80005c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	371c      	adds	r7, #28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	4002640f 	.word	0x4002640f
 80005d8:	40026000 	.word	0x40026000
 80005dc:	40026400 	.word	0x40026400

080005e0 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	4613      	mov	r3, r2
 80005ec:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00f      	beq.n	8000618 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d006      	beq.n	800060c <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	615a      	str	r2, [r3, #20]
 800060a:	e005      	b.n	8000618 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2b80      	cmp	r3, #128	; 0x80
 800061c:	d014      	beq.n	8000648 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d008      	beq.n	8000636 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	f003 031e 	and.w	r3, r3, #30
 800062e:	431a      	orrs	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000634:	e008      	b.n	8000648 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	f003 031e 	and.w	r3, r3, #30
 8000640:	43db      	mvns	r3, r3
 8000642:	401a      	ands	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	601a      	str	r2, [r3, #0]
}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <DMA_ClearITPendingBit+0x50>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d802      	bhi.n	800066c <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <DMA_ClearITPendingBit+0x54>)
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	e001      	b.n	8000670 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <DMA_ClearITPendingBit+0x58>)
 800066e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000676:	2b00      	cmp	r3, #0
 8000678:	d007      	beq.n	800068a <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000680:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8000688:	e006      	b.n	8000698 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000690:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	6093      	str	r3, [r2, #8]
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	4002640f 	.word	0x4002640f
 80006a8:	40026000 	.word	0x40026000
 80006ac:	40026400 	.word	0x40026400

080006b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	e076      	b.n	80007ba <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80006cc:	2201      	movs	r2, #1
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	4013      	ands	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d165      	bne.n	80007b4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	2103      	movs	r1, #3
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	43db      	mvns	r3, r3
 80006f8:	401a      	ands	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	791b      	ldrb	r3, [r3, #4]
 8000706:	4619      	mov	r1, r3
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	fa01 f303 	lsl.w	r3, r1, r3
 8000710:	431a      	orrs	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d003      	beq.n	8000726 <GPIO_Init+0x76>
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	2b02      	cmp	r3, #2
 8000724:	d12e      	bne.n	8000784 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	689a      	ldr	r2, [r3, #8]
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	2103      	movs	r1, #3
 8000730:	fa01 f303 	lsl.w	r3, r1, r3
 8000734:	43db      	mvns	r3, r3
 8000736:	401a      	ands	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	689a      	ldr	r2, [r3, #8]
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	795b      	ldrb	r3, [r3, #5]
 8000744:	4619      	mov	r1, r3
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	431a      	orrs	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	b29b      	uxth	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	2301      	movs	r3, #1
 8000760:	408b      	lsls	r3, r1
 8000762:	43db      	mvns	r3, r3
 8000764:	401a      	ands	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	7992      	ldrb	r2, [r2, #6]
 8000772:	4611      	mov	r1, r2
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	b292      	uxth	r2, r2
 8000778:	fa01 f202 	lsl.w	r2, r1, r2
 800077c:	b292      	uxth	r2, r2
 800077e:	431a      	orrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	68da      	ldr	r2, [r3, #12]
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	b29b      	uxth	r3, r3
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	2103      	movs	r1, #3
 8000790:	fa01 f303 	lsl.w	r3, r1, r3
 8000794:	43db      	mvns	r3, r3
 8000796:	401a      	ands	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68da      	ldr	r2, [r3, #12]
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	79db      	ldrb	r3, [r3, #7]
 80007a4:	4619      	mov	r1, r3
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	431a      	orrs	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	3301      	adds	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	d985      	bls.n	80006cc <GPIO_Init+0x1c>
    }
  }
}
 80007c0:	bf00      	nop
 80007c2:	371c      	adds	r7, #28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	887a      	ldrh	r2, [r7, #2]
 80007dc:	831a      	strh	r2, [r3, #24]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	887a      	ldrh	r2, [r7, #2]
 80007fa:	835a      	strh	r2, [r3, #26]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	807b      	strh	r3, [r7, #2]
 8000814:	4613      	mov	r3, r2
 8000816:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000820:	787a      	ldrb	r2, [r7, #1]
 8000822:	887b      	ldrh	r3, [r7, #2]
 8000824:	f003 0307 	and.w	r3, r3, #7
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000830:	887b      	ldrh	r3, [r7, #2]
 8000832:	08db      	lsrs	r3, r3, #3
 8000834:	b29b      	uxth	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	887b      	ldrh	r3, [r7, #2]
 800083a:	08db      	lsrs	r3, r3, #3
 800083c:	b29b      	uxth	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3208      	adds	r2, #8
 8000844:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	210f      	movs	r1, #15
 8000852:	fa01 f303 	lsl.w	r3, r1, r3
 8000856:	43db      	mvns	r3, r3
 8000858:	ea02 0103 	and.w	r1, r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f100 0208 	add.w	r2, r0, #8
 8000862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000866:	887b      	ldrh	r3, [r7, #2]
 8000868:	08db      	lsrs	r3, r3, #3
 800086a:	b29b      	uxth	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3208      	adds	r2, #8
 8000872:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4313      	orrs	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800087c:	887b      	ldrh	r3, [r7, #2]
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	b29b      	uxth	r3, r3
 8000882:	461a      	mov	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3208      	adds	r2, #8
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
 80008b0:	2302      	movs	r3, #2
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	2302      	movs	r3, #2
 80008ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008bc:	4b47      	ldr	r3, [pc, #284]	; (80009dc <RCC_GetClocksFreq+0x140>)
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f003 030c 	and.w	r3, r3, #12
 80008c4:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d007      	beq.n	80008dc <RCC_GetClocksFreq+0x40>
 80008cc:	2b08      	cmp	r3, #8
 80008ce:	d009      	beq.n	80008e4 <RCC_GetClocksFreq+0x48>
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d13d      	bne.n	8000950 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a42      	ldr	r2, [pc, #264]	; (80009e0 <RCC_GetClocksFreq+0x144>)
 80008d8:	601a      	str	r2, [r3, #0]
      break;
 80008da:	e03d      	b.n	8000958 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a41      	ldr	r2, [pc, #260]	; (80009e4 <RCC_GetClocksFreq+0x148>)
 80008e0:	601a      	str	r2, [r3, #0]
      break;
 80008e2:	e039      	b.n	8000958 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80008e4:	4b3d      	ldr	r3, [pc, #244]	; (80009dc <RCC_GetClocksFreq+0x140>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	0d9b      	lsrs	r3, r3, #22
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80008f0:	4b3a      	ldr	r3, [pc, #232]	; (80009dc <RCC_GetClocksFreq+0x140>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008f8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d00c      	beq.n	800091a <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000900:	4a38      	ldr	r2, [pc, #224]	; (80009e4 <RCC_GetClocksFreq+0x148>)
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	fbb2 f3f3 	udiv	r3, r2, r3
 8000908:	4a34      	ldr	r2, [pc, #208]	; (80009dc <RCC_GetClocksFreq+0x140>)
 800090a:	6852      	ldr	r2, [r2, #4]
 800090c:	0992      	lsrs	r2, r2, #6
 800090e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000912:	fb02 f303 	mul.w	r3, r2, r3
 8000916:	61fb      	str	r3, [r7, #28]
 8000918:	e00b      	b.n	8000932 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800091a:	4a31      	ldr	r2, [pc, #196]	; (80009e0 <RCC_GetClocksFreq+0x144>)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000922:	4a2e      	ldr	r2, [pc, #184]	; (80009dc <RCC_GetClocksFreq+0x140>)
 8000924:	6852      	ldr	r2, [r2, #4]
 8000926:	0992      	lsrs	r2, r2, #6
 8000928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800092c:	fb02 f303 	mul.w	r3, r2, r3
 8000930:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <RCC_GetClocksFreq+0x140>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	0c1b      	lsrs	r3, r3, #16
 8000938:	f003 0303 	and.w	r3, r3, #3
 800093c:	3301      	adds	r3, #1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000942:	69fa      	ldr	r2, [r7, #28]
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	fbb2 f2f3 	udiv	r2, r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	601a      	str	r2, [r3, #0]
      break;
 800094e:	e003      	b.n	8000958 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <RCC_GetClocksFreq+0x144>)
 8000954:	601a      	str	r2, [r3, #0]
      break;
 8000956:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000958:	4b20      	ldr	r3, [pc, #128]	; (80009dc <RCC_GetClocksFreq+0x140>)
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000960:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	091b      	lsrs	r3, r3, #4
 8000966:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000968:	4a1f      	ldr	r2, [pc, #124]	; (80009e8 <RCC_GetClocksFreq+0x14c>)
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	4413      	add	r3, r2
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	40da      	lsrs	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <RCC_GetClocksFreq+0x140>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000988:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	0a9b      	lsrs	r3, r3, #10
 800098e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000990:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <RCC_GetClocksFreq+0x14c>)
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	40da      	lsrs	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <RCC_GetClocksFreq+0x140>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80009b0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	0b5b      	lsrs	r3, r3, #13
 80009b6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80009b8:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <RCC_GetClocksFreq+0x14c>)
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	4413      	add	r3, r2
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	40da      	lsrs	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	60da      	str	r2, [r3, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3724      	adds	r7, #36	; 0x24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	40023800 	.word	0x40023800
 80009e0:	00f42400 	.word	0x00f42400
 80009e4:	017d7840 	.word	0x017d7840
 80009e8:	20000000 	.word	0x20000000

080009ec <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d006      	beq.n	8000a0c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80009fe:	490a      	ldr	r1, [pc, #40]	; (8000a28 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000a0a:	e006      	b.n	8000a1a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000a0c:	4906      	ldr	r1, [pc, #24]	; (8000a28 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	4013      	ands	r3, r2
 8000a18:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a38:	78fb      	ldrb	r3, [r7, #3]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d006      	beq.n	8000a4c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000a3e:	490a      	ldr	r1, [pc, #40]	; (8000a68 <RCC_APB2PeriphClockCmd+0x3c>)
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <RCC_APB2PeriphClockCmd+0x3c>)
 8000a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000a4a:	e006      	b.n	8000a5a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000a4c:	4906      	ldr	r1, [pc, #24]	; (8000a68 <RCC_APB2PeriphClockCmd+0x3c>)
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <RCC_APB2PeriphClockCmd+0x3c>)
 8000a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	4013      	ands	r3, r2
 8000a58:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000a80:	89fb      	ldrh	r3, [r7, #14]
 8000a82:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000a86:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	881a      	ldrh	r2, [r3, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	885b      	ldrh	r3, [r3, #2]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	89fb      	ldrh	r3, [r7, #14]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	89fa      	ldrh	r2, [r7, #14]
 8000ace:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	8b9b      	ldrh	r3, [r3, #28]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	8a1a      	ldrh	r2, [r3, #16]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	821a      	strh	r2, [r3, #16]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d008      	beq.n	8000b18 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8000b16:	e007      	b.n	8000b28 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	801a      	strh	r2, [r3, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	899b      	ldrh	r3, [r3, #12]
 8000b40:	b29b      	uxth	r3, r3
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	460b      	mov	r3, r1
 8000b58:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	887a      	ldrh	r2, [r7, #2]
 8000b5e:	819a      	strh	r2, [r3, #12]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d008      	beq.n	8000b90 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
  }
}
 8000b8e:	e007      	b.n	8000ba0 <SPI_CalculateCRC+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	801a      	strh	r2, [r3, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	891b      	ldrh	r3, [r3, #8]
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	e001      	b.n	8000bd6 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	8a1b      	ldrh	r3, [r3, #16]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	88db      	ldrh	r3, [r3, #6]
 8000c12:	461a      	mov	r2, r3
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	4313      	orrs	r3, r2
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	899b      	ldrh	r3, [r3, #12]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000c30:	f023 030c 	bic.w	r3, r3, #12
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	889a      	ldrh	r2, [r3, #4]
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	891b      	ldrh	r3, [r3, #8]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	8a9b      	ldrh	r3, [r3, #20]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	899b      	ldrh	r3, [r3, #12]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	4313      	orrs	r3, r2
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fe0a 	bl	800089c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a30      	ldr	r2, [pc, #192]	; (8000d4c <USART_Init+0x168>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d003      	beq.n	8000c98 <USART_Init+0xb4>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a2f      	ldr	r2, [pc, #188]	; (8000d50 <USART_Init+0x16c>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d102      	bne.n	8000c9e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	623b      	str	r3, [r7, #32]
 8000c9c:	e001      	b.n	8000ca2 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	899b      	ldrh	r3, [r3, #12]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	da0c      	bge.n	8000cc8 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000cae:	6a3a      	ldr	r2, [r7, #32]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	009a      	lsls	r2, r3, #2
 8000cb8:	441a      	add	r2, r3
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	e00b      	b.n	8000ce0 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000cc8:	6a3a      	ldr	r2, [r7, #32]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	009a      	lsls	r2, r3, #2
 8000cd2:	441a      	add	r2, r3
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <USART_Init+0x170>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	095b      	lsrs	r3, r3, #5
 8000cea:	011b      	lsls	r3, r3, #4
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	091b      	lsrs	r3, r3, #4
 8000cf2:	2264      	movs	r2, #100	; 0x64
 8000cf4:	fb02 f303 	mul.w	r3, r2, r3
 8000cf8:	69fa      	ldr	r2, [r7, #28]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	899b      	ldrh	r3, [r3, #12]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da0c      	bge.n	8000d24 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	3332      	adds	r3, #50	; 0x32
 8000d10:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <USART_Init+0x170>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
 8000d22:	e00b      	b.n	8000d3c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	3332      	adds	r3, #50	; 0x32
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <USART_Init+0x170>)
 8000d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d30:	095b      	lsrs	r3, r3, #5
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	811a      	strh	r2, [r3, #8]
}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40011000 	.word	0x40011000
 8000d50:	40011400 	.word	0x40011400
 8000d54:	51eb851f 	.word	0x51eb851f

08000d58 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d008      	beq.n	8000d7c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	899b      	ldrh	r3, [r3, #12]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000d7a:	e007      	b.n	8000d8c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	899b      	ldrh	r3, [r3, #12]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	819a      	strh	r2, [r3, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	889b      	ldrh	r3, [r3, #4]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000daa:	b29b      	uxth	r3, r3
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000dc8:	787b      	ldrb	r3, [r7, #1]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d008      	beq.n	8000de0 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	8a9b      	ldrh	r3, [r3, #20]
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	887b      	ldrh	r3, [r7, #2]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 8000dde:	e009      	b.n	8000df4 <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	8a9b      	ldrh	r3, [r3, #20]
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	4013      	ands	r3, r2
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	829a      	strh	r2, [r3, #20]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	095b      	lsrs	r3, r3, #5
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000e2e:	887b      	ldrh	r3, [r7, #2]
 8000e30:	f003 031f 	and.w	r3, r3, #31
 8000e34:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000e36:	2201      	movs	r2, #1
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d103      	bne.n	8000e4e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	330c      	adds	r3, #12
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	e009      	b.n	8000e62 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d103      	bne.n	8000e5c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	3310      	adds	r3, #16
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	e002      	b.n	8000e62 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3314      	adds	r3, #20
 8000e60:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000e62:	787b      	ldrb	r3, [r7, #1]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d006      	beq.n	8000e76 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	6811      	ldr	r1, [r2, #0]
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000e74:	e006      	b.n	8000e84 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	6811      	ldr	r1, [r2, #0]
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	43d2      	mvns	r2, r2
 8000e80:	400a      	ands	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	bf00      	nop
 8000e86:	371c      	adds	r7, #28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	095b      	lsrs	r3, r3, #5
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	f003 031f 	and.w	r3, r3, #31
 8000ebc:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d107      	bne.n	8000ede <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	899b      	ldrh	r3, [r3, #12]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e011      	b.n	8000f02 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d107      	bne.n	8000ef4 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	8a1b      	ldrh	r3, [r3, #16]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e006      	b.n	8000f02 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	8a9b      	ldrh	r3, [r3, #20]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	4013      	ands	r3, r2
 8000f00:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d005      	beq.n	8000f34 <USART_GetITStatus+0xa4>
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	74fb      	strb	r3, [r7, #19]
 8000f32:	e001      	b.n	8000f38 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000f38:	7cfb      	ldrb	r3, [r7, #19]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	371c      	adds	r7, #28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <main>:
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void){
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b084      	sub	sp, #16
 8000f4a:	af00      	add	r7, sp, #0
	spi_initialise();
 8000f4c:	f000 fab0 	bl	80014b0 <spi_initialise>

	Sensor_StatusTypeDef status;
	//uint8_t chipid_gyro = spi_read_single(SPI_CS_Acc, BMX055_ACC_CHIP_ID|ACC_CHIP_ID_CHIP_ID);
	do{
		 status = sensor_check_id();
 8000f50:	f000 f9bc 	bl	80012cc <sensor_check_id>
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
	}while (status != SENS_OK);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f8      	bne.n	8000f50 <main+0xa>

	status = sensor_config();
 8000f5e:	f000 f9ec 	bl	800133a <sensor_config>
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]

	uart_initialise();
 8000f66:	f000 fc8b 	bl	8001880 <uart_initialise>
	//uint8_t acc_buffer [6];
	//uint8_t gyro_buffer [6];
	//uint8_t mag_buffer [8];
	*/

	uint8_t data = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	71bb      	strb	r3, [r7, #6]
		*/

		/*if(USART_GetFlagStatus(USART1, USART_FLAG_RXNE))
			data = uart_receive(UART_DEVICE_GNSS);
		 */
		for(int i=0; i<1000; i++){
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	e00c      	b.n	8000f8e <main+0x48>
			for(int i=0; i<1000; i++){
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	e002      	b.n	8000f80 <main+0x3a>
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f86:	dbf8      	blt.n	8000f7a <main+0x34>
		for(int i=0; i<1000; i++){
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f94:	dbee      	blt.n	8000f74 <main+0x2e>
 8000f96:	e7ea      	b.n	8000f6e <main+0x28>

08000f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f9e:	e003      	b.n	8000fa8 <LoopCopyDataInit>

08000fa0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fa2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fa4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fa6:	3104      	adds	r1, #4

08000fa8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fa8:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb0:	d3f6      	bcc.n	8000fa0 <CopyDataInit>
  ldr  r2, =_sbss
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fb4:	e002      	b.n	8000fbc <LoopFillZerobss>

08000fb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fb8:	f842 3b04 	str.w	r3, [r2], #4

08000fbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc0:	d3f9      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fc2:	f000 f841 	bl	8001048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f000 fd41 	bl	8001a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fca:	f7ff ffbc 	bl	8000f46 <main>
  bx  lr    
 8000fce:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fd4:	08001ab4 	.word	0x08001ab4
  ldr  r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fdc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000fe0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000fe4:	20001030 	.word	0x20001030

08000fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC_IRQHandler>

08000fea <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <HardFault_Handler+0x4>

08000ffe <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001002:	e7fe      	b.n	8001002 <MemManage_Handler+0x4>

08001004 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001008:	e7fe      	b.n	8001008 <BusFault_Handler+0x4>

0800100a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800100e:	e7fe      	b.n	800100e <UsageFault_Handler+0x4>

08001010 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800104c:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <SystemInit+0x60>)
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <SystemInit+0x60>)
 8001050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800105c:	4a13      	ldr	r2, [pc, #76]	; (80010ac <SystemInit+0x64>)
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <SystemInit+0x64>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <SystemInit+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <SystemInit+0x64>)
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <SystemInit+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <SystemInit+0x64>)
 8001080:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <SystemInit+0x68>)
 8001082:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001084:	4a09      	ldr	r2, [pc, #36]	; (80010ac <SystemInit+0x64>)
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <SystemInit+0x64>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <SystemInit+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001096:	f000 f80d 	bl	80010b4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800109a:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <SystemInit+0x60>)
 800109c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010a0:	609a      	str	r2, [r3, #8]
#endif
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00
 80010ac:	40023800 	.word	0x40023800
 80010b0:	24003010 	.word	0x24003010

080010b4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	2300      	movs	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80010c2:	4a36      	ldr	r2, [pc, #216]	; (800119c <SetSysClock+0xe8>)
 80010c4:	4b35      	ldr	r3, [pc, #212]	; (800119c <SetSysClock+0xe8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80010ce:	4b33      	ldr	r3, [pc, #204]	; (800119c <SetSysClock+0xe8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3301      	adds	r3, #1
 80010dc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <SetSysClock+0x38>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80010ea:	d1f0      	bne.n	80010ce <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <SetSysClock+0xe8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80010f8:	2301      	movs	r3, #1
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	e001      	b.n	8001102 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d142      	bne.n	800118e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001108:	4a24      	ldr	r2, [pc, #144]	; (800119c <SetSysClock+0xe8>)
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <SetSysClock+0xe8>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001112:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001114:	4a22      	ldr	r2, [pc, #136]	; (80011a0 <SetSysClock+0xec>)
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <SetSysClock+0xec>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800111e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001120:	4a1e      	ldr	r2, [pc, #120]	; (800119c <SetSysClock+0xe8>)
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <SetSysClock+0xe8>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001128:	4a1c      	ldr	r2, [pc, #112]	; (800119c <SetSysClock+0xe8>)
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <SetSysClock+0xe8>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001132:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001134:	4a19      	ldr	r2, [pc, #100]	; (800119c <SetSysClock+0xe8>)
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <SetSysClock+0xe8>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800113e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <SetSysClock+0xe8>)
 8001142:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <SetSysClock+0xf0>)
 8001144:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <SetSysClock+0xe8>)
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <SetSysClock+0xe8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001150:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001152:	bf00      	nop
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <SetSysClock+0xe8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f9      	beq.n	8001154 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <SetSysClock+0xf4>)
 8001162:	f240 7205 	movw	r2, #1797	; 0x705
 8001166:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001168:	4a0c      	ldr	r2, [pc, #48]	; (800119c <SetSysClock+0xe8>)
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <SetSysClock+0xe8>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f023 0303 	bic.w	r3, r3, #3
 8001172:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001174:	4a09      	ldr	r2, [pc, #36]	; (800119c <SetSysClock+0xe8>)
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <SetSysClock+0xe8>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001180:	bf00      	nop
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <SetSysClock+0xe8>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b08      	cmp	r3, #8
 800118c:	d1f9      	bne.n	8001182 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40007000 	.word	0x40007000
 80011a4:	07405419 	.word	0x07405419
 80011a8:	40023c00 	.word	0x40023c00

080011ac <sensor_mag_power_control>:
//------------------------------STATIC FUNCTIONS--------------------------------//
/* @brief change magneto mode between sleep / suspend
 * cmd==ENABLE: put the magneto to sleep mode
 * cmd==Disable: put magneto to suspend mode
 */
static void sensor_mag_power_control(FunctionalState cmd){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	if(cmd == ENABLE){
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d105      	bne.n	80011c8 <sensor_mag_power_control+0x1c>
		spi_write_single(SPI_CS_Mag, MAG_PWR_CR1_POWER_CONTROL_BIT, BMX055_MAG_PWR_CR1);
 80011bc:	224b      	movs	r2, #75	; 0x4b
 80011be:	2101      	movs	r1, #1
 80011c0:	2002      	movs	r0, #2
 80011c2:	f000 fa4a 	bl	800165a <spi_write_single>
	}
	else{
		spi_write_single(SPI_CS_Mag, 0x00, BMX055_MAG_PWR_CR1);
	}
}
 80011c6:	e004      	b.n	80011d2 <sensor_mag_power_control+0x26>
		spi_write_single(SPI_CS_Mag, 0x00, BMX055_MAG_PWR_CR1);
 80011c8:	224b      	movs	r2, #75	; 0x4b
 80011ca:	2100      	movs	r1, #0
 80011cc:	2002      	movs	r0, #2
 80011ce:	f000 fa44 	bl	800165a <spi_write_single>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <bmp280_config>:
 * BMP_CTRL_MEAS	osrs_t		001		7,6,5	x1 sampling
 * 					osrs_p		001		4,3,2	x1 sampling
 * 					mode		11		1,0		(set to normal mode)
 *
 */
static Sensor_StatusTypeDef bmp280_config(){
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
	//write 001000100 to BMP_CTRL_MEAS
	//uint8_t calib_data = CTRL_MEAS_OSRS_P_1|CTRL_MEAS_OSRS_T_1;
	uint8_t calib_data = CTRL_MEAS_OSRS_P_1|CTRL_MEAS_OSRS_T_1|CTRL_MEAS_MODE_NORMAL;
 80011e0:	2327      	movs	r3, #39	; 0x27
 80011e2:	71fb      	strb	r3, [r7, #7]

	if( spi_write_single(SPI_CS_Baro, calib_data, BMP280_CTRL_MEAS) != SENS_OK)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	22f4      	movs	r2, #244	; 0xf4
 80011e8:	4619      	mov	r1, r3
 80011ea:	2003      	movs	r0, #3
 80011ec:	f000 fa35 	bl	800165a <spi_write_single>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <bmp280_config+0x20>
		return SENS_CONFERR;
 80011f6:	2305      	movs	r3, #5
 80011f8:	e000      	b.n	80011fc <bmp280_config+0x22>

	//if (spi_write_single(SPI_CS_Baro, 0x04, BMP280_CONFIG) != SENS_OK)
		//return SENS_CONFERR;

	return SENS_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <bmx055_config>:
 *
 * use Sensor_ConfigTypeDef to set
 * rates and ranges
 *
 */
static Sensor_StatusTypeDef bmx055_config(Sensor_ConfigTypeDef *f){
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

	//----------------ACCELEROMETER-------------------------//
	/* Accelerometer measurement range
	 * Default	: 0b(0000)0011 	= +-2g
	 * Set		: user-defined*/
	if(spi_write_single(SPI_CS_Acc, f->accel_range, BMX055_ACC_PMU_RANGE) != SENS_OK){
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	785b      	ldrb	r3, [r3, #1]
 8001210:	220f      	movs	r2, #15
 8001212:	4619      	mov	r1, r3
 8001214:	2000      	movs	r0, #0
 8001216:	f000 fa20 	bl	800165a <spi_write_single>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <bmx055_config+0x20>
		return SENS_CONFERR;
 8001220:	2305      	movs	r3, #5
 8001222:	e04f      	b.n	80012c4 <bmx055_config+0xc0>
	}
	/* Accelerometer measurement output data rate
	 * Default	: 0b(000)01111 	= 1000 Hz
	 * Set		: user-defined*/
	if(spi_write_single(SPI_CS_Acc, f->accel_rate, BMX055_ACC_PMU_BW) != SENS_OK){
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2210      	movs	r2, #16
 800122a:	4619      	mov	r1, r3
 800122c:	2000      	movs	r0, #0
 800122e:	f000 fa14 	bl	800165a <spi_write_single>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <bmx055_config+0x38>
		return SENS_CONFERR;
 8001238:	2305      	movs	r3, #5
 800123a:	e043      	b.n	80012c4 <bmx055_config+0xc0>
	}
	/* Accelerometer power mode
	 * Default	: 0b0000000(0) 	= normal mode
	 * Set		: 0b0000000(0) 	= normal mode */
	if(spi_write_single(SPI_CS_Acc, ACC_PWR_NORMAL, BMX055_ACC_PMU_LPW) != SENS_OK){
 800123c:	2211      	movs	r2, #17
 800123e:	2100      	movs	r1, #0
 8001240:	2000      	movs	r0, #0
 8001242:	f000 fa0a 	bl	800165a <spi_write_single>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <bmx055_config+0x4c>
		return SENS_CONFERR;
 800124c:	2305      	movs	r3, #5
 800124e:	e039      	b.n	80012c4 <bmx055_config+0xc0>

	//-----------------------GYROSCOPE-----------------------//
	/* Gyroscope measurement range
	 * Default	: 0b(00000)000 	= +-2000d/s
	 * Set		: user-defined*/
	if(spi_write_single(SPI_CS_Gyro, f->gyro_range, BMX055_GYRO_RANGE) != SENS_OK){
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	78db      	ldrb	r3, [r3, #3]
 8001254:	220f      	movs	r2, #15
 8001256:	4619      	mov	r1, r3
 8001258:	2001      	movs	r0, #1
 800125a:	f000 f9fe 	bl	800165a <spi_write_single>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <bmx055_config+0x64>
		return SENS_CONFERR;
 8001264:	2305      	movs	r3, #5
 8001266:	e02d      	b.n	80012c4 <bmx055_config+0xc0>
	}
	/* Gyroscope measurement output data rate (bandwidth)
	 * Default	: 0b(1000)0000 	= 2000 Hz with no filter
	 * Set		: user-defined*/
	if(spi_write_single(SPI_CS_Gyro, f->gyro_rate|GYRO_BW_RESET, BMX055_GYRO_BW) != SENS_OK){
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	789b      	ldrb	r3, [r3, #2]
 800126c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2210      	movs	r2, #16
 8001274:	4619      	mov	r1, r3
 8001276:	2001      	movs	r0, #1
 8001278:	f000 f9ef 	bl	800165a <spi_write_single>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <bmx055_config+0x82>
		return SENS_CONFERR;
 8001282:	2305      	movs	r3, #5
 8001284:	e01e      	b.n	80012c4 <bmx055_config+0xc0>
	}
	/* Gyroscope power mode
	 * Default	: 0b0(0)0(0)000(0)	= normal mode
	 * Set		: 0b0(0)0(0)000(0)	= normal mode*/
	if(spi_write_single(SPI_CS_Gyro, GYRO_LPM1_NORMAL_MODE, BMX055_GYRO_LPM1) != SENS_OK){
 8001286:	2211      	movs	r2, #17
 8001288:	2100      	movs	r1, #0
 800128a:	2001      	movs	r0, #1
 800128c:	f000 f9e5 	bl	800165a <spi_write_single>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <bmx055_config+0x96>
		return SENS_CONFERR;
 8001296:	2305      	movs	r3, #5
 8001298:	e014      	b.n	80012c4 <bmx055_config+0xc0>

	/*Magneto meter xy repetitions
	 *choose nXY=3 ==> REPXY=1 (see pg122 table37 and pg138 of datasheet)
	 *default	: 0b00000000
	 *set to	: 0b00000001 */
	if(spi_write_single(SPI_CS_Mag, MAG_REP_XY_LOW_POWER_PRESET_REPXY, BMX055_MAG_REP_XY) != SENS_OK){
 800129a:	2251      	movs	r2, #81	; 0x51
 800129c:	2101      	movs	r1, #1
 800129e:	2002      	movs	r0, #2
 80012a0:	f000 f9db 	bl	800165a <spi_write_single>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <bmx055_config+0xaa>
		return SENS_CONFERR;
 80012aa:	2305      	movs	r3, #5
 80012ac:	e00a      	b.n	80012c4 <bmx055_config+0xc0>

	/*Magneto meter z repetitions
	 *choose nZ=3 ==> REPZ=2 (see pg122 table37 and pg138 of datasheet)
	 *default	: 0b00000000
	 *set to	: 0b00000010 */
	if(spi_write_single(SPI_CS_Mag, MAG_REP_Z_LOW_POWER_PRESET_REPZ, BMX055_MAG_REP_Z) != SENS_OK ){
 80012ae:	2252      	movs	r2, #82	; 0x52
 80012b0:	2102      	movs	r1, #2
 80012b2:	2002      	movs	r0, #2
 80012b4:	f000 f9d1 	bl	800165a <spi_write_single>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <bmx055_config+0xbe>
		return SENS_CONFERR;
 80012be:	2305      	movs	r3, #5
 80012c0:	e000      	b.n	80012c4 <bmx055_config+0xc0>
	}



	return SENS_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <sensor_check_id>:
//-----------------------------PUBLIC FUNCTIONS-------------------------------//

/**
 * @brief used to check sensors are present
 */
Sensor_StatusTypeDef sensor_check_id(){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0

	uint8_t acc_id = spi_read_single(SPI_CS_Acc, BMX055_ACC_CHIP_ID);
 80012d2:	2100      	movs	r1, #0
 80012d4:	2000      	movs	r0, #0
 80012d6:	f000 f99f 	bl	8001618 <spi_read_single>
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
	if(acc_id != BMX055_ACC_ID){
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	2bfa      	cmp	r3, #250	; 0xfa
 80012e2:	d001      	beq.n	80012e8 <sensor_check_id+0x1c>
		return SENS_IDERR;
 80012e4:	2304      	movs	r3, #4
 80012e6:	e024      	b.n	8001332 <sensor_check_id+0x66>
	}

	uint8_t gyro_id = spi_read_single(SPI_CS_Gyro, BMX055_GYRO_CHIP_ID);
 80012e8:	2100      	movs	r1, #0
 80012ea:	2001      	movs	r0, #1
 80012ec:	f000 f994 	bl	8001618 <spi_read_single>
 80012f0:	4603      	mov	r3, r0
 80012f2:	71bb      	strb	r3, [r7, #6]
	if(gyro_id != BMX055_GYRO_ID){
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	2b0f      	cmp	r3, #15
 80012f8:	d001      	beq.n	80012fe <sensor_check_id+0x32>
		return SENS_IDERR;
 80012fa:	2304      	movs	r3, #4
 80012fc:	e019      	b.n	8001332 <sensor_check_id+0x66>
	}

	sensor_mag_power_control(ENABLE);
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff ff54 	bl	80011ac <sensor_mag_power_control>
	uint8_t mag_id = spi_read_single(SPI_CS_Mag, BMX055_MAG_CHIP_ID);
 8001304:	2140      	movs	r1, #64	; 0x40
 8001306:	2002      	movs	r0, #2
 8001308:	f000 f986 	bl	8001618 <spi_read_single>
 800130c:	4603      	mov	r3, r0
 800130e:	717b      	strb	r3, [r7, #5]
	if(mag_id != BMX055_MAG_ID){
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	2b32      	cmp	r3, #50	; 0x32
 8001314:	d001      	beq.n	800131a <sensor_check_id+0x4e>
		return SENS_IDERR;
 8001316:	2304      	movs	r3, #4
 8001318:	e00b      	b.n	8001332 <sensor_check_id+0x66>
	}

	uint8_t baro_id = spi_read_single(SPI_CS_Baro, BMP280_CHIP_ID);
 800131a:	21d0      	movs	r1, #208	; 0xd0
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f97b 	bl	8001618 <spi_read_single>
 8001322:	4603      	mov	r3, r0
 8001324:	713b      	strb	r3, [r7, #4]
	if(baro_id != BMP280_ID){
 8001326:	793b      	ldrb	r3, [r7, #4]
 8001328:	2b58      	cmp	r3, #88	; 0x58
 800132a:	d001      	beq.n	8001330 <sensor_check_id+0x64>
		return SENS_IDERR;
 800132c:	2304      	movs	r3, #4
 800132e:	e000      	b.n	8001332 <sensor_check_id+0x66>
	}

	return SENS_OK;
 8001330:	2300      	movs	r3, #0

}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <sensor_config>:

Sensor_StatusTypeDef sensor_config(){
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
	if(bmp280_config() != SENS_OK){
 8001340:	f7ff ff4b 	bl	80011da <bmp280_config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <sensor_config+0x14>
		return SENS_CONFERR;
 800134a:	2305      	movs	r3, #5
 800134c:	e014      	b.n	8001378 <sensor_config+0x3e>
	}

	//@TODO: decide rate and range
	Sensor_ConfigTypeDef *f;
	f->accel_range = ACC_PMU_RANGE_02;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2203      	movs	r2, #3
 8001352:	705a      	strb	r2, [r3, #1]
	f->accel_rate = ACC_PMU_BW_1000;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	220f      	movs	r2, #15
 8001358:	701a      	strb	r2, [r3, #0]
	f->gyro_rate = GYRO_ODR_2000;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2281      	movs	r2, #129	; 0x81
 800135e:	709a      	strb	r2, [r3, #2]
	f->gyro_range = GYRO_RANGE_RANGE_2000;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	70da      	strb	r2, [r3, #3]
	if(bmx055_config(f) != SENS_OK){
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ff4c 	bl	8001204 <bmx055_config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <sensor_config+0x3c>
		return SENS_CONFERR;
 8001372:	2305      	movs	r3, #5
 8001374:	e000      	b.n	8001378 <sensor_config+0x3e>
	}
	return SENS_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <cs_deselect>:
//------------------------------STATIC FUNCTIONS--------------------------------//

/**
 * @brief deselect cs pin means set high
 */
static void cs_deselect(SPI_ChipSelectTypeDef cs){
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
	switch(cs){
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b03      	cmp	r3, #3
 800138e:	d822      	bhi.n	80013d6 <cs_deselect+0x56>
 8001390:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <cs_deselect+0x18>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013a9 	.word	0x080013a9
 800139c:	080013b3 	.word	0x080013b3
 80013a0:	080013bf 	.word	0x080013bf
 80013a4:	080013cb 	.word	0x080013cb
	case SPI_CS_Acc	 : 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Acc);	break;
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	480d      	ldr	r0, [pc, #52]	; (80013e0 <cs_deselect+0x60>)
 80013ac:	f7ff fa0e 	bl	80007cc <GPIO_SetBits>
 80013b0:	e011      	b.n	80013d6 <cs_deselect+0x56>
	case SPI_CS_Gyro : 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Gyro);	break;
 80013b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b6:	480a      	ldr	r0, [pc, #40]	; (80013e0 <cs_deselect+0x60>)
 80013b8:	f7ff fa08 	bl	80007cc <GPIO_SetBits>
 80013bc:	e00b      	b.n	80013d6 <cs_deselect+0x56>
	case SPI_CS_Mag	 : 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Mag);	break;
 80013be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c2:	4807      	ldr	r0, [pc, #28]	; (80013e0 <cs_deselect+0x60>)
 80013c4:	f7ff fa02 	bl	80007cc <GPIO_SetBits>
 80013c8:	e005      	b.n	80013d6 <cs_deselect+0x56>
	case SPI_CS_Baro : 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Baro);	break;
 80013ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ce:	4804      	ldr	r0, [pc, #16]	; (80013e0 <cs_deselect+0x60>)
 80013d0:	f7ff f9fc 	bl	80007cc <GPIO_SetBits>
 80013d4:	bf00      	nop
	default 		 :	;
	}
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000

080013e4 <cs_select>:

/**
 * @brief select cs pin means set low
 */
static void cs_select(SPI_ChipSelectTypeDef cs){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	switch(cs){
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d822      	bhi.n	800143a <cs_select+0x56>
 80013f4:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <cs_select+0x18>)
 80013f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fa:	bf00      	nop
 80013fc:	0800140d 	.word	0x0800140d
 8001400:	08001417 	.word	0x08001417
 8001404:	08001423 	.word	0x08001423
 8001408:	0800142f 	.word	0x0800142f
	case SPI_CS_Acc : 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Acc);	break;
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <cs_select+0x60>)
 8001410:	f7ff f9eb 	bl	80007ea <GPIO_ResetBits>
 8001414:	e011      	b.n	800143a <cs_select+0x56>
	case SPI_CS_Gyro: 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Gyro);	break;
 8001416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800141a:	480a      	ldr	r0, [pc, #40]	; (8001444 <cs_select+0x60>)
 800141c:	f7ff f9e5 	bl	80007ea <GPIO_ResetBits>
 8001420:	e00b      	b.n	800143a <cs_select+0x56>
	case SPI_CS_Mag	: 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Mag);	break;
 8001422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <cs_select+0x60>)
 8001428:	f7ff f9df 	bl	80007ea <GPIO_ResetBits>
 800142c:	e005      	b.n	800143a <cs_select+0x56>
	case SPI_CS_Baro: 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Baro);	break;
 800142e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001432:	4804      	ldr	r0, [pc, #16]	; (8001444 <cs_select+0x60>)
 8001434:	f7ff f9d9 	bl	80007ea <GPIO_ResetBits>
 8001438:	bf00      	nop
	default			:	;
	}
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000

08001448 <stm32_spi_rw>:

static uint8_t stm32_spi_rw(uint8_t data_out){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI1, data_out);
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	b29b      	uxth	r3, r3
 8001456:	4619      	mov	r1, r3
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <stm32_spi_rw+0x38>)
 800145a:	f7ff fb78 	bl	8000b4e <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 800145e:	bf00      	nop
 8001460:	2101      	movs	r1, #1
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <stm32_spi_rw+0x38>)
 8001464:	f7ff fba2 	bl	8000bac <SPI_I2S_GetFlagStatus>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f8      	beq.n	8001460 <stm32_spi_rw+0x18>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI1);
 800146e:	4804      	ldr	r0, [pc, #16]	; (8001480 <stm32_spi_rw+0x38>)
 8001470:	f7ff fb60 	bl	8000b34 <SPI_I2S_ReceiveData>
 8001474:	4603      	mov	r3, r0
 8001476:	b2db      	uxtb	r3, r3

}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40013000 	.word	0x40013000

08001484 <spi_tx>:
static void spi_tx(uint8_t data){
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
	stm32_spi_rw(data);
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ffd9 	bl	8001448 <stm32_spi_rw>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <spi_rx>:

static uint8_t spi_rx(void){
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
	return stm32_spi_rw(0xff);
 80014a2:	20ff      	movs	r0, #255	; 0xff
 80014a4:	f7ff ffd0 	bl	8001448 <stm32_spi_rw>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <spi_initialise>:

/**
 * @brief intialise all clock and registers needed for spi. assign and initialise all gpio pins needed
 * @return void
 */
void spi_initialise(void){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0

	//enable SPI clock: APB2 for SPI1
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80014b6:	2101      	movs	r1, #1
 80014b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80014bc:	f7ff fab6 	bl	8000a2c <RCC_APB2PeriphClockCmd>
	//enable GPIO clock for SCK, MOSI, MISO
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80014c0:	2101      	movs	r1, #1
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff fa92 	bl	80009ec <RCC_AHB1PeriphClockCmd>
	//enable GPIO clock for CS pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80014c8:	2101      	movs	r1, #1
 80014ca:	2010      	movs	r0, #16
 80014cc:	f7ff fa8e 	bl	80009ec <RCC_AHB1PeriphClockCmd>

	//SPI GPIO configurations:
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure SPI Chip Select pins */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80014d0:	2301      	movs	r3, #1
 80014d2:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80014d4:	2300      	movs	r3, #0
 80014d6:	76bb      	strb	r3, [r7, #26]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80014d8:	2301      	movs	r3, #1
 80014da:	76fb      	strb	r3, [r7, #27]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80014dc:	2303      	movs	r3, #3
 80014de:	767b      	strb	r3, [r7, #25]

	/* SPI Accelerometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_CS_Acc;
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port_CS, &GPIO_InitStructure);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4848      	ldr	r0, [pc, #288]	; (800160c <spi_initialise+0x15c>)
 80014ec:	f7ff f8e0 	bl	80006b0 <GPIO_Init>

	/* SPI Gyroscope CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_CS_Gyro;
 80014f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f4:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port_CS, &GPIO_InitStructure);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4843      	ldr	r0, [pc, #268]	; (800160c <spi_initialise+0x15c>)
 80014fe:	f7ff f8d7 	bl	80006b0 <GPIO_Init>

	/* SPI Magnetometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_CS_Mag;
 8001502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001506:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port_CS, &GPIO_InitStructure);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	483f      	ldr	r0, [pc, #252]	; (800160c <spi_initialise+0x15c>)
 8001510:	f7ff f8ce 	bl	80006b0 <GPIO_Init>

	/* SPI Barometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_CS_Baro;
 8001514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001518:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port_CS, &GPIO_InitStructure);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	483a      	ldr	r0, [pc, #232]	; (800160c <spi_initialise+0x15c>)
 8001522:	f7ff f8c5 	bl	80006b0 <GPIO_Init>

	//deselect all cs pins
	cs_deselect(SPI_CS_Acc);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff ff2a 	bl	8001380 <cs_deselect>
	cs_deselect(SPI_CS_Gyro);
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff ff27 	bl	8001380 <cs_deselect>
	cs_deselect(SPI_CS_Mag);
 8001532:	2002      	movs	r0, #2
 8001534:	f7ff ff24 	bl	8001380 <cs_deselect>
	cs_deselect(SPI_CS_Baro);
 8001538:	2003      	movs	r0, #3
 800153a:	f7ff ff21 	bl	8001380 <cs_deselect>

	/* Configure SPI pins: SCK and MOSI with default alternate function push-pull output*/
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800153e:	2302      	movs	r3, #2
 8001540:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001542:	2300      	movs	r3, #0
 8001544:	76bb      	strb	r3, [r7, #26]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001546:	2302      	movs	r3, #2
 8001548:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 800154a:	2302      	movs	r3, #2
 800154c:	76fb      	strb	r3, [r7, #27]

	/* SPI SCK pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_SCK;
 800154e:	2320      	movs	r3, #32
 8001550:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port, &GPIO_InitStructure);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	482d      	ldr	r0, [pc, #180]	; (8001610 <spi_initialise+0x160>)
 800155a:	f7ff f8a9 	bl	80006b0 <GPIO_Init>

	/* SPI MOSI pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_MOSI;
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port, &GPIO_InitStructure);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4829      	ldr	r0, [pc, #164]	; (8001610 <spi_initialise+0x160>)
 800156a:	f7ff f8a1 	bl	80006b0 <GPIO_Init>

	/* Configure MISO as Input with internal pull-up */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800156e:	2302      	movs	r3, #2
 8001570:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
 8001572:	2300      	movs	r3, #0
 8001574:	76bb      	strb	r3, [r7, #26]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001576:	2301      	movs	r3, #1
 8001578:	76fb      	strb	r3, [r7, #27]

	/* SPI MISO pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_MISO;
 800157a:	2340      	movs	r3, #64	; 0x40
 800157c:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port, &GPIO_InitStructure);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4822      	ldr	r0, [pc, #136]	; (8001610 <spi_initialise+0x160>)
 8001586:	f7ff f893 	bl	80006b0 <GPIO_Init>

	/* Connect SPI pins to AF5 */
	GPIO_PinAFConfig(GPIO_SPI_Port, GPIO_SPI_Pinsource_SCK, GPIO_AF_SPI1);	// SCK
 800158a:	2205      	movs	r2, #5
 800158c:	2105      	movs	r1, #5
 800158e:	4820      	ldr	r0, [pc, #128]	; (8001610 <spi_initialise+0x160>)
 8001590:	f7ff f93a 	bl	8000808 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIO_SPI_Port, GPIO_SPI_Pinsource_MOSI, GPIO_AF_SPI1);	// MOSI
 8001594:	2205      	movs	r2, #5
 8001596:	2107      	movs	r1, #7
 8001598:	481d      	ldr	r0, [pc, #116]	; (8001610 <spi_initialise+0x160>)
 800159a:	f7ff f935 	bl	8000808 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIO_SPI_Port, GPIO_SPI_Pinsource_MISO, GPIO_AF_SPI1);	// MISO
 800159e:	2205      	movs	r2, #5
 80015a0:	2106      	movs	r1, #6
 80015a2:	481b      	ldr	r0, [pc, #108]	; (8001610 <spi_initialise+0x160>)
 80015a4:	f7ff f930 	bl	8000808 <GPIO_PinAFConfig>

	/* SPI configuration */
	SPI_InitTypeDef SPI_InitStructure;

	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80015a8:	2300      	movs	r3, #0
 80015aa:	803b      	strh	r3, [r7, #0]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80015ac:	f44f 7382 	mov.w	r3, #260	; 0x104
 80015b0:	807b      	strh	r3, [r7, #2]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80015b2:	2300      	movs	r3, #0
 80015b4:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 80015b6:	2302      	movs	r3, #2
 80015b8:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 80015ba:	2301      	movs	r3, #1
 80015bc:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80015be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c2:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_SPI; // 72000kHz/16 = 4500kHz < 10000kHz
 80015c4:	2318      	movs	r3, #24
 80015c6:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80015c8:	2300      	movs	r3, #0
 80015ca:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 80015cc:	2307      	movs	r3, #7
 80015ce:	823b      	strh	r3, [r7, #16]

	SPI_Init(SPI1, &SPI_InitStructure);
 80015d0:	463b      	mov	r3, r7
 80015d2:	4619      	mov	r1, r3
 80015d4:	480f      	ldr	r0, [pc, #60]	; (8001614 <spi_initialise+0x164>)
 80015d6:	f7ff fa49 	bl	8000a6c <SPI_Init>
	SPI_CalculateCRC(SPI1, DISABLE);
 80015da:	2100      	movs	r1, #0
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <spi_initialise+0x164>)
 80015de:	f7ff fac5 	bl	8000b6c <SPI_CalculateCRC>
	SPI_Cmd(SPI1, ENABLE);
 80015e2:	2101      	movs	r1, #1
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <spi_initialise+0x164>)
 80015e6:	f7ff fa85 	bl	8000af4 <SPI_Cmd>

	/* drain SPI */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) { ; } //wait for TX buffer to empty
 80015ea:	bf00      	nop
 80015ec:	2102      	movs	r1, #2
 80015ee:	4809      	ldr	r0, [pc, #36]	; (8001614 <spi_initialise+0x164>)
 80015f0:	f7ff fadc 	bl	8000bac <SPI_I2S_GetFlagStatus>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f8      	beq.n	80015ec <spi_initialise+0x13c>
	uint8_t dummyread = SPI_I2S_ReceiveData(SPI1);
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <spi_initialise+0x164>)
 80015fc:	f7ff fa9a 	bl	8000b34 <SPI_I2S_ReceiveData>
 8001600:	4603      	mov	r3, r0
 8001602:	77fb      	strb	r3, [r7, #31]
	if (dummyread) { ; }
}
 8001604:	bf00      	nop
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000
 8001610:	40020000 	.word	0x40020000
 8001614:	40013000 	.word	0x40013000

08001618 <spi_read_single>:
/**
 * @brief	read single byte of data from spi
 * @param 	cs: chip select
 * @param	addr: start address to read from
 */
uint8_t spi_read_single(SPI_ChipSelectTypeDef cs, uint8_t addr){
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	4613      	mov	r3, r2
 8001626:	71bb      	strb	r3, [r7, #6]
	cs_select(cs);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff feda 	bl	80013e4 <cs_select>

	uint8_t token = 0x80 | addr;	//read control byte = address but with MSB=1
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001636:	73fb      	strb	r3, [r7, #15]
	spi_tx(token);			//send control byte
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff22 	bl	8001484 <spi_tx>

	token = spi_rx(); 		// recieve data
 8001640:	f7ff ff2d 	bl	800149e <spi_rx>
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]

	cs_deselect(cs);
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fe98 	bl	8001380 <cs_deselect>
	return token;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <spi_write_single>:
 * @brief	send single byte of data to spi
 * @param 	cs: chip select
 * @param	addr: start address to read from
 * @param	data_out: //data to be written
 */
Sensor_StatusTypeDef spi_write_single(SPI_ChipSelectTypeDef cs, uint8_t data_out, uint8_t addr){
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	460b      	mov	r3, r1
 8001666:	71bb      	strb	r3, [r7, #6]
 8001668:	4613      	mov	r3, r2
 800166a:	717b      	strb	r3, [r7, #5]
	cs_select(cs);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff feb8 	bl	80013e4 <cs_select>

	uint8_t token = 0x7F & addr;	//write control byte = address but with MSB=0
 8001674:	797b      	ldrb	r3, [r7, #5]
 8001676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800167a:	73fb      	strb	r3, [r7, #15]

	spi_tx(token);
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff00 	bl	8001484 <spi_tx>
	spi_tx(data_out);
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fefc 	bl	8001484 <spi_tx>

	cs_deselect(cs);
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fe76 	bl	8001380 <cs_deselect>

	token = spi_read_single(cs, addr);
 8001694:	797a      	ldrb	r2, [r7, #5]
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ffbc 	bl	8001618 <spi_read_single>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]

	if(token!=data_out){
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <spi_write_single+0x56>
		return SENS_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <spi_write_single+0x58>
	}

	return SENS_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <reset_gnss_rx_buffer>:

/*JETSON UART*/


//------------------------STATIC FUNCTIONS-------------------//
static void reset_gnss_rx_buffer(){
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
	for(int i=0; i<GNSS_BUFFER_SIZE; i++){
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	e007      	b.n	80016d8 <reset_gnss_rx_buffer+0x1c>
		GNSS_RX_BUFFER[i] = 0;
 80016c8:	4a08      	ldr	r2, [pc, #32]	; (80016ec <reset_gnss_rx_buffer+0x30>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<GNSS_BUFFER_SIZE; i++){
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3301      	adds	r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016de:	dbf3      	blt.n	80016c8 <reset_gnss_rx_buffer+0xc>
	}
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	2000082c 	.word	0x2000082c

080016f0 <reset_gnss_log_buffer>:
static void reset_gnss_log_buffer(){
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
	for(int i=0; i<GNSS_BUFFER_SIZE; i++){
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	e007      	b.n	800170c <reset_gnss_log_buffer+0x1c>
		GNSS_LOG_BUFFER[i] = 0;
 80016fc:	4a08      	ldr	r2, [pc, #32]	; (8001720 <reset_gnss_log_buffer+0x30>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<GNSS_BUFFER_SIZE; i++){
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3301      	adds	r3, #1
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001712:	dbf3      	blt.n	80016fc <reset_gnss_log_buffer+0xc>
	}
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	2000002c 	.word	0x2000002c

08001724 <initialise_dma_gnss>:

static void initialise_dma_gnss(void){
 8001724:	b580      	push	{r7, lr}
 8001726:	b090      	sub	sp, #64	; 0x40
 8001728:	af00      	add	r7, sp, #0
	//DMA CONFIG
	DMA_InitTypeDef DMA_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	USART_DMACmd(USART_GNSS, USART_DMAReq_Rx, ENABLE);	//enable dma interface for this uart
 800172a:	2201      	movs	r2, #1
 800172c:	2140      	movs	r1, #64	; 0x40
 800172e:	484d      	ldr	r0, [pc, #308]	; (8001864 <initialise_dma_gnss+0x140>)
 8001730:	f7ff fb42 	bl	8000db8 <USART_DMACmd>
	RCC_AHB1PeriphClockCmd(RCC_AHBPeriph_GNSS_DMA,ENABLE);
 8001734:	2101      	movs	r1, #1
 8001736:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800173a:	f7ff f957 	bl	80009ec <RCC_AHB1PeriphClockCmd>

	// De-initialize DMA RX & TX Stream
	DMA_DeInit(DMA_Stream_USART_GNSS_RX);
 800173e:	484a      	ldr	r0, [pc, #296]	; (8001868 <initialise_dma_gnss+0x144>)
 8001740:	f7fe fda4 	bl	800028c <DMA_DeInit>
	while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_RX ) != DISABLE) { ; }
 8001744:	bf00      	nop
 8001746:	4848      	ldr	r0, [pc, #288]	; (8001868 <initialise_dma_gnss+0x144>)
 8001748:	f7fe fef5 	bl	8000536 <DMA_GetCmdStatus>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f9      	bne.n	8001746 <initialise_dma_gnss+0x22>
	DMA_DeInit(DMA_Stream_USART_GNSS_TX);
 8001752:	4846      	ldr	r0, [pc, #280]	; (800186c <initialise_dma_gnss+0x148>)
 8001754:	f7fe fd9a 	bl	800028c <DMA_DeInit>
	while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_TX ) != DISABLE) { ; }
 8001758:	bf00      	nop
 800175a:	4844      	ldr	r0, [pc, #272]	; (800186c <initialise_dma_gnss+0x148>)
 800175c:	f7fe feeb 	bl	8000536 <DMA_GetCmdStatus>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f9      	bne.n	800175a <initialise_dma_gnss+0x36>

	//shared DMA configuration values: Perpiheral to Memory Mode
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(USART_GNSS->DR));	//data source
 8001766:	4b42      	ldr	r3, [pc, #264]	; (8001870 <initialise_dma_gnss+0x14c>)
 8001768:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001772:	2300      	movs	r3, #0
 8001774:	63fb      	str	r3, [r7, #60]	; 0x3c

	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)GNSS_RX_BUFFER;	//data destination
 8001776:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <initialise_dma_gnss+0x150>)
 8001778:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800177e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001782:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001784:	2300      	movs	r3, #0
 8001786:	63bb      	str	r3, [r7, #56]	; 0x38

	DMA_InitStructure.DMA_Channel = DMA_Channel_USART_GNSS_RX;
 8001788:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800178c:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001796:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_BufferSize = GNSS_BUFFER_SIZE;
 800179c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017a0:	617b      	str	r3, [r7, #20]

	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80017a2:	2300      	movs	r3, #0
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 80017a6:	2303      	movs	r3, #3
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34

	DMA_Init(DMA_Stream_USART_GNSS_RX, &DMA_InitStructure);
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	4619      	mov	r1, r3
 80017ae:	482e      	ldr	r0, [pc, #184]	; (8001868 <initialise_dma_gnss+0x144>)
 80017b0:	f7fe fe40 	bl	8000434 <DMA_Init>

	// enable the interrupt in the NVIC
	NVIC_InitStructure.NVIC_IRQChannel = DMA_GNSS_RX_IRQn;
 80017b4:	233a      	movs	r3, #58	; 0x3a
 80017b6:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = GNSS_RX_DMA_Priority;
 80017b8:	230d      	movs	r3, #13
 80017ba:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = GNSS_RX_DMA_Sub_Priority;
 80017bc:	2300      	movs	r3, #0
 80017be:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 80017c4:	463b      	mov	r3, r7
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fcfe 	bl	80001c8 <NVIC_Init>
	DMA_ITConfig(DMA_Stream_USART_GNSS_RX, DMA_IT_TC, ENABLE);
 80017cc:	2201      	movs	r2, #1
 80017ce:	2110      	movs	r1, #16
 80017d0:	4825      	ldr	r0, [pc, #148]	; (8001868 <initialise_dma_gnss+0x144>)
 80017d2:	f7fe ff05 	bl	80005e0 <DMA_ITConfig>

	/* UART - MEM */
	/* shared DMA configuration values */
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)GNSS_RX_BUFFER;
 80017d6:	4b27      	ldr	r3, [pc, #156]	; (8001874 <initialise_dma_gnss+0x150>)
 80017d8:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Enable;
 80017de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e2:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80017e4:	2300      	movs	r3, #0
 80017e6:	63fb      	str	r3, [r7, #60]	; 0x3c

	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)GNSS_LOG_BUFFER;
 80017e8:	4b23      	ldr	r3, [pc, #140]	; (8001878 <initialise_dma_gnss+0x154>)
 80017ea:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80017f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017f4:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80017f6:	2300      	movs	r3, #0
 80017f8:	63bb      	str	r3, [r7, #56]	; 0x38

	DMA_InitStructure.DMA_Channel = DMA_Channel_USART_MEM;
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80017fe:	2300      	movs	r3, #0
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToMemory;
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001806:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_BufferSize = GNSS_BUFFER_SIZE;
 800180c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001810:	617b      	str	r3, [r7, #20]

	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8001816:	2303      	movs	r3, #3
 8001818:	637b      	str	r3, [r7, #52]	; 0x34

	DMA_Init(DMA_Stream_USART_MEM, &DMA_InitStructure);
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	4619      	mov	r1, r3
 800181e:	4817      	ldr	r0, [pc, #92]	; (800187c <initialise_dma_gnss+0x158>)
 8001820:	f7fe fe08 	bl	8000434 <DMA_Init>

	// enable the interrupt in the NVIC
	NVIC_InitStructure.NVIC_IRQChannel = DMA_USART_MEM_IRQn;
 8001824:	2338      	movs	r3, #56	; 0x38
 8001826:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = MEM2MEM_DMA_Priority;
 8001828:	230e      	movs	r3, #14
 800182a:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = MEM2MEM_DMA_Sub_Priority;
 800182c:	2300      	movs	r3, #0
 800182e:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001830:	2301      	movs	r3, #1
 8001832:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 8001834:	463b      	mov	r3, r7
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fcc6 	bl	80001c8 <NVIC_Init>
	DMA_ITConfig(DMA_Stream_USART_MEM, DMA_USART_MEM_IT, ENABLE);
 800183c:	2201      	movs	r2, #1
 800183e:	2110      	movs	r1, #16
 8001840:	480e      	ldr	r0, [pc, #56]	; (800187c <initialise_dma_gnss+0x158>)
 8001842:	f7fe fecd 	bl	80005e0 <DMA_ITConfig>


	DMA_Cmd(DMA_Stream_USART_GNSS_RX, ENABLE);
 8001846:	2101      	movs	r1, #1
 8001848:	4807      	ldr	r0, [pc, #28]	; (8001868 <initialise_dma_gnss+0x144>)
 800184a:	f7fe fe4b 	bl	80004e4 <DMA_Cmd>
	while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_RX ) != ENABLE) { ; }
 800184e:	bf00      	nop
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <initialise_dma_gnss+0x144>)
 8001852:	f7fe fe70 	bl	8000536 <DMA_GetCmdStatus>
 8001856:	4603      	mov	r3, r0
 8001858:	2b01      	cmp	r3, #1
 800185a:	d1f9      	bne.n	8001850 <initialise_dma_gnss+0x12c>
}
 800185c:	bf00      	nop
 800185e:	3740      	adds	r7, #64	; 0x40
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40011000 	.word	0x40011000
 8001868:	40026440 	.word	0x40026440
 800186c:	400264b8 	.word	0x400264b8
 8001870:	40011004 	.word	0x40011004
 8001874:	2000082c 	.word	0x2000082c
 8001878:	2000002c 	.word	0x2000002c
 800187c:	40026410 	.word	0x40026410

08001880 <uart_initialise>:

//-----------------------PUBLIC FUNCTIONS------------------//

void uart_initialise(){
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
	reset_gnss_rx_buffer();
 8001886:	f7ff ff19 	bl	80016bc <reset_gnss_rx_buffer>
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Enable USART clock */
	RCC_APB2PeriphClockCmd(RCC_APBPeriph_USART_GNSS, ENABLE);
 800188a:	2101      	movs	r1, #1
 800188c:	2010      	movs	r0, #16
 800188e:	f7ff f8cd 	bl	8000a2c <RCC_APB2PeriphClockCmd>
	/* Enable GPIO clock for USART pins */
	RCC_AHB1PeriphClockCmd(RCC_AHBPeriph_USART_GNSS, ENABLE);
 8001892:	2101      	movs	r1, #1
 8001894:	2002      	movs	r0, #2
 8001896:	f7ff f8a9 	bl	80009ec <RCC_AHB1PeriphClockCmd>

	/*----------USART 1 GPIO Configuration -------------------------------*/

	/* Configure USART pins: TX & RX */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800189a:	2302      	movs	r3, #2
 800189c:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800189e:	2300      	movs	r3, #0
 80018a0:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80018a6:	2303      	movs	r3, #3
 80018a8:	777b      	strb	r3, [r7, #29]

	// USART TX pin configuration
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART_GNSS_TX;	//pin 6
 80018aa:	2340      	movs	r3, #64	; 0x40
 80018ac:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIO_USART_GNSS, &GPIO_InitStructure);
 80018ae:	f107 0318 	add.w	r3, r7, #24
 80018b2:	4619      	mov	r1, r3
 80018b4:	4825      	ldr	r0, [pc, #148]	; (800194c <uart_initialise+0xcc>)
 80018b6:	f7fe fefb 	bl	80006b0 <GPIO_Init>

	// USART RX pin configuration
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART_GNSS_RX; 	//pin7
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIO_USART_GNSS, &GPIO_InitStructure);
 80018be:	f107 0318 	add.w	r3, r7, #24
 80018c2:	4619      	mov	r1, r3
 80018c4:	4821      	ldr	r0, [pc, #132]	; (800194c <uart_initialise+0xcc>)
 80018c6:	f7fe fef3 	bl	80006b0 <GPIO_Init>

	// Connect USART pins to AF
	GPIO_PinAFConfig(GPIO_USART_GNSS, GPIO_Pin_USART_GNSS_TX_Src, GPIO_AF_USART_GNSS); //
 80018ca:	2207      	movs	r2, #7
 80018cc:	2106      	movs	r1, #6
 80018ce:	481f      	ldr	r0, [pc, #124]	; (800194c <uart_initialise+0xcc>)
 80018d0:	f7fe ff9a 	bl	8000808 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIO_USART_GNSS, GPIO_Pin_USART_GNSS_RX_Src, GPIO_AF_USART_GNSS);
 80018d4:	2207      	movs	r2, #7
 80018d6:	2107      	movs	r1, #7
 80018d8:	481c      	ldr	r0, [pc, #112]	; (800194c <uart_initialise+0xcc>)
 80018da:	f7fe ff95 	bl	8000808 <GPIO_PinAFConfig>

	/* -------------USART 1 configuration-------------------- */
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80018de:	230c      	movs	r3, #12
 80018e0:	827b      	strh	r3, [r7, #18]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80018e2:	2300      	movs	r3, #0
 80018e4:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 80018ea:	2300      	movs	r3, #0
 80018ec:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_BaudRate = USART_BaudRate_USART_GNSS;
 80018ee:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80018f2:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80018f4:	2300      	movs	r3, #0
 80018f6:	82bb      	strh	r3, [r7, #20]
	USART_Init(USART_GNSS, &USART_InitStructure);
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	4619      	mov	r1, r3
 80018fe:	4814      	ldr	r0, [pc, #80]	; (8001950 <uart_initialise+0xd0>)
 8001900:	f7ff f970 	bl	8000be4 <USART_Init>

	//------------- USART 1 RXNE interrupt configuration ----------------//
	NVIC_InitStructure.NVIC_IRQChannel = USART_GNSS_IRQn;
 8001904:	2325      	movs	r3, #37	; 0x25
 8001906:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = USART_RXNE_Priority; //USART_IDLE_Priority;
 8001908:	2301      	movs	r3, #1
 800190a:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = USART_RXNE_Sub_Priority; //USART_IDLE_Sub_Priority;
 800190c:	2300      	movs	r3, #0
 800190e:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001910:	2301      	movs	r3, #1
 8001912:	71fb      	strb	r3, [r7, #7]
	//NVIC_Init(&NVIC_InitStructure);
	//USART_ITConfig(USART_GNSS, USART_IT_RXNE, ENABLE);

	//------------- USART 1 IDLE interrupt configuration ----------------//
	NVIC_InitStructure.NVIC_IRQChannel = USART_GNSS_IRQn;
 8001914:	2325      	movs	r3, #37	; 0x25
 8001916:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = USART_IDLE_Priority; //USART_IDLE_Priority;
 8001918:	2309      	movs	r3, #9
 800191a:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = USART_IDLE_Sub_Priority; //USART_IDLE_Sub_Priority;
 800191c:	2300      	movs	r3, #0
 800191e:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001920:	2301      	movs	r3, #1
 8001922:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fc4e 	bl	80001c8 <NVIC_Init>
	USART_ITConfig(USART_GNSS, USART_IT_IDLE, ENABLE);
 800192c:	2201      	movs	r2, #1
 800192e:	f240 4124 	movw	r1, #1060	; 0x424
 8001932:	4807      	ldr	r0, [pc, #28]	; (8001950 <uart_initialise+0xd0>)
 8001934:	f7ff fa64 	bl	8000e00 <USART_ITConfig>

	//Enable UART 1
	USART_Cmd(USART_GNSS, ENABLE);
 8001938:	2101      	movs	r1, #1
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <uart_initialise+0xd0>)
 800193c:	f7ff fa0c 	bl	8000d58 <USART_Cmd>


	initialise_dma_gnss();
 8001940:	f7ff fef0 	bl	8001724 <initialise_dma_gnss>



}
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40020400 	.word	0x40020400
 8001950:	40011000 	.word	0x40011000

08001954 <DMA2_Stream2_IRQHandler>:


//---------------------------------------INTERRUPT HANDLERS-----------------------------------///

//DMA UART TO MEM INTERRUPTS
void DMA_GNSS_RX_IRQHandler(void){
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	//if(DMA_GetITStatus(DMA_Stream_USART_GNSS_RX, DMA_Stream_GNSS_IT)){
	if(DMA_GetFlagStatus(DMA_Stream_USART_GNSS_RX, DMA_FLAG_GNSS_RX_TC)){
 8001958:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 800195c:	4810      	ldr	r0, [pc, #64]	; (80019a0 <DMA2_Stream2_IRQHandler+0x4c>)
 800195e:	f7fe fe03 	bl	8000568 <DMA_GetFlagStatus>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d019      	beq.n	800199c <DMA2_Stream2_IRQHandler+0x48>
		/* Clear DMA Stream Transfer Complete interrupt pending bit */
		DMA_ClearITPendingBit(DMA_Stream_USART_GNSS_RX, DMA_Stream_GNSS_IT);
 8001968:	490e      	ldr	r1, [pc, #56]	; (80019a4 <DMA2_Stream2_IRQHandler+0x50>)
 800196a:	480d      	ldr	r0, [pc, #52]	; (80019a0 <DMA2_Stream2_IRQHandler+0x4c>)
 800196c:	f7fe fe72 	bl	8000654 <DMA_ClearITPendingBit>

		GNSS_DATA_LENGTH = GNSS_BUFFER_SIZE - DMA_GetCurrDataCounter(DMA_Stream_USART_GNSS_RX);
 8001970:	480b      	ldr	r0, [pc, #44]	; (80019a0 <DMA2_Stream2_IRQHandler+0x4c>)
 8001972:	f7fe fdd3 	bl	800051c <DMA_GetCurrDataCounter>
 8001976:	4603      	mov	r3, r0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	425b      	negs	r3, r3
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <DMA2_Stream2_IRQHandler+0x54>)
 8001980:	701a      	strb	r2, [r3, #0]
		reset_gnss_log_buffer(); //clear buffer to be written to
 8001982:	f7ff feb5 	bl	80016f0 <reset_gnss_log_buffer>

		//DMA_SetCurrDataCounter(DMA_Stream_USART_MEM, GNSS_DATA_LENGTH); //set how many bytes to transfer
		/* Enable DMA transfer mem to mem*/
		DMA_Cmd(DMA_Stream_USART_MEM, ENABLE);
 8001986:	2101      	movs	r1, #1
 8001988:	4808      	ldr	r0, [pc, #32]	; (80019ac <DMA2_Stream2_IRQHandler+0x58>)
 800198a:	f7fe fdab 	bl	80004e4 <DMA_Cmd>
		while (DMA_GetCmdStatus(DMA_Stream_USART_MEM) != ENABLE) { ; }
 800198e:	bf00      	nop
 8001990:	4806      	ldr	r0, [pc, #24]	; (80019ac <DMA2_Stream2_IRQHandler+0x58>)
 8001992:	f7fe fdd0 	bl	8000536 <DMA_GetCmdStatus>
 8001996:	4603      	mov	r3, r0
 8001998:	2b01      	cmp	r3, #1
 800199a:	d1f9      	bne.n	8001990 <DMA2_Stream2_IRQHandler+0x3c>

	}

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40026440 	.word	0x40026440
 80019a4:	10208000 	.word	0x10208000
 80019a8:	2000102c 	.word	0x2000102c
 80019ac:	40026410 	.word	0x40026410

080019b0 <DMA2_Stream0_IRQHandler>:

//DMA MEM OT MEM INTERRUPTS
void DMA_USART_MEM_IRQHandler (void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	/* Test on DMA Stream Transfer Complete interrupt */
	if (DMA_GetFlagStatus(DMA_Stream_USART_MEM, DMA_FLAG_USART_MEM_TC) != RESET){
 80019b4:	490b      	ldr	r1, [pc, #44]	; (80019e4 <DMA2_Stream0_IRQHandler+0x34>)
 80019b6:	480c      	ldr	r0, [pc, #48]	; (80019e8 <DMA2_Stream0_IRQHandler+0x38>)
 80019b8:	f7fe fdd6 	bl	8000568 <DMA_GetFlagStatus>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00e      	beq.n	80019e0 <DMA2_Stream0_IRQHandler+0x30>
		/* Clear DMA Stream Transfer Complete interrupt pending bit */
		DMA_ClearITPendingBit(DMA_Stream_USART_MEM, DMA_Stream_USART_MEM_IT);
 80019c2:	490a      	ldr	r1, [pc, #40]	; (80019ec <DMA2_Stream0_IRQHandler+0x3c>)
 80019c4:	4808      	ldr	r0, [pc, #32]	; (80019e8 <DMA2_Stream0_IRQHandler+0x38>)
 80019c6:	f7fe fe45 	bl	8000654 <DMA_ClearITPendingBit>

		/* Enable DMA transfer from uart rx*/
		DMA_Cmd(DMA_Stream_USART_GNSS_RX, ENABLE);
 80019ca:	2101      	movs	r1, #1
 80019cc:	4808      	ldr	r0, [pc, #32]	; (80019f0 <DMA2_Stream0_IRQHandler+0x40>)
 80019ce:	f7fe fd89 	bl	80004e4 <DMA_Cmd>
		while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_RX ) != ENABLE) { ; }
 80019d2:	bf00      	nop
 80019d4:	4806      	ldr	r0, [pc, #24]	; (80019f0 <DMA2_Stream0_IRQHandler+0x40>)
 80019d6:	f7fe fdae 	bl	8000536 <DMA_GetCmdStatus>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d1f9      	bne.n	80019d4 <DMA2_Stream0_IRQHandler+0x24>
	}
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	10000020 	.word	0x10000020
 80019e8:	40026410 	.word	0x40026410
 80019ec:	10008020 	.word	0x10008020
 80019f0:	40026440 	.word	0x40026440

080019f4 <USART1_IRQHandler>:

//UART INTERRUPTS
void USART_GNSS_IRQHandler(){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
		index++;
		//USART_ClearITPendingBit(USART_GNSS, USART_IT_RXNE);
		//USART_ClearFlag(USART_GNSS, USART_FLAG_RXNE);
		return;
	}*/
	if(USART_GetITStatus(USART_GNSS, USART_IT_IDLE)){
 80019fa:	f240 4124 	movw	r1, #1060	; 0x424
 80019fe:	4811      	ldr	r0, [pc, #68]	; (8001a44 <USART1_IRQHandler+0x50>)
 8001a00:	f7ff fa46 	bl	8000e90 <USART_GetITStatus>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d017      	beq.n	8001a3a <USART1_IRQHandler+0x46>
		/* Clear USART registers */
		volatile uint32_t tmp;
		//USART_ClearITPendingBit(USART_GNSS, USART_IT_IDLE);
		tmp = USART_GetITStatus(USART_GNSS, USART_IT_IDLE);
 8001a0a:	f240 4124 	movw	r1, #1060	; 0x424
 8001a0e:	480d      	ldr	r0, [pc, #52]	; (8001a44 <USART1_IRQHandler+0x50>)
 8001a10:	f7ff fa3e 	bl	8000e90 <USART_GetITStatus>
 8001a14:	4603      	mov	r3, r0
 8001a16:	607b      	str	r3, [r7, #4]
		tmp = USART_ReceiveData(USART_GNSS);
 8001a18:	480a      	ldr	r0, [pc, #40]	; (8001a44 <USART1_IRQHandler+0x50>)
 8001a1a:	f7ff f9bd 	bl	8000d98 <USART_ReceiveData>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	607b      	str	r3, [r7, #4]
		(void)tmp;
 8001a22:	687b      	ldr	r3, [r7, #4]

		/* Disable DMA RX Stream */
		DMA_Cmd(DMA_Stream_USART_GNSS_RX, DISABLE);
 8001a24:	2100      	movs	r1, #0
 8001a26:	4808      	ldr	r0, [pc, #32]	; (8001a48 <USART1_IRQHandler+0x54>)
 8001a28:	f7fe fd5c 	bl	80004e4 <DMA_Cmd>
		while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_RX ) != DISABLE) { ; }
 8001a2c:	bf00      	nop
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <USART1_IRQHandler+0x54>)
 8001a30:	f7fe fd81 	bl	8000536 <DMA_GetCmdStatus>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f9      	bne.n	8001a2e <USART1_IRQHandler+0x3a>


		//return;
	}

}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40011000 	.word	0x40011000
 8001a48:	40026440 	.word	0x40026440

08001a4c <__libc_init_array>:
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	4e0d      	ldr	r6, [pc, #52]	; (8001a84 <__libc_init_array+0x38>)
 8001a50:	4c0d      	ldr	r4, [pc, #52]	; (8001a88 <__libc_init_array+0x3c>)
 8001a52:	1ba4      	subs	r4, r4, r6
 8001a54:	10a4      	asrs	r4, r4, #2
 8001a56:	2500      	movs	r5, #0
 8001a58:	42a5      	cmp	r5, r4
 8001a5a:	d109      	bne.n	8001a70 <__libc_init_array+0x24>
 8001a5c:	4e0b      	ldr	r6, [pc, #44]	; (8001a8c <__libc_init_array+0x40>)
 8001a5e:	4c0c      	ldr	r4, [pc, #48]	; (8001a90 <__libc_init_array+0x44>)
 8001a60:	f000 f818 	bl	8001a94 <_init>
 8001a64:	1ba4      	subs	r4, r4, r6
 8001a66:	10a4      	asrs	r4, r4, #2
 8001a68:	2500      	movs	r5, #0
 8001a6a:	42a5      	cmp	r5, r4
 8001a6c:	d105      	bne.n	8001a7a <__libc_init_array+0x2e>
 8001a6e:	bd70      	pop	{r4, r5, r6, pc}
 8001a70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a74:	4798      	blx	r3
 8001a76:	3501      	adds	r5, #1
 8001a78:	e7ee      	b.n	8001a58 <__libc_init_array+0xc>
 8001a7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a7e:	4798      	blx	r3
 8001a80:	3501      	adds	r5, #1
 8001a82:	e7f2      	b.n	8001a6a <__libc_init_array+0x1e>
 8001a84:	08001aac 	.word	0x08001aac
 8001a88:	08001aac 	.word	0x08001aac
 8001a8c:	08001aac 	.word	0x08001aac
 8001a90:	08001ab0 	.word	0x08001ab0

08001a94 <_init>:
 8001a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a96:	bf00      	nop
 8001a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a9a:	bc08      	pop	{r3}
 8001a9c:	469e      	mov	lr, r3
 8001a9e:	4770      	bx	lr

08001aa0 <_fini>:
 8001aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa2:	bf00      	nop
 8001aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aa6:	bc08      	pop	{r3}
 8001aa8:	469e      	mov	lr, r3
 8001aaa:	4770      	bx	lr
