
DIMA_SensorBoard_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001ec8  08001ec8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001ec8  08001ec8  00011ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ecc  08001ecc  00011ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08001ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00000140  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000150  20000150  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006078  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001423  00000000  00000000  000260b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000710  00000000  00000000  000274e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000638  00000000  00000000  00027bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002a0e  00000000  00000000  00028228  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000026b7  00000000  00000000  0002ac36  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002d2ed  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001c30  00000000  00000000  0002d36c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002ef9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001eb0 	.word	0x08001eb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001eb0 	.word	0x08001eb0

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f023 0201 	bic.w	r2, r3, #1
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2200      	movs	r2, #0
 80002aa:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2200      	movs	r2, #0
 80002b0:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2200      	movs	r2, #0
 80002b6:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2200      	movs	r2, #0
 80002bc:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2221      	movs	r2, #33	; 0x21
 80002c2:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a46      	ldr	r2, [pc, #280]	; (80003e0 <DMA_DeInit+0x154>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d103      	bne.n	80002d4 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80002cc:	4b45      	ldr	r3, [pc, #276]	; (80003e4 <DMA_DeInit+0x158>)
 80002ce:	223d      	movs	r2, #61	; 0x3d
 80002d0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80002d2:	e07e      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a44      	ldr	r2, [pc, #272]	; (80003e8 <DMA_DeInit+0x15c>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d104      	bne.n	80002e6 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80002dc:	4b41      	ldr	r3, [pc, #260]	; (80003e4 <DMA_DeInit+0x158>)
 80002de:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80002e2:	609a      	str	r2, [r3, #8]
}
 80002e4:	e075      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a40      	ldr	r2, [pc, #256]	; (80003ec <DMA_DeInit+0x160>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d104      	bne.n	80002f8 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80002ee:	4b3d      	ldr	r3, [pc, #244]	; (80003e4 <DMA_DeInit+0x158>)
 80002f0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80002f4:	609a      	str	r2, [r3, #8]
}
 80002f6:	e06c      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a3d      	ldr	r2, [pc, #244]	; (80003f0 <DMA_DeInit+0x164>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d104      	bne.n	800030a <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000300:	4b38      	ldr	r3, [pc, #224]	; (80003e4 <DMA_DeInit+0x158>)
 8000302:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000306:	609a      	str	r2, [r3, #8]
}
 8000308:	e063      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a39      	ldr	r2, [pc, #228]	; (80003f4 <DMA_DeInit+0x168>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d103      	bne.n	800031a <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000312:	4b34      	ldr	r3, [pc, #208]	; (80003e4 <DMA_DeInit+0x158>)
 8000314:	4a38      	ldr	r2, [pc, #224]	; (80003f8 <DMA_DeInit+0x16c>)
 8000316:	60da      	str	r2, [r3, #12]
}
 8000318:	e05b      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a37      	ldr	r2, [pc, #220]	; (80003fc <DMA_DeInit+0x170>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d103      	bne.n	800032a <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000322:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <DMA_DeInit+0x158>)
 8000324:	4a36      	ldr	r2, [pc, #216]	; (8000400 <DMA_DeInit+0x174>)
 8000326:	60da      	str	r2, [r3, #12]
}
 8000328:	e053      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a35      	ldr	r2, [pc, #212]	; (8000404 <DMA_DeInit+0x178>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d103      	bne.n	800033a <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000332:	4b2c      	ldr	r3, [pc, #176]	; (80003e4 <DMA_DeInit+0x158>)
 8000334:	4a34      	ldr	r2, [pc, #208]	; (8000408 <DMA_DeInit+0x17c>)
 8000336:	60da      	str	r2, [r3, #12]
}
 8000338:	e04b      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a33      	ldr	r2, [pc, #204]	; (800040c <DMA_DeInit+0x180>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d104      	bne.n	800034c <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000342:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <DMA_DeInit+0x158>)
 8000344:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000348:	60da      	str	r2, [r3, #12]
}
 800034a:	e042      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a30      	ldr	r2, [pc, #192]	; (8000410 <DMA_DeInit+0x184>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d103      	bne.n	800035c <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000354:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <DMA_DeInit+0x188>)
 8000356:	223d      	movs	r2, #61	; 0x3d
 8000358:	609a      	str	r2, [r3, #8]
}
 800035a:	e03a      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a2e      	ldr	r2, [pc, #184]	; (8000418 <DMA_DeInit+0x18c>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d104      	bne.n	800036e <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000364:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <DMA_DeInit+0x188>)
 8000366:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800036a:	609a      	str	r2, [r3, #8]
}
 800036c:	e031      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a2a      	ldr	r2, [pc, #168]	; (800041c <DMA_DeInit+0x190>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d104      	bne.n	8000380 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000376:	4b27      	ldr	r3, [pc, #156]	; (8000414 <DMA_DeInit+0x188>)
 8000378:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800037c:	609a      	str	r2, [r3, #8]
}
 800037e:	e028      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a27      	ldr	r2, [pc, #156]	; (8000420 <DMA_DeInit+0x194>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d104      	bne.n	8000392 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000388:	4b22      	ldr	r3, [pc, #136]	; (8000414 <DMA_DeInit+0x188>)
 800038a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800038e:	609a      	str	r2, [r3, #8]
}
 8000390:	e01f      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a23      	ldr	r2, [pc, #140]	; (8000424 <DMA_DeInit+0x198>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d103      	bne.n	80003a2 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800039a:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <DMA_DeInit+0x188>)
 800039c:	4a16      	ldr	r2, [pc, #88]	; (80003f8 <DMA_DeInit+0x16c>)
 800039e:	60da      	str	r2, [r3, #12]
}
 80003a0:	e017      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a20      	ldr	r2, [pc, #128]	; (8000428 <DMA_DeInit+0x19c>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d103      	bne.n	80003b2 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <DMA_DeInit+0x188>)
 80003ac:	4a14      	ldr	r2, [pc, #80]	; (8000400 <DMA_DeInit+0x174>)
 80003ae:	60da      	str	r2, [r3, #12]
}
 80003b0:	e00f      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a1d      	ldr	r2, [pc, #116]	; (800042c <DMA_DeInit+0x1a0>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d103      	bne.n	80003c2 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80003ba:	4b16      	ldr	r3, [pc, #88]	; (8000414 <DMA_DeInit+0x188>)
 80003bc:	4a12      	ldr	r2, [pc, #72]	; (8000408 <DMA_DeInit+0x17c>)
 80003be:	60da      	str	r2, [r3, #12]
}
 80003c0:	e007      	b.n	80003d2 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a1a      	ldr	r2, [pc, #104]	; (8000430 <DMA_DeInit+0x1a4>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d103      	bne.n	80003d2 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <DMA_DeInit+0x188>)
 80003cc:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80003d0:	60da      	str	r2, [r3, #12]
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40026010 	.word	0x40026010
 80003e4:	40026000 	.word	0x40026000
 80003e8:	40026028 	.word	0x40026028
 80003ec:	40026040 	.word	0x40026040
 80003f0:	40026058 	.word	0x40026058
 80003f4:	40026070 	.word	0x40026070
 80003f8:	2000003d 	.word	0x2000003d
 80003fc:	40026088 	.word	0x40026088
 8000400:	20000f40 	.word	0x20000f40
 8000404:	400260a0 	.word	0x400260a0
 8000408:	203d0000 	.word	0x203d0000
 800040c:	400260b8 	.word	0x400260b8
 8000410:	40026410 	.word	0x40026410
 8000414:	40026400 	.word	0x40026400
 8000418:	40026428 	.word	0x40026428
 800041c:	40026440 	.word	0x40026440
 8000420:	40026458 	.word	0x40026458
 8000424:	40026470 	.word	0x40026470
 8000428:	40026488 	.word	0x40026488
 800042c:	400264a0 	.word	0x400264a0
 8000430:	400264b8 	.word	0x400264b8

08000434 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <DMA_Init+0xac>)
 800044c:	4013      	ands	r3, r2
 800044e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800045e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800046a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	6a1b      	ldr	r3, [r3, #32]
 8000470:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000476:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800047c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000482:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000488:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	4313      	orrs	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f023 0307 	bic.w	r3, r3, #7
 80004a2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4313      	orrs	r3, r2
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	68fa      	ldr	r2, [r7, #12]
 80004b8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	691a      	ldr	r2, [r3, #16]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	685a      	ldr	r2, [r3, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	689a      	ldr	r2, [r3, #8]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	60da      	str	r2, [r3, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	f01c803f 	.word	0xf01c803f

080004e4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d006      	beq.n	8000504 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f043 0201 	orr.w	r2, r3, #1
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000502:	e005      	b.n	8000510 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f023 0201 	bic.w	r2, r3, #1
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	601a      	str	r2, [r3, #0]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8000528:	887a      	ldrh	r2, [r7, #2]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	605a      	str	r2, [r3, #4]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	b29b      	uxth	r3, r3
}
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800055c:	2300      	movs	r3, #0
 800055e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	2b00      	cmp	r3, #0
 800056a:	d002      	beq.n	8000572 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800056c:	2301      	movs	r3, #1
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	e001      	b.n	8000576 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000572:	2300      	movs	r3, #0
 8000574:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000576:	7bfb      	ldrb	r3, [r7, #15]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000584:	b480      	push	{r7}
 8000586:	b087      	sub	sp, #28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800058e:	2300      	movs	r3, #0
 8000590:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <DMA_GetFlagStatus+0x6c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d802      	bhi.n	80005a4 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <DMA_GetFlagStatus+0x70>)
 80005a0:	613b      	str	r3, [r7, #16]
 80005a2:	e001      	b.n	80005a8 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <DMA_GetFlagStatus+0x74>)
 80005a6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d003      	beq.n	80005ba <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	e002      	b.n	80005c0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80005c6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80005ca:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	4013      	ands	r3, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80005d6:	2301      	movs	r3, #1
 80005d8:	75fb      	strb	r3, [r7, #23]
 80005da:	e001      	b.n	80005e0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80005dc:	2300      	movs	r3, #0
 80005de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80005e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	371c      	adds	r7, #28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	4002640f 	.word	0x4002640f
 80005f4:	40026000 	.word	0x40026000
 80005f8:	40026400 	.word	0x40026400

080005fc <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a10      	ldr	r2, [pc, #64]	; (800064c <DMA_ClearFlag+0x50>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d802      	bhi.n	8000614 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <DMA_ClearFlag+0x54>)
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	e001      	b.n	8000618 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <DMA_ClearFlag+0x58>)
 8000616:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d007      	beq.n	8000632 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000628:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000630:	e006      	b.n	8000640 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000638:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	6093      	str	r3, [r2, #8]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	4002640f 	.word	0x4002640f
 8000650:	40026000 	.word	0x40026000
 8000654:	40026400 	.word	0x40026400

08000658 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	4613      	mov	r3, r2
 8000664:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00f      	beq.n	8000690 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d006      	beq.n	8000684 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	615a      	str	r2, [r3, #20]
 8000682:	e005      	b.n	8000690 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	2b80      	cmp	r3, #128	; 0x80
 8000694:	d014      	beq.n	80006c0 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d008      	beq.n	80006ae <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	f003 031e 	and.w	r3, r3, #30
 80006a6:	431a      	orrs	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80006ac:	e008      	b.n	80006c0 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	f003 031e 	and.w	r3, r3, #30
 80006b8:	43db      	mvns	r3, r3
 80006ba:	401a      	ands	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	601a      	str	r2, [r3, #0]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80006d6:	2300      	movs	r3, #0
 80006d8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a22      	ldr	r2, [pc, #136]	; (8000770 <DMA_GetITStatus+0xa4>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d802      	bhi.n	80006f0 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80006ea:	4b22      	ldr	r3, [pc, #136]	; (8000774 <DMA_GetITStatus+0xa8>)
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	e001      	b.n	80006f4 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80006f0:	4b21      	ldr	r3, [pc, #132]	; (8000778 <DMA_GetITStatus+0xac>)
 80006f2:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80006fa:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00a      	beq.n	8000718 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	0adb      	lsrs	r3, r3, #11
 8000706:	f003 031e 	and.w	r3, r3, #30
 800070a:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4013      	ands	r3, r2
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	e004      	b.n	8000722 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000720:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000728:	2b00      	cmp	r3, #0
 800072a:	d003      	beq.n	8000734 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	e002      	b.n	800073a <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000740:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000744:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	4013      	ands	r3, r2
 800074c:	2b00      	cmp	r3, #0
 800074e:	d005      	beq.n	800075c <DMA_GetITStatus+0x90>
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d002      	beq.n	800075c <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8000756:	2301      	movs	r3, #1
 8000758:	75fb      	strb	r3, [r7, #23]
 800075a:	e001      	b.n	8000760 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8000760:	7dfb      	ldrb	r3, [r7, #23]
}
 8000762:	4618      	mov	r0, r3
 8000764:	371c      	adds	r7, #28
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	4002640f 	.word	0x4002640f
 8000774:	40026000 	.word	0x40026000
 8000778:	40026400 	.word	0x40026400

0800077c <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a10      	ldr	r2, [pc, #64]	; (80007cc <DMA_ClearITPendingBit+0x50>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d802      	bhi.n	8000794 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <DMA_ClearITPendingBit+0x54>)
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	e001      	b.n	8000798 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <DMA_ClearITPendingBit+0x58>)
 8000796:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d007      	beq.n	80007b2 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80007a8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 80007b0:	e006      	b.n	80007c0 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80007b8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	6093      	str	r3, [r2, #8]
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	4002640f 	.word	0x4002640f
 80007d0:	40026000 	.word	0x40026000
 80007d4:	40026400 	.word	0x40026400

080007d8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007d8:	b480      	push	{r7}
 80007da:	b087      	sub	sp, #28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	e076      	b.n	80008e2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80007f4:	2201      	movs	r2, #1
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	fa02 f303 	lsl.w	r3, r2, r3
 80007fc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	429a      	cmp	r2, r3
 800080e:	d165      	bne.n	80008dc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	2103      	movs	r1, #3
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	401a      	ands	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	791b      	ldrb	r3, [r3, #4]
 800082e:	4619      	mov	r1, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	fa01 f303 	lsl.w	r3, r1, r3
 8000838:	431a      	orrs	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d003      	beq.n	800084e <GPIO_Init+0x76>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	791b      	ldrb	r3, [r3, #4]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d12e      	bne.n	80008ac <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	689a      	ldr	r2, [r3, #8]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	2103      	movs	r1, #3
 8000858:	fa01 f303 	lsl.w	r3, r1, r3
 800085c:	43db      	mvns	r3, r3
 800085e:	401a      	ands	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689a      	ldr	r2, [r3, #8]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	795b      	ldrb	r3, [r3, #5]
 800086c:	4619      	mov	r1, r3
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	431a      	orrs	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	b29b      	uxth	r3, r3
 8000884:	4619      	mov	r1, r3
 8000886:	2301      	movs	r3, #1
 8000888:	408b      	lsls	r3, r1
 800088a:	43db      	mvns	r3, r3
 800088c:	401a      	ands	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	7992      	ldrb	r2, [r2, #6]
 800089a:	4611      	mov	r1, r2
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	b292      	uxth	r2, r2
 80008a0:	fa01 f202 	lsl.w	r2, r1, r2
 80008a4:	b292      	uxth	r2, r2
 80008a6:	431a      	orrs	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	68da      	ldr	r2, [r3, #12]
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	2103      	movs	r1, #3
 80008b8:	fa01 f303 	lsl.w	r3, r1, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	401a      	ands	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	68da      	ldr	r2, [r3, #12]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	79db      	ldrb	r3, [r3, #7]
 80008cc:	4619      	mov	r1, r3
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	431a      	orrs	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	3301      	adds	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d985      	bls.n	80007f4 <GPIO_Init+0x1c>
    }
  }
}
 80008e8:	bf00      	nop
 80008ea:	371c      	adds	r7, #28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	887a      	ldrh	r2, [r7, #2]
 8000904:	831a      	strh	r2, [r3, #24]
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000912:	b480      	push	{r7}
 8000914:	b083      	sub	sp, #12
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	460b      	mov	r3, r1
 800091c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	887a      	ldrh	r2, [r7, #2]
 8000922:	835a      	strh	r2, [r3, #26]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	807b      	strh	r3, [r7, #2]
 800093c:	4613      	mov	r3, r2
 800093e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000948:	787a      	ldrb	r2, [r7, #1]
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	f003 0307 	and.w	r3, r3, #7
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000958:	887b      	ldrh	r3, [r7, #2]
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	b29b      	uxth	r3, r3
 800095e:	4618      	mov	r0, r3
 8000960:	887b      	ldrh	r3, [r7, #2]
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	b29b      	uxth	r3, r3
 8000966:	461a      	mov	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3208      	adds	r2, #8
 800096c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000970:	887b      	ldrh	r3, [r7, #2]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	210f      	movs	r1, #15
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	ea02 0103 	and.w	r1, r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f100 0208 	add.w	r2, r0, #8
 800098a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800098e:	887b      	ldrh	r3, [r7, #2]
 8000990:	08db      	lsrs	r3, r3, #3
 8000992:	b29b      	uxth	r3, r3
 8000994:	461a      	mov	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3208      	adds	r2, #8
 800099a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80009a4:	887b      	ldrh	r3, [r7, #2]
 80009a6:	08db      	lsrs	r3, r3, #3
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	461a      	mov	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3208      	adds	r2, #8
 80009b0:	68b9      	ldr	r1, [r7, #8]
 80009b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80009b6:	bf00      	nop
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
 80009d8:	2302      	movs	r3, #2
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	2302      	movs	r3, #2
 80009e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80009e4:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <RCC_GetClocksFreq+0x140>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f003 030c 	and.w	r3, r3, #12
 80009ec:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d007      	beq.n	8000a04 <RCC_GetClocksFreq+0x40>
 80009f4:	2b08      	cmp	r3, #8
 80009f6:	d009      	beq.n	8000a0c <RCC_GetClocksFreq+0x48>
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d13d      	bne.n	8000a78 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a42      	ldr	r2, [pc, #264]	; (8000b08 <RCC_GetClocksFreq+0x144>)
 8000a00:	601a      	str	r2, [r3, #0]
      break;
 8000a02:	e03d      	b.n	8000a80 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a41      	ldr	r2, [pc, #260]	; (8000b0c <RCC_GetClocksFreq+0x148>)
 8000a08:	601a      	str	r2, [r3, #0]
      break;
 8000a0a:	e039      	b.n	8000a80 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a0c:	4b3d      	ldr	r3, [pc, #244]	; (8000b04 <RCC_GetClocksFreq+0x140>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	0d9b      	lsrs	r3, r3, #22
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a18:	4b3a      	ldr	r3, [pc, #232]	; (8000b04 <RCC_GetClocksFreq+0x140>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a20:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d00c      	beq.n	8000a42 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a28:	4a38      	ldr	r2, [pc, #224]	; (8000b0c <RCC_GetClocksFreq+0x148>)
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a30:	4a34      	ldr	r2, [pc, #208]	; (8000b04 <RCC_GetClocksFreq+0x140>)
 8000a32:	6852      	ldr	r2, [r2, #4]
 8000a34:	0992      	lsrs	r2, r2, #6
 8000a36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a3a:	fb02 f303 	mul.w	r3, r2, r3
 8000a3e:	61fb      	str	r3, [r7, #28]
 8000a40:	e00b      	b.n	8000a5a <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000a42:	4a31      	ldr	r2, [pc, #196]	; (8000b08 <RCC_GetClocksFreq+0x144>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4a:	4a2e      	ldr	r2, [pc, #184]	; (8000b04 <RCC_GetClocksFreq+0x140>)
 8000a4c:	6852      	ldr	r2, [r2, #4]
 8000a4e:	0992      	lsrs	r2, r2, #6
 8000a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a54:	fb02 f303 	mul.w	r3, r2, r3
 8000a58:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a5a:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <RCC_GetClocksFreq+0x140>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	0c1b      	lsrs	r3, r3, #16
 8000a60:	f003 0303 	and.w	r3, r3, #3
 8000a64:	3301      	adds	r3, #1
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	601a      	str	r2, [r3, #0]
      break;
 8000a76:	e003      	b.n	8000a80 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <RCC_GetClocksFreq+0x144>)
 8000a7c:	601a      	str	r2, [r3, #0]
      break;
 8000a7e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <RCC_GetClocksFreq+0x140>)
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a88:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	091b      	lsrs	r3, r3, #4
 8000a8e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a90:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <RCC_GetClocksFreq+0x14c>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4413      	add	r3, r2
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	40da      	lsrs	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <RCC_GetClocksFreq+0x140>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000ab0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	0a9b      	lsrs	r3, r3, #10
 8000ab6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000ab8:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <RCC_GetClocksFreq+0x14c>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	4413      	add	r3, r2
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	40da      	lsrs	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <RCC_GetClocksFreq+0x140>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000ad8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	0b5b      	lsrs	r3, r3, #13
 8000ade:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000ae0:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <RCC_GetClocksFreq+0x14c>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685a      	ldr	r2, [r3, #4]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	40da      	lsrs	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	60da      	str	r2, [r3, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3724      	adds	r7, #36	; 0x24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	40023800 	.word	0x40023800
 8000b08:	00f42400 	.word	0x00f42400
 8000b0c:	007a1200 	.word	0x007a1200
 8000b10:	20000000 	.word	0x20000000

08000b14 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d006      	beq.n	8000b34 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000b26:	490a      	ldr	r1, [pc, #40]	; (8000b50 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000b32:	e006      	b.n	8000b42 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000b34:	4906      	ldr	r1, [pc, #24]	; (8000b50 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	4013      	ands	r3, r2
 8000b40:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b60:	78fb      	ldrb	r3, [r7, #3]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d006      	beq.n	8000b74 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b66:	490a      	ldr	r1, [pc, #40]	; (8000b90 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000b72:	e006      	b.n	8000b82 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000b74:	4906      	ldr	r1, [pc, #24]	; (8000b90 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	4013      	ands	r3, r2
 8000b80:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d006      	beq.n	8000bb4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ba6:	490a      	ldr	r1, [pc, #40]	; (8000bd0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000bb2:	e006      	b.n	8000bc2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000bb4:	4906      	ldr	r1, [pc, #24]	; (8000bd0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000be8:	89fb      	ldrh	r3, [r7, #14]
 8000bea:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000bee:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	881a      	ldrh	r2, [r3, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	885b      	ldrh	r3, [r3, #2]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c10:	4313      	orrs	r3, r2
 8000c12:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	89fb      	ldrh	r3, [r7, #14]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	89fa      	ldrh	r2, [r7, #14]
 8000c36:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	8b9b      	ldrh	r3, [r3, #28]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	8a1a      	ldrh	r2, [r3, #16]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	821a      	strh	r2, [r3, #16]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d008      	beq.n	8000c80 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8000c7e:	e007      	b.n	8000c90 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	801a      	strh	r2, [r3, #0]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	899b      	ldrh	r3, [r3, #12]
 8000ca8:	b29b      	uxth	r3, r3
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	887a      	ldrh	r2, [r7, #2]
 8000cc6:	819a      	strh	r2, [r3, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d008      	beq.n	8000cf8 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
  }
}
 8000cf6:	e007      	b.n	8000d08 <SPI_CalculateCRC+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	801a      	strh	r2, [r3, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	891b      	ldrh	r3, [r3, #8]
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	887b      	ldrh	r3, [r7, #2]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e001      	b.n	8000d3e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	8a1b      	ldrh	r3, [r3, #16]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	88db      	ldrh	r3, [r3, #6]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	899b      	ldrh	r3, [r3, #12]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000d98:	f023 030c 	bic.w	r3, r3, #12
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	889a      	ldrh	r2, [r3, #4]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	891b      	ldrh	r3, [r3, #8]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db6:	4313      	orrs	r3, r2
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	8a9b      	ldrh	r3, [r3, #20]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	899b      	ldrh	r3, [r3, #12]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fdea 	bl	80009c4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a30      	ldr	r2, [pc, #192]	; (8000eb4 <USART_Init+0x168>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d003      	beq.n	8000e00 <USART_Init+0xb4>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a2f      	ldr	r2, [pc, #188]	; (8000eb8 <USART_Init+0x16c>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d102      	bne.n	8000e06 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	623b      	str	r3, [r7, #32]
 8000e04:	e001      	b.n	8000e0a <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	899b      	ldrh	r3, [r3, #12]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	da0c      	bge.n	8000e30 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000e16:	6a3a      	ldr	r2, [r7, #32]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	009a      	lsls	r2, r3, #2
 8000e20:	441a      	add	r2, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	e00b      	b.n	8000e48 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000e30:	6a3a      	ldr	r2, [r7, #32]
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	009a      	lsls	r2, r3, #2
 8000e3a:	441a      	add	r2, r3
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <USART_Init+0x170>)
 8000e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e50:	095b      	lsrs	r3, r3, #5
 8000e52:	011b      	lsls	r3, r3, #4
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	091b      	lsrs	r3, r3, #4
 8000e5a:	2264      	movs	r2, #100	; 0x64
 8000e5c:	fb02 f303 	mul.w	r3, r2, r3
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	899b      	ldrh	r3, [r3, #12]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	da0c      	bge.n	8000e8c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	3332      	adds	r3, #50	; 0x32
 8000e78:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <USART_Init+0x170>)
 8000e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e86:	4313      	orrs	r3, r2
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
 8000e8a:	e00b      	b.n	8000ea4 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	3332      	adds	r3, #50	; 0x32
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <USART_Init+0x170>)
 8000e94:	fba2 2303 	umull	r2, r3, r2, r3
 8000e98:	095b      	lsrs	r3, r3, #5
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	811a      	strh	r2, [r3, #8]
}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	; 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40011000 	.word	0x40011000
 8000eb8:	40011400 	.word	0x40011400
 8000ebc:	51eb851f 	.word	0x51eb851f

08000ec0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d008      	beq.n	8000ee4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	899b      	ldrh	r3, [r3, #12]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000ee2:	e007      	b.n	8000ef4 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	899b      	ldrh	r3, [r3, #12]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	819a      	strh	r2, [r3, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000f10:	787b      	ldrb	r3, [r7, #1]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d008      	beq.n	8000f28 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	8a9b      	ldrh	r3, [r3, #20]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 8000f26:	e009      	b.n	8000f3c <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	8a9b      	ldrh	r3, [r3, #20]
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	4013      	ands	r3, r2
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	829a      	strh	r2, [r3, #20]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <main>:
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
	spi_initialise();
 8000f4e:	f000 fc01 	bl	8001754 <spi_initialise>

	Sensor_StatusTypeDef status;
	//uint8_t chipid_gyro = spi_read_single(SPI_CS_Acc, BMX055_ACC_CHIP_ID|ACC_CHIP_ID_CHIP_ID);
	do{
		 status = sensor_check_id();
 8000f52:	f000 f9bf 	bl	80012d4 <sensor_check_id>
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	}while (status != SENS_OK);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f8      	bne.n	8000f52 <main+0xa>

	status = sensor_config();
 8000f60:	f000 f9ef 	bl	8001342 <sensor_config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]

	uart_initialise();
 8000f68:	f000 fede 	bl	8001d28 <uart_initialise>

	while (1){

		//Sensor_StatusTypeDef sensor_status = sensor_read_all();
		//GNSS_StatusTypeDef gnss_status = gnss_read_new_data();
		UART_StatusTypeDef uart_status = uart_send_to_jetson();
 8000f6c:	f000 fee4 	bl	8001d38 <uart_send_to_jetson>
 8000f70:	4603      	mov	r3, r0
 8000f72:	71bb      	strb	r3, [r7, #6]

		for(int i=0; i<10000; i++){
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	e00c      	b.n	8000f94 <main+0x4c>
			for(int i=0; i<1000; i++){
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	e002      	b.n	8000f86 <main+0x3e>
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	3301      	adds	r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f8c:	dbf8      	blt.n	8000f80 <main+0x38>
		for(int i=0; i<10000; i++){
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3301      	adds	r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	dded      	ble.n	8000f7a <main+0x32>
	while (1){
 8000f9e:	e7e5      	b.n	8000f6c <main+0x24>

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fa6:	e003      	b.n	8000fb0 <LoopCopyDataInit>

08000fa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000faa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fae:	3104      	adds	r1, #4

08000fb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb8:	d3f6      	bcc.n	8000fa8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fbc:	e002      	b.n	8000fc4 <LoopFillZerobss>

08000fbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fc0:	f842 3b04 	str.w	r3, [r2], #4

08000fc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc8:	d3f9      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fca:	f000 f841 	bl	8001050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f000 ff4b 	bl	8001e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff ffb9 	bl	8000f48 <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fdc:	08001ed0 	.word	0x08001ed0
  ldr  r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fe4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000fe8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000fec:	20000150 	.word	0x20000150

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>

08000ff2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001004:	e7fe      	b.n	8001004 <HardFault_Handler+0x4>

08001006 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800100a:	e7fe      	b.n	800100a <MemManage_Handler+0x4>

0800100c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001010:	e7fe      	b.n	8001010 <BusFault_Handler+0x4>

08001012 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001016:	e7fe      	b.n	8001016 <UsageFault_Handler+0x4>

08001018 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4a16      	ldr	r2, [pc, #88]	; (80010b0 <SystemInit+0x60>)
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <SystemInit+0x60>)
 8001058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001064:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <SystemInit+0x64>)
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <SystemInit+0x64>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <SystemInit+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001076:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <SystemInit+0x64>)
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <SystemInit+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <SystemInit+0x64>)
 8001088:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <SystemInit+0x68>)
 800108a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800108c:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <SystemInit+0x64>)
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <SystemInit+0x64>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001096:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <SystemInit+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800109e:	f000 f80d 	bl	80010bc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010a2:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <SystemInit+0x60>)
 80010a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010a8:	609a      	str	r2, [r3, #8]
#endif
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00
 80010b4:	40023800 	.word	0x40023800
 80010b8:	24003010 	.word	0x24003010

080010bc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80010ca:	4a36      	ldr	r2, [pc, #216]	; (80011a4 <SetSysClock+0xe8>)
 80010cc:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <SetSysClock+0xe8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80010d6:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <SetSysClock+0xe8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3301      	adds	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d103      	bne.n	80010f4 <SetSysClock+0x38>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80010f2:	d1f0      	bne.n	80010d6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <SetSysClock+0xe8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001100:	2301      	movs	r3, #1
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	e001      	b.n	800110a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d142      	bne.n	8001196 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001110:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <SetSysClock+0xe8>)
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <SetSysClock+0xe8>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800111c:	4a22      	ldr	r2, [pc, #136]	; (80011a8 <SetSysClock+0xec>)
 800111e:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <SetSysClock+0xec>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001126:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001128:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <SetSysClock+0xe8>)
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <SetSysClock+0xe8>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001130:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <SetSysClock+0xe8>)
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <SetSysClock+0xe8>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800113c:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <SetSysClock+0xe8>)
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <SetSysClock+0xe8>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001146:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <SetSysClock+0xe8>)
 800114a:	4a18      	ldr	r2, [pc, #96]	; (80011ac <SetSysClock+0xf0>)
 800114c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800114e:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <SetSysClock+0xe8>)
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <SetSysClock+0xe8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001158:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800115a:	bf00      	nop
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <SetSysClock+0xe8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0f9      	beq.n	800115c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <SetSysClock+0xf4>)
 800116a:	f240 7205 	movw	r2, #1797	; 0x705
 800116e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001170:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <SetSysClock+0xe8>)
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <SetSysClock+0xe8>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f023 0303 	bic.w	r3, r3, #3
 800117a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800117c:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <SetSysClock+0xe8>)
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <SetSysClock+0xe8>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f043 0302 	orr.w	r3, r3, #2
 8001186:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001188:	bf00      	nop
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <SetSysClock+0xe8>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b08      	cmp	r3, #8
 8001194:	d1f9      	bne.n	800118a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40007000 	.word	0x40007000
 80011ac:	07405419 	.word	0x07405419
 80011b0:	40023c00 	.word	0x40023c00

080011b4 <sensor_mag_power_control>:
//------------------------------STATIC FUNCTIONS--------------------------------//
/* @brief change magneto mode between sleep / suspend
 * cmd==ENABLE: put the magneto to sleep mode
 * cmd==Disable: put magneto to suspend mode
 */
static void sensor_mag_power_control(FunctionalState cmd){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	if(cmd == ENABLE){
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d105      	bne.n	80011d0 <sensor_mag_power_control+0x1c>
		spi_write_single(SPI_CS_Mag, MAG_PWR_CR1_POWER_CONTROL_BIT, BMX055_MAG_PWR_CR1);
 80011c4:	224b      	movs	r2, #75	; 0x4b
 80011c6:	2101      	movs	r1, #1
 80011c8:	2002      	movs	r0, #2
 80011ca:	f000 fb98 	bl	80018fe <spi_write_single>
	}
	else{
		spi_write_single(SPI_CS_Mag, 0x00, BMX055_MAG_PWR_CR1);
	}
}
 80011ce:	e004      	b.n	80011da <sensor_mag_power_control+0x26>
		spi_write_single(SPI_CS_Mag, 0x00, BMX055_MAG_PWR_CR1);
 80011d0:	224b      	movs	r2, #75	; 0x4b
 80011d2:	2100      	movs	r1, #0
 80011d4:	2002      	movs	r0, #2
 80011d6:	f000 fb92 	bl	80018fe <spi_write_single>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <bmp280_config>:
 * BMP_CTRL_MEAS	osrs_t		001		7,6,5	x1 sampling
 * 					osrs_p		001		4,3,2	x1 sampling
 * 					mode		11		1,0		(set to normal mode)
 *
 */
static Sensor_StatusTypeDef bmp280_config(){
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
	//write 001000100 to BMP_CTRL_MEAS
	//uint8_t calib_data = CTRL_MEAS_OSRS_P_1|CTRL_MEAS_OSRS_T_1;
	uint8_t calib_data = CTRL_MEAS_OSRS_P_1|CTRL_MEAS_OSRS_T_1|CTRL_MEAS_MODE_NORMAL;
 80011e8:	2327      	movs	r3, #39	; 0x27
 80011ea:	71fb      	strb	r3, [r7, #7]

	if( spi_write_single(SPI_CS_Baro, calib_data, BMP280_CTRL_MEAS) != SENS_OK)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	22f4      	movs	r2, #244	; 0xf4
 80011f0:	4619      	mov	r1, r3
 80011f2:	2003      	movs	r0, #3
 80011f4:	f000 fb83 	bl	80018fe <spi_write_single>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <bmp280_config+0x20>
		return SENS_CONFERR;
 80011fe:	2305      	movs	r3, #5
 8001200:	e000      	b.n	8001204 <bmp280_config+0x22>

	//if (spi_write_single(SPI_CS_Baro, 0x04, BMP280_CONFIG) != SENS_OK)
		//return SENS_CONFERR;

	return SENS_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <bmx055_config>:
 *
 * use Sensor_ConfigTypeDef to set
 * rates and ranges
 *
 */
static Sensor_StatusTypeDef bmx055_config(Sensor_ConfigTypeDef *f){
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

	//----------------ACCELEROMETER-------------------------//
	/* Accelerometer measurement range
	 * Default	: 0b(0000)0011 	= +-2g
	 * Set		: user-defined*/
	if(spi_write_single(SPI_CS_Acc, f->accel_range, BMX055_ACC_PMU_RANGE) != SENS_OK){
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	785b      	ldrb	r3, [r3, #1]
 8001218:	220f      	movs	r2, #15
 800121a:	4619      	mov	r1, r3
 800121c:	2000      	movs	r0, #0
 800121e:	f000 fb6e 	bl	80018fe <spi_write_single>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <bmx055_config+0x20>
		return SENS_CONFERR;
 8001228:	2305      	movs	r3, #5
 800122a:	e04f      	b.n	80012cc <bmx055_config+0xc0>
	}
	/* Accelerometer measurement output data rate
	 * Default	: 0b(000)01111 	= 1000 Hz
	 * Set		: user-defined*/
	if(spi_write_single(SPI_CS_Acc, f->accel_rate, BMX055_ACC_PMU_BW) != SENS_OK){
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2210      	movs	r2, #16
 8001232:	4619      	mov	r1, r3
 8001234:	2000      	movs	r0, #0
 8001236:	f000 fb62 	bl	80018fe <spi_write_single>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <bmx055_config+0x38>
		return SENS_CONFERR;
 8001240:	2305      	movs	r3, #5
 8001242:	e043      	b.n	80012cc <bmx055_config+0xc0>
	}
	/* Accelerometer power mode
	 * Default	: 0b0000000(0) 	= normal mode
	 * Set		: 0b0000000(0) 	= normal mode */
	if(spi_write_single(SPI_CS_Acc, ACC_PWR_NORMAL, BMX055_ACC_PMU_LPW) != SENS_OK){
 8001244:	2211      	movs	r2, #17
 8001246:	2100      	movs	r1, #0
 8001248:	2000      	movs	r0, #0
 800124a:	f000 fb58 	bl	80018fe <spi_write_single>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <bmx055_config+0x4c>
		return SENS_CONFERR;
 8001254:	2305      	movs	r3, #5
 8001256:	e039      	b.n	80012cc <bmx055_config+0xc0>

	//-----------------------GYROSCOPE-----------------------//
	/* Gyroscope measurement range
	 * Default	: 0b(00000)000 	= +-2000d/s
	 * Set		: user-defined*/
	if(spi_write_single(SPI_CS_Gyro, f->gyro_range, BMX055_GYRO_RANGE) != SENS_OK){
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	78db      	ldrb	r3, [r3, #3]
 800125c:	220f      	movs	r2, #15
 800125e:	4619      	mov	r1, r3
 8001260:	2001      	movs	r0, #1
 8001262:	f000 fb4c 	bl	80018fe <spi_write_single>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <bmx055_config+0x64>
		return SENS_CONFERR;
 800126c:	2305      	movs	r3, #5
 800126e:	e02d      	b.n	80012cc <bmx055_config+0xc0>
	}
	/* Gyroscope measurement output data rate (bandwidth)
	 * Default	: 0b(1000)0000 	= 2000 Hz with no filter
	 * Set		: user-defined*/
	if(spi_write_single(SPI_CS_Gyro, f->gyro_rate|GYRO_BW_RESET, BMX055_GYRO_BW) != SENS_OK){
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	789b      	ldrb	r3, [r3, #2]
 8001274:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2210      	movs	r2, #16
 800127c:	4619      	mov	r1, r3
 800127e:	2001      	movs	r0, #1
 8001280:	f000 fb3d 	bl	80018fe <spi_write_single>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <bmx055_config+0x82>
		return SENS_CONFERR;
 800128a:	2305      	movs	r3, #5
 800128c:	e01e      	b.n	80012cc <bmx055_config+0xc0>
	}
	/* Gyroscope power mode
	 * Default	: 0b0(0)0(0)000(0)	= normal mode
	 * Set		: 0b0(0)0(0)000(0)	= normal mode*/
	if(spi_write_single(SPI_CS_Gyro, GYRO_LPM1_NORMAL_MODE, BMX055_GYRO_LPM1) != SENS_OK){
 800128e:	2211      	movs	r2, #17
 8001290:	2100      	movs	r1, #0
 8001292:	2001      	movs	r0, #1
 8001294:	f000 fb33 	bl	80018fe <spi_write_single>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <bmx055_config+0x96>
		return SENS_CONFERR;
 800129e:	2305      	movs	r3, #5
 80012a0:	e014      	b.n	80012cc <bmx055_config+0xc0>

	/*Magneto meter xy repetitions
	 *choose nXY=3 ==> REPXY=1 (see pg122 table37 and pg138 of datasheet)
	 *default	: 0b00000000
	 *set to	: 0b00000001 */
	if(spi_write_single(SPI_CS_Mag, MAG_REP_XY_LOW_POWER_PRESET_REPXY, BMX055_MAG_REP_XY) != SENS_OK){
 80012a2:	2251      	movs	r2, #81	; 0x51
 80012a4:	2101      	movs	r1, #1
 80012a6:	2002      	movs	r0, #2
 80012a8:	f000 fb29 	bl	80018fe <spi_write_single>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <bmx055_config+0xaa>
		return SENS_CONFERR;
 80012b2:	2305      	movs	r3, #5
 80012b4:	e00a      	b.n	80012cc <bmx055_config+0xc0>

	/*Magneto meter z repetitions
	 *choose nZ=3 ==> REPZ=2 (see pg122 table37 and pg138 of datasheet)
	 *default	: 0b00000000
	 *set to	: 0b00000010 */
	if(spi_write_single(SPI_CS_Mag, MAG_REP_Z_LOW_POWER_PRESET_REPZ, BMX055_MAG_REP_Z) != SENS_OK ){
 80012b6:	2252      	movs	r2, #82	; 0x52
 80012b8:	2102      	movs	r1, #2
 80012ba:	2002      	movs	r0, #2
 80012bc:	f000 fb1f 	bl	80018fe <spi_write_single>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <bmx055_config+0xbe>
		return SENS_CONFERR;
 80012c6:	2305      	movs	r3, #5
 80012c8:	e000      	b.n	80012cc <bmx055_config+0xc0>
	}



	return SENS_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <sensor_check_id>:
//-----------------------------PUBLIC FUNCTIONS-------------------------------//

/**
 * @brief used to check sensors are present
 */
Sensor_StatusTypeDef sensor_check_id(){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

	uint8_t acc_id = spi_read_single(SPI_CS_Acc, BMX055_ACC_CHIP_ID);
 80012da:	2100      	movs	r1, #0
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 faed 	bl	80018bc <spi_read_single>
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	if(acc_id != BMX055_ACC_ID){
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2bfa      	cmp	r3, #250	; 0xfa
 80012ea:	d001      	beq.n	80012f0 <sensor_check_id+0x1c>
		return SENS_IDERR;
 80012ec:	2304      	movs	r3, #4
 80012ee:	e024      	b.n	800133a <sensor_check_id+0x66>
	}

	uint8_t gyro_id = spi_read_single(SPI_CS_Gyro, BMX055_GYRO_CHIP_ID);
 80012f0:	2100      	movs	r1, #0
 80012f2:	2001      	movs	r0, #1
 80012f4:	f000 fae2 	bl	80018bc <spi_read_single>
 80012f8:	4603      	mov	r3, r0
 80012fa:	71bb      	strb	r3, [r7, #6]
	if(gyro_id != BMX055_GYRO_ID){
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	d001      	beq.n	8001306 <sensor_check_id+0x32>
		return SENS_IDERR;
 8001302:	2304      	movs	r3, #4
 8001304:	e019      	b.n	800133a <sensor_check_id+0x66>
	}

	sensor_mag_power_control(ENABLE);
 8001306:	2001      	movs	r0, #1
 8001308:	f7ff ff54 	bl	80011b4 <sensor_mag_power_control>
	uint8_t mag_id = spi_read_single(SPI_CS_Mag, BMX055_MAG_CHIP_ID);
 800130c:	2140      	movs	r1, #64	; 0x40
 800130e:	2002      	movs	r0, #2
 8001310:	f000 fad4 	bl	80018bc <spi_read_single>
 8001314:	4603      	mov	r3, r0
 8001316:	717b      	strb	r3, [r7, #5]
	if(mag_id != BMX055_MAG_ID){
 8001318:	797b      	ldrb	r3, [r7, #5]
 800131a:	2b32      	cmp	r3, #50	; 0x32
 800131c:	d001      	beq.n	8001322 <sensor_check_id+0x4e>
		return SENS_IDERR;
 800131e:	2304      	movs	r3, #4
 8001320:	e00b      	b.n	800133a <sensor_check_id+0x66>
	}

	uint8_t baro_id = spi_read_single(SPI_CS_Baro, BMP280_CHIP_ID);
 8001322:	21d0      	movs	r1, #208	; 0xd0
 8001324:	2003      	movs	r0, #3
 8001326:	f000 fac9 	bl	80018bc <spi_read_single>
 800132a:	4603      	mov	r3, r0
 800132c:	713b      	strb	r3, [r7, #4]
	if(baro_id != BMP280_ID){
 800132e:	793b      	ldrb	r3, [r7, #4]
 8001330:	2b58      	cmp	r3, #88	; 0x58
 8001332:	d001      	beq.n	8001338 <sensor_check_id+0x64>
		return SENS_IDERR;
 8001334:	2304      	movs	r3, #4
 8001336:	e000      	b.n	800133a <sensor_check_id+0x66>
	}

	return SENS_OK;
 8001338:	2300      	movs	r3, #0

}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <sensor_config>:

Sensor_StatusTypeDef sensor_config(){
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
	if(bmp280_config() != SENS_OK){
 8001348:	f7ff ff4b 	bl	80011e2 <bmp280_config>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <sensor_config+0x14>
		return SENS_CONFERR;
 8001352:	2305      	movs	r3, #5
 8001354:	e014      	b.n	8001380 <sensor_config+0x3e>
	}

	//@TODO: decide rate and range
	Sensor_ConfigTypeDef *f;
	f->accel_range = ACC_PMU_RANGE_02;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2203      	movs	r2, #3
 800135a:	705a      	strb	r2, [r3, #1]
	f->accel_rate = ACC_PMU_BW_1000;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	220f      	movs	r2, #15
 8001360:	701a      	strb	r2, [r3, #0]
	f->gyro_rate = GYRO_ODR_2000;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2281      	movs	r2, #129	; 0x81
 8001366:	709a      	strb	r2, [r3, #2]
	f->gyro_range = GYRO_RANGE_RANGE_2000;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	70da      	strb	r2, [r3, #3]
	if(bmx055_config(f) != SENS_OK){
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ff4c 	bl	800120c <bmx055_config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <sensor_config+0x3c>
		return SENS_CONFERR;
 800137a:	2305      	movs	r3, #5
 800137c:	e000      	b.n	8001380 <sensor_config+0x3e>
	}
	return SENS_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <sensor_read_acc>:
/**
 * @brief	read x,y,z data from acc, LSB first
 * @param	buff: variable to store read values
 * @param	lenght: how many bytes to read. recommended 6
 * */
Sensor_StatusTypeDef sensor_read_acc(uint8_t *buff, uint8_t length){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
	return spi_read_burst(SPI_CS_Acc, BMX055_ACC_D_X_LSB, buff, length);
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	2102      	movs	r1, #2
 800139a:	2000      	movs	r0, #0
 800139c:	f000 fadf 	bl	800195e <spi_read_burst>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <sensor_read_gyro>:
/**
 * @brief	read x,y,z data from gyro, LSB first
 * @param	buff: variable to store read values
 * @param	lenght: how many bytes to read. recommended 6
 * */
Sensor_StatusTypeDef sensor_read_gyro(uint8_t *buff, uint8_t length){
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	70fb      	strb	r3, [r7, #3]
	return spi_read_burst(SPI_CS_Gyro, BMX055_GYRO_RATE_X_LSB, buff, length);
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	2102      	movs	r1, #2
 80013bc:	2001      	movs	r0, #1
 80013be:	f000 face 	bl	800195e <spi_read_burst>
 80013c2:	4603      	mov	r3, r0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <sensor_read_mag>:
/**
 * @brief	read x,y,z data from magneto, LSB first
 * @param	buff: variable to store read values
 * @param	lenght: how many bytes to read. recommended 8
 * */
Sensor_StatusTypeDef sensor_read_mag(uint8_t *buff, uint8_t length){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
	//select forced mode
	Sensor_StatusTypeDef status = spi_write_single(SPI_CS_Mag, MAG_PWR_CR2_FORCED_MODE, BMX055_MAG_PWR_CR2);
 80013d8:	224c      	movs	r2, #76	; 0x4c
 80013da:	2102      	movs	r1, #2
 80013dc:	2002      	movs	r0, #2
 80013de:	f000 fa8e 	bl	80018fe <spi_write_single>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]
	//read data
	status= spi_read_burst(SPI_CS_Mag, BMX055_MAG_XOUT_LSB, buff, length);
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	2142      	movs	r1, #66	; 0x42
 80013ec:	2002      	movs	r0, #2
 80013ee:	f000 fab6 	bl	800195e <spi_read_burst>
 80013f2:	4603      	mov	r3, r0
 80013f4:	73fb      	strb	r3, [r7, #15]
	return status;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <sensor_read_baro>:
/**
 * @brief	read pressure and temperature data from baro, MSB first
 * @param	buff: variable to store read values
 * @param	lenght: how many bytes to read. recommended 6
 * */
Sensor_StatusTypeDef sensor_read_baro(uint8_t *buff, uint8_t length){
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
	//select forced mode
	//Sensor_StatusTypeDef status = spi_write_single(SPI_CS_Baro, CTRL_MEAS_MODE_FORCED, BMP280_CTRL_MEAS);
	//read data
	//uint8_t mode1 = spi_read_single(SPI_CS_Baro, BMP280_CTRL_MEAS);
	Sensor_StatusTypeDef status = spi_read_burst(SPI_CS_Baro, BMP280_PRESS_MSB, buff, length);
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	21f7      	movs	r1, #247	; 0xf7
 8001412:	2003      	movs	r0, #3
 8001414:	f000 faa3 	bl	800195e <spi_read_burst>
 8001418:	4603      	mov	r3, r0
 800141a:	73fb      	strb	r3, [r7, #15]
	//uint8_t mode2 = spi_read_single(SPI_CS_Baro, BMP280_CTRL_MEAS);
	return status;
 800141c:	7bfb      	ldrb	r3, [r7, #15]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <sensor_read_all>:

/*@brief	reall data from all sensors and pack into SensorData Struct
 * */
Sensor_StatusTypeDef sensor_read_all(){
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
	uint8_t gyro_buffer [GYRO_READ_LENGTH];
	uint8_t mag_buffer [MAG_READ_LENGTH];
	uint8_t baro_buffer [BARO_READ_LENGTH];

	//read acc data
	if(sensor_read_acc(acc_buffer, ACC_READ_LENGTH) != SENS_OK)
 800142e:	f107 0318 	add.w	r3, r7, #24
 8001432:	2106      	movs	r1, #6
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ffa7 	bl	8001388 <sensor_read_acc>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <sensor_read_all+0x1c>
		return SENS_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e089      	b.n	8001558 <sensor_read_all+0x130>

	GlobalDataUnion.GlobalDataStruct.AccX_LSB = (acc_buffer[0])&ACC_MASK_LSB;
 8001444:	7e3b      	ldrb	r3, [r7, #24]
 8001446:	f023 030f 	bic.w	r3, r3, #15
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b44      	ldr	r3, [pc, #272]	; (8001560 <sensor_read_all+0x138>)
 800144e:	705a      	strb	r2, [r3, #1]
	GlobalDataUnion.GlobalDataStruct.AccX_MSB = acc_buffer[1];
 8001450:	7e7a      	ldrb	r2, [r7, #25]
 8001452:	4b43      	ldr	r3, [pc, #268]	; (8001560 <sensor_read_all+0x138>)
 8001454:	709a      	strb	r2, [r3, #2]
	GlobalDataUnion.GlobalDataStruct.AccY_LSB = (acc_buffer[2])&ACC_MASK_LSB;
 8001456:	7ebb      	ldrb	r3, [r7, #26]
 8001458:	f023 030f 	bic.w	r3, r3, #15
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b40      	ldr	r3, [pc, #256]	; (8001560 <sensor_read_all+0x138>)
 8001460:	70da      	strb	r2, [r3, #3]
	GlobalDataUnion.GlobalDataStruct.AccY_MSB = acc_buffer[3];
 8001462:	7efa      	ldrb	r2, [r7, #27]
 8001464:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <sensor_read_all+0x138>)
 8001466:	711a      	strb	r2, [r3, #4]
	GlobalDataUnion.GlobalDataStruct.AccZ_LSB = (acc_buffer[4])&ACC_MASK_LSB;
 8001468:	7f3b      	ldrb	r3, [r7, #28]
 800146a:	f023 030f 	bic.w	r3, r3, #15
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <sensor_read_all+0x138>)
 8001472:	715a      	strb	r2, [r3, #5]
	GlobalDataUnion.GlobalDataStruct.AccZ_MSB = acc_buffer[5];
 8001474:	7f7a      	ldrb	r2, [r7, #29]
 8001476:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <sensor_read_all+0x138>)
 8001478:	719a      	strb	r2, [r3, #6]

	//read gyro data
	if(sensor_read_gyro(gyro_buffer, GYRO_READ_LENGTH))
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	2106      	movs	r1, #6
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff92 	bl	80013aa <sensor_read_gyro>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <sensor_read_all+0x68>
		return SENS_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e063      	b.n	8001558 <sensor_read_all+0x130>

	GlobalDataUnion.GlobalDataStruct.GyroX_LSB = gyro_buffer[0];
 8001490:	7c3a      	ldrb	r2, [r7, #16]
 8001492:	4b33      	ldr	r3, [pc, #204]	; (8001560 <sensor_read_all+0x138>)
 8001494:	71da      	strb	r2, [r3, #7]
	GlobalDataUnion.GlobalDataStruct.GyroX_MSB = gyro_buffer[1];
 8001496:	7c7a      	ldrb	r2, [r7, #17]
 8001498:	4b31      	ldr	r3, [pc, #196]	; (8001560 <sensor_read_all+0x138>)
 800149a:	721a      	strb	r2, [r3, #8]
	GlobalDataUnion.GlobalDataStruct.GyroY_LSB = gyro_buffer[2];
 800149c:	7cba      	ldrb	r2, [r7, #18]
 800149e:	4b30      	ldr	r3, [pc, #192]	; (8001560 <sensor_read_all+0x138>)
 80014a0:	725a      	strb	r2, [r3, #9]
	GlobalDataUnion.GlobalDataStruct.GyroY_MSB = gyro_buffer[3];
 80014a2:	7cfa      	ldrb	r2, [r7, #19]
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <sensor_read_all+0x138>)
 80014a6:	729a      	strb	r2, [r3, #10]
	GlobalDataUnion.GlobalDataStruct.GyroZ_LSB = gyro_buffer[4];
 80014a8:	7d3a      	ldrb	r2, [r7, #20]
 80014aa:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <sensor_read_all+0x138>)
 80014ac:	72da      	strb	r2, [r3, #11]
	GlobalDataUnion.GlobalDataStruct.GyroZ_MSB = gyro_buffer[5];
 80014ae:	7d7a      	ldrb	r2, [r7, #21]
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <sensor_read_all+0x138>)
 80014b2:	731a      	strb	r2, [r3, #12]

	//read mag data
	if(sensor_read_mag(mag_buffer, MAG_READ_LENGTH)!= SENS_OK)
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2108      	movs	r1, #8
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff86 	bl	80013cc <sensor_read_mag>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <sensor_read_all+0xa2>
		return SENS_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e046      	b.n	8001558 <sensor_read_all+0x130>

	GlobalDataUnion.GlobalDataStruct.MagX_LSB = mag_buffer[0]&MAG_MASK_XY_LSB;
 80014ca:	7a3b      	ldrb	r3, [r7, #8]
 80014cc:	f023 0307 	bic.w	r3, r3, #7
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b23      	ldr	r3, [pc, #140]	; (8001560 <sensor_read_all+0x138>)
 80014d4:	735a      	strb	r2, [r3, #13]
	GlobalDataUnion.GlobalDataStruct.MagX_MSB = mag_buffer[1];
 80014d6:	7a7a      	ldrb	r2, [r7, #9]
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <sensor_read_all+0x138>)
 80014da:	739a      	strb	r2, [r3, #14]
	GlobalDataUnion.GlobalDataStruct.MagY_LSB = mag_buffer[2]&MAG_MASK_XY_LSB;
 80014dc:	7abb      	ldrb	r3, [r7, #10]
 80014de:	f023 0307 	bic.w	r3, r3, #7
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <sensor_read_all+0x138>)
 80014e6:	73da      	strb	r2, [r3, #15]
	GlobalDataUnion.GlobalDataStruct.MagY_MSB = mag_buffer[3];
 80014e8:	7afa      	ldrb	r2, [r7, #11]
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <sensor_read_all+0x138>)
 80014ec:	741a      	strb	r2, [r3, #16]
	GlobalDataUnion.GlobalDataStruct.MagZ_LSB = mag_buffer[4]&MAG_MASK_Z_LSB;
 80014ee:	7b3b      	ldrb	r3, [r7, #12]
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <sensor_read_all+0x138>)
 80014f8:	745a      	strb	r2, [r3, #17]
	GlobalDataUnion.GlobalDataStruct.MagZ_MSB = mag_buffer[5];
 80014fa:	7b7a      	ldrb	r2, [r7, #13]
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <sensor_read_all+0x138>)
 80014fe:	749a      	strb	r2, [r3, #18]
	GlobalDataUnion.GlobalDataStruct.MagHall_LSB = mag_buffer[6]&MAG_MASK_HALL_LSB;
 8001500:	7bbb      	ldrb	r3, [r7, #14]
 8001502:	f023 0303 	bic.w	r3, r3, #3
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <sensor_read_all+0x138>)
 800150a:	74da      	strb	r2, [r3, #19]
	GlobalDataUnion.GlobalDataStruct.MagHall_MSB = mag_buffer[7];
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <sensor_read_all+0x138>)
 8001510:	751a      	strb	r2, [r3, #20]

	//read baro data
	if(sensor_read_baro(baro_buffer, ACC_READ_LENGTH)!= SENS_OK)
 8001512:	463b      	mov	r3, r7
 8001514:	2106      	movs	r1, #6
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff72 	bl	8001400 <sensor_read_baro>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <sensor_read_all+0xfe>
		return SENS_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e018      	b.n	8001558 <sensor_read_all+0x130>

	GlobalDataUnion.GlobalDataStruct.BaroPress_MSB = baro_buffer[0];
 8001526:	783a      	ldrb	r2, [r7, #0]
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <sensor_read_all+0x138>)
 800152a:	755a      	strb	r2, [r3, #21]
	GlobalDataUnion.GlobalDataStruct.BaroPress_LSB = baro_buffer[1];
 800152c:	787a      	ldrb	r2, [r7, #1]
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <sensor_read_all+0x138>)
 8001530:	759a      	strb	r2, [r3, #22]
	GlobalDataUnion.GlobalDataStruct.BaroPress_XLSB = baro_buffer[2]&BARO_MASK_XLSB;
 8001532:	78bb      	ldrb	r3, [r7, #2]
 8001534:	f023 030f 	bic.w	r3, r3, #15
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <sensor_read_all+0x138>)
 800153c:	75da      	strb	r2, [r3, #23]
	GlobalDataUnion.GlobalDataStruct.BaroTemp_MSB = baro_buffer[3];
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <sensor_read_all+0x138>)
 8001542:	761a      	strb	r2, [r3, #24]
	GlobalDataUnion.GlobalDataStruct.BaroTemp_LSB = baro_buffer[4];
 8001544:	793a      	ldrb	r2, [r7, #4]
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <sensor_read_all+0x138>)
 8001548:	765a      	strb	r2, [r3, #25]
	GlobalDataUnion.GlobalDataStruct.BaroTemp_XLSB = baro_buffer[5]&BARO_MASK_XLSB;
 800154a:	797b      	ldrb	r3, [r7, #5]
 800154c:	f023 030f 	bic.w	r3, r3, #15
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b03      	ldr	r3, [pc, #12]	; (8001560 <sensor_read_all+0x138>)
 8001554:	769a      	strb	r2, [r3, #26]



	return SENS_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200000cc 	.word	0x200000cc

08001564 <gnss_ubx_checksum>:
#include "stdbool.h"



//--------------------STATIC FUNCTIONS-------------------//
static bool gnss_ubx_checksum(){
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
	uint8_t CK_A = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
	uint8_t CK_B = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	73bb      	strb	r3, [r7, #14]

	uint8_t ck_a = GNSS_RX_BUFFER[98];
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <gnss_ubx_checksum+0x6c>)
 8001574:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001578:	71fb      	strb	r3, [r7, #7]
	uint8_t ck_b = GNSS_RX_BUFFER[99];
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <gnss_ubx_checksum+0x6c>)
 800157c:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8001580:	71bb      	strb	r3, [r7, #6]

	for(int i=2; i<GNSS_BUFFER_SIZE-2; i++){
 8001582:	2302      	movs	r3, #2
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	e00d      	b.n	80015a4 <gnss_ubx_checksum+0x40>
		CK_A = CK_A + GNSS_RX_BUFFER[i];
 8001588:	4a11      	ldr	r2, [pc, #68]	; (80015d0 <gnss_ubx_checksum+0x6c>)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	4413      	add	r3, r2
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	4413      	add	r3, r2
 8001594:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8001596:	7bba      	ldrb	r2, [r7, #14]
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	4413      	add	r3, r2
 800159c:	73bb      	strb	r3, [r7, #14]
	for(int i=2; i<GNSS_BUFFER_SIZE-2; i++){
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3301      	adds	r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b61      	cmp	r3, #97	; 0x61
 80015a8:	ddee      	ble.n	8001588 <gnss_ubx_checksum+0x24>
	}

	if(CK_A != ck_a)
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d001      	beq.n	80015b6 <gnss_ubx_checksum+0x52>
		return false;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e006      	b.n	80015c4 <gnss_ubx_checksum+0x60>

	if(CK_B != ck_b)
 80015b6:	7bba      	ldrb	r2, [r7, #14]
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d001      	beq.n	80015c2 <gnss_ubx_checksum+0x5e>
		return false;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <gnss_ubx_checksum+0x60>

	return true;
 80015c2:	2301      	movs	r3, #1

}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	2000002c 	.word	0x2000002c

080015d4 <gnss_read_new_data>:




//----------------PUBLIC FUNCTIONS--------------------//
GNSS_StatusTypeDef gnss_read_new_data(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	if(!gnss_ubx_checksum())
 80015da:	f7ff ffc3 	bl	8001564 <gnss_ubx_checksum>
 80015de:	4603      	mov	r3, r0
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <gnss_read_new_data+0x1a>
		return GNSS_READ_ERROR;
 80015ea:	2302      	movs	r3, #2
 80015ec:	e011      	b.n	8001612 <gnss_read_new_data+0x3e>

	//copy full ubx message to global data struct
	for(uint8_t i=0; i<GNSS_BUFFER_SIZE; i++){
 80015ee:	2300      	movs	r3, #0
 80015f0:	71fb      	strb	r3, [r7, #7]
 80015f2:	e00a      	b.n	800160a <gnss_read_new_data+0x36>
		GlobalDataUnion.GlobalDataStruct.GNSS_UBX_MESSAGE[i] = GNSS_RX_BUFFER[i];
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	4908      	ldr	r1, [pc, #32]	; (800161c <gnss_read_new_data+0x48>)
 80015fa:	5c89      	ldrb	r1, [r1, r2]
 80015fc:	4a08      	ldr	r2, [pc, #32]	; (8001620 <gnss_read_new_data+0x4c>)
 80015fe:	4413      	add	r3, r2
 8001600:	460a      	mov	r2, r1
 8001602:	76da      	strb	r2, [r3, #27]
	for(uint8_t i=0; i<GNSS_BUFFER_SIZE; i++){
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	3301      	adds	r3, #1
 8001608:	71fb      	strb	r3, [r7, #7]
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	2b63      	cmp	r3, #99	; 0x63
 800160e:	d9f1      	bls.n	80015f4 <gnss_read_new_data+0x20>
	}

	return GNSS_OK;
 8001610:	2300      	movs	r3, #0

}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000002c 	.word	0x2000002c
 8001620:	200000cc 	.word	0x200000cc

08001624 <cs_deselect>:
//------------------------------STATIC FUNCTIONS--------------------------------//

/**
 * @brief deselect cs pin means set high
 */
static void cs_deselect(SPI_ChipSelectTypeDef cs){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
	switch(cs){
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d822      	bhi.n	800167a <cs_deselect+0x56>
 8001634:	a201      	add	r2, pc, #4	; (adr r2, 800163c <cs_deselect+0x18>)
 8001636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163a:	bf00      	nop
 800163c:	0800164d 	.word	0x0800164d
 8001640:	08001657 	.word	0x08001657
 8001644:	08001663 	.word	0x08001663
 8001648:	0800166f 	.word	0x0800166f
	case SPI_CS_Acc	 : 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Acc);	break;
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <cs_deselect+0x60>)
 8001650:	f7ff f950 	bl	80008f4 <GPIO_SetBits>
 8001654:	e011      	b.n	800167a <cs_deselect+0x56>
	case SPI_CS_Gyro : 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Gyro);	break;
 8001656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165a:	480a      	ldr	r0, [pc, #40]	; (8001684 <cs_deselect+0x60>)
 800165c:	f7ff f94a 	bl	80008f4 <GPIO_SetBits>
 8001660:	e00b      	b.n	800167a <cs_deselect+0x56>
	case SPI_CS_Mag	 : 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Mag);	break;
 8001662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001666:	4807      	ldr	r0, [pc, #28]	; (8001684 <cs_deselect+0x60>)
 8001668:	f7ff f944 	bl	80008f4 <GPIO_SetBits>
 800166c:	e005      	b.n	800167a <cs_deselect+0x56>
	case SPI_CS_Baro : 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Baro);	break;
 800166e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001672:	4804      	ldr	r0, [pc, #16]	; (8001684 <cs_deselect+0x60>)
 8001674:	f7ff f93e 	bl	80008f4 <GPIO_SetBits>
 8001678:	bf00      	nop
	default 		 :	;
	}
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000

08001688 <cs_select>:

/**
 * @brief select cs pin means set low
 */
static void cs_select(SPI_ChipSelectTypeDef cs){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
	switch(cs){
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d822      	bhi.n	80016de <cs_select+0x56>
 8001698:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <cs_select+0x18>)
 800169a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169e:	bf00      	nop
 80016a0:	080016b1 	.word	0x080016b1
 80016a4:	080016bb 	.word	0x080016bb
 80016a8:	080016c7 	.word	0x080016c7
 80016ac:	080016d3 	.word	0x080016d3
	case SPI_CS_Acc : 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Acc);	break;
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <cs_select+0x60>)
 80016b4:	f7ff f92d 	bl	8000912 <GPIO_ResetBits>
 80016b8:	e011      	b.n	80016de <cs_select+0x56>
	case SPI_CS_Gyro: 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Gyro);	break;
 80016ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016be:	480a      	ldr	r0, [pc, #40]	; (80016e8 <cs_select+0x60>)
 80016c0:	f7ff f927 	bl	8000912 <GPIO_ResetBits>
 80016c4:	e00b      	b.n	80016de <cs_select+0x56>
	case SPI_CS_Mag	: 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Mag);	break;
 80016c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ca:	4807      	ldr	r0, [pc, #28]	; (80016e8 <cs_select+0x60>)
 80016cc:	f7ff f921 	bl	8000912 <GPIO_ResetBits>
 80016d0:	e005      	b.n	80016de <cs_select+0x56>
	case SPI_CS_Baro: 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Baro);	break;
 80016d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016d6:	4804      	ldr	r0, [pc, #16]	; (80016e8 <cs_select+0x60>)
 80016d8:	f7ff f91b 	bl	8000912 <GPIO_ResetBits>
 80016dc:	bf00      	nop
	default			:	;
	}
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000

080016ec <stm32_spi_rw>:

static uint8_t stm32_spi_rw(uint8_t data_out){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI1, data_out);
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4619      	mov	r1, r3
 80016fc:	4809      	ldr	r0, [pc, #36]	; (8001724 <stm32_spi_rw+0x38>)
 80016fe:	f7ff fada 	bl	8000cb6 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8001702:	bf00      	nop
 8001704:	2101      	movs	r1, #1
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <stm32_spi_rw+0x38>)
 8001708:	f7ff fb04 	bl	8000d14 <SPI_I2S_GetFlagStatus>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f8      	beq.n	8001704 <stm32_spi_rw+0x18>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI1);
 8001712:	4804      	ldr	r0, [pc, #16]	; (8001724 <stm32_spi_rw+0x38>)
 8001714:	f7ff fac2 	bl	8000c9c <SPI_I2S_ReceiveData>
 8001718:	4603      	mov	r3, r0
 800171a:	b2db      	uxtb	r3, r3

}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40013000 	.word	0x40013000

08001728 <spi_tx>:
static void spi_tx(uint8_t data){
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
	stm32_spi_rw(data);
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ffd9 	bl	80016ec <stm32_spi_rw>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <spi_rx>:

static uint8_t spi_rx(void){
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
	return stm32_spi_rw(0xff);
 8001746:	20ff      	movs	r0, #255	; 0xff
 8001748:	f7ff ffd0 	bl	80016ec <stm32_spi_rw>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <spi_initialise>:

/**
 * @brief intialise all clock and registers needed for spi. assign and initialise all gpio pins needed
 * @return void
 */
void spi_initialise(void){
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0

	//enable SPI clock: APB2 for SPI1
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 800175a:	2101      	movs	r1, #1
 800175c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001760:	f7ff fa18 	bl	8000b94 <RCC_APB2PeriphClockCmd>
	//enable GPIO clock for SCK, MOSI, MISO
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001764:	2101      	movs	r1, #1
 8001766:	2001      	movs	r0, #1
 8001768:	f7ff f9d4 	bl	8000b14 <RCC_AHB1PeriphClockCmd>
	//enable GPIO clock for CS pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800176c:	2101      	movs	r1, #1
 800176e:	2010      	movs	r0, #16
 8001770:	f7ff f9d0 	bl	8000b14 <RCC_AHB1PeriphClockCmd>

	//SPI GPIO configurations:
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure SPI Chip Select pins */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001774:	2301      	movs	r3, #1
 8001776:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001778:	2300      	movs	r3, #0
 800177a:	76bb      	strb	r3, [r7, #26]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800177c:	2301      	movs	r3, #1
 800177e:	76fb      	strb	r3, [r7, #27]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001780:	2303      	movs	r3, #3
 8001782:	767b      	strb	r3, [r7, #25]

	/* SPI Accelerometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_CS_Acc;
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port_CS, &GPIO_InitStructure);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4848      	ldr	r0, [pc, #288]	; (80018b0 <spi_initialise+0x15c>)
 8001790:	f7ff f822 	bl	80007d8 <GPIO_Init>

	/* SPI Gyroscope CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_CS_Gyro;
 8001794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001798:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port_CS, &GPIO_InitStructure);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	4843      	ldr	r0, [pc, #268]	; (80018b0 <spi_initialise+0x15c>)
 80017a2:	f7ff f819 	bl	80007d8 <GPIO_Init>

	/* SPI Magnetometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_CS_Mag;
 80017a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017aa:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port_CS, &GPIO_InitStructure);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	483f      	ldr	r0, [pc, #252]	; (80018b0 <spi_initialise+0x15c>)
 80017b4:	f7ff f810 	bl	80007d8 <GPIO_Init>

	/* SPI Barometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_CS_Baro;
 80017b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017bc:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port_CS, &GPIO_InitStructure);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	483a      	ldr	r0, [pc, #232]	; (80018b0 <spi_initialise+0x15c>)
 80017c6:	f7ff f807 	bl	80007d8 <GPIO_Init>

	//deselect all cs pins
	cs_deselect(SPI_CS_Acc);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff ff2a 	bl	8001624 <cs_deselect>
	cs_deselect(SPI_CS_Gyro);
 80017d0:	2001      	movs	r0, #1
 80017d2:	f7ff ff27 	bl	8001624 <cs_deselect>
	cs_deselect(SPI_CS_Mag);
 80017d6:	2002      	movs	r0, #2
 80017d8:	f7ff ff24 	bl	8001624 <cs_deselect>
	cs_deselect(SPI_CS_Baro);
 80017dc:	2003      	movs	r0, #3
 80017de:	f7ff ff21 	bl	8001624 <cs_deselect>

	/* Configure SPI pins: SCK and MOSI with default alternate function push-pull output*/
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80017e2:	2302      	movs	r3, #2
 80017e4:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80017e6:	2300      	movs	r3, #0
 80017e8:	76bb      	strb	r3, [r7, #26]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80017ea:	2302      	movs	r3, #2
 80017ec:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 80017ee:	2302      	movs	r3, #2
 80017f0:	76fb      	strb	r3, [r7, #27]

	/* SPI SCK pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_SCK;
 80017f2:	2320      	movs	r3, #32
 80017f4:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port, &GPIO_InitStructure);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	482d      	ldr	r0, [pc, #180]	; (80018b4 <spi_initialise+0x160>)
 80017fe:	f7fe ffeb 	bl	80007d8 <GPIO_Init>

	/* SPI MOSI pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_MOSI;
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port, &GPIO_InitStructure);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4829      	ldr	r0, [pc, #164]	; (80018b4 <spi_initialise+0x160>)
 800180e:	f7fe ffe3 	bl	80007d8 <GPIO_Init>

	/* Configure MISO as Input with internal pull-up */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001812:	2302      	movs	r3, #2
 8001814:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
 8001816:	2300      	movs	r3, #0
 8001818:	76bb      	strb	r3, [r7, #26]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800181a:	2301      	movs	r3, #1
 800181c:	76fb      	strb	r3, [r7, #27]

	/* SPI MISO pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_MISO;
 800181e:	2340      	movs	r3, #64	; 0x40
 8001820:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port, &GPIO_InitStructure);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4822      	ldr	r0, [pc, #136]	; (80018b4 <spi_initialise+0x160>)
 800182a:	f7fe ffd5 	bl	80007d8 <GPIO_Init>

	/* Connect SPI pins to AF5 */
	GPIO_PinAFConfig(GPIO_SPI_Port, GPIO_SPI_Pinsource_SCK, GPIO_AF_SPI1);	// SCK
 800182e:	2205      	movs	r2, #5
 8001830:	2105      	movs	r1, #5
 8001832:	4820      	ldr	r0, [pc, #128]	; (80018b4 <spi_initialise+0x160>)
 8001834:	f7ff f87c 	bl	8000930 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIO_SPI_Port, GPIO_SPI_Pinsource_MOSI, GPIO_AF_SPI1);	// MOSI
 8001838:	2205      	movs	r2, #5
 800183a:	2107      	movs	r1, #7
 800183c:	481d      	ldr	r0, [pc, #116]	; (80018b4 <spi_initialise+0x160>)
 800183e:	f7ff f877 	bl	8000930 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIO_SPI_Port, GPIO_SPI_Pinsource_MISO, GPIO_AF_SPI1);	// MISO
 8001842:	2205      	movs	r2, #5
 8001844:	2106      	movs	r1, #6
 8001846:	481b      	ldr	r0, [pc, #108]	; (80018b4 <spi_initialise+0x160>)
 8001848:	f7ff f872 	bl	8000930 <GPIO_PinAFConfig>

	/* SPI configuration */
	SPI_InitTypeDef SPI_InitStructure;

	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800184c:	2300      	movs	r3, #0
 800184e:	803b      	strh	r3, [r7, #0]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001850:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001854:	807b      	strh	r3, [r7, #2]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001856:	2300      	movs	r3, #0
 8001858:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 800185a:	2302      	movs	r3, #2
 800185c:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 800185e:	2301      	movs	r3, #1
 8001860:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001866:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_SPI; // 72000kHz/16 = 4500kHz < 10000kHz
 8001868:	2318      	movs	r3, #24
 800186a:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800186c:	2300      	movs	r3, #0
 800186e:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001870:	2307      	movs	r3, #7
 8001872:	823b      	strh	r3, [r7, #16]

	SPI_Init(SPI1, &SPI_InitStructure);
 8001874:	463b      	mov	r3, r7
 8001876:	4619      	mov	r1, r3
 8001878:	480f      	ldr	r0, [pc, #60]	; (80018b8 <spi_initialise+0x164>)
 800187a:	f7ff f9ab 	bl	8000bd4 <SPI_Init>
	SPI_CalculateCRC(SPI1, DISABLE);
 800187e:	2100      	movs	r1, #0
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <spi_initialise+0x164>)
 8001882:	f7ff fa27 	bl	8000cd4 <SPI_CalculateCRC>
	SPI_Cmd(SPI1, ENABLE);
 8001886:	2101      	movs	r1, #1
 8001888:	480b      	ldr	r0, [pc, #44]	; (80018b8 <spi_initialise+0x164>)
 800188a:	f7ff f9e7 	bl	8000c5c <SPI_Cmd>

	/* drain SPI */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) { ; } //wait for TX buffer to empty
 800188e:	bf00      	nop
 8001890:	2102      	movs	r1, #2
 8001892:	4809      	ldr	r0, [pc, #36]	; (80018b8 <spi_initialise+0x164>)
 8001894:	f7ff fa3e 	bl	8000d14 <SPI_I2S_GetFlagStatus>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f8      	beq.n	8001890 <spi_initialise+0x13c>
	uint8_t dummyread = SPI_I2S_ReceiveData(SPI1);
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <spi_initialise+0x164>)
 80018a0:	f7ff f9fc 	bl	8000c9c <SPI_I2S_ReceiveData>
 80018a4:	4603      	mov	r3, r0
 80018a6:	77fb      	strb	r3, [r7, #31]
	if (dummyread) { ; }
}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40013000 	.word	0x40013000

080018bc <spi_read_single>:
/**
 * @brief	read single byte of data from spi
 * @param 	cs: chip select
 * @param	addr: start address to read from
 */
uint8_t spi_read_single(SPI_ChipSelectTypeDef cs, uint8_t addr){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	460a      	mov	r2, r1
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	4613      	mov	r3, r2
 80018ca:	71bb      	strb	r3, [r7, #6]
	cs_select(cs);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff feda 	bl	8001688 <cs_select>

	uint8_t token = 0x80 | addr;	//read control byte = address but with MSB=1
 80018d4:	79bb      	ldrb	r3, [r7, #6]
 80018d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018da:	73fb      	strb	r3, [r7, #15]
	spi_tx(token);			//send control byte
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff22 	bl	8001728 <spi_tx>

	token = spi_rx(); 		// recieve data
 80018e4:	f7ff ff2d 	bl	8001742 <spi_rx>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]

	cs_deselect(cs);
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fe98 	bl	8001624 <cs_deselect>
	return token;
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <spi_write_single>:
 * @brief	send single byte of data to spi
 * @param 	cs: chip select
 * @param	addr: start address to read from
 * @param	data_out: //data to be written
 */
Sensor_StatusTypeDef spi_write_single(SPI_ChipSelectTypeDef cs, uint8_t data_out, uint8_t addr){
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	71fb      	strb	r3, [r7, #7]
 8001908:	460b      	mov	r3, r1
 800190a:	71bb      	strb	r3, [r7, #6]
 800190c:	4613      	mov	r3, r2
 800190e:	717b      	strb	r3, [r7, #5]
	cs_select(cs);
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff feb8 	bl	8001688 <cs_select>

	uint8_t token = 0x7F & addr;	//write control byte = address but with MSB=0
 8001918:	797b      	ldrb	r3, [r7, #5]
 800191a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800191e:	73fb      	strb	r3, [r7, #15]

	spi_tx(token);
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ff00 	bl	8001728 <spi_tx>
	spi_tx(data_out);
 8001928:	79bb      	ldrb	r3, [r7, #6]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fefc 	bl	8001728 <spi_tx>

	cs_deselect(cs);
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fe76 	bl	8001624 <cs_deselect>

	token = spi_read_single(cs, addr);
 8001938:	797a      	ldrb	r2, [r7, #5]
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ffbc 	bl	80018bc <spi_read_single>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]

	if(token!=data_out){
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	79bb      	ldrb	r3, [r7, #6]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <spi_write_single+0x56>
		return SENS_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <spi_write_single+0x58>
	}

	return SENS_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <spi_read_burst>:
 * @param	addr: start address to read from
 * @param	buffer: //buffer to store read result
 * @param	length // length of the buffer (how many bytes to read)
 */

Sensor_StatusTypeDef spi_read_burst(SPI_ChipSelectTypeDef cs, uint8_t addr, uint8_t* buffer, uint8_t length){
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	603a      	str	r2, [r7, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	4603      	mov	r3, r0
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	460b      	mov	r3, r1
 800196e:	71bb      	strb	r3, [r7, #6]
 8001970:	4613      	mov	r3, r2
 8001972:	717b      	strb	r3, [r7, #5]
	cs_select(cs);
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fe86 	bl	8001688 <cs_select>

	uint8_t token = 0x80 | addr;	//read control byte = address but with MSB=1
 800197c:	79bb      	ldrb	r3, [r7, #6]
 800197e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001982:	72fb      	strb	r3, [r7, #11]
	spi_tx(token);			//send control byte
 8001984:	7afb      	ldrb	r3, [r7, #11]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fece 	bl	8001728 <spi_tx>

	for(int i=0; i<length; i++){
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e00b      	b.n	80019aa <spi_read_burst+0x4c>
		token = spi_rx();
 8001992:	f7ff fed6 	bl	8001742 <spi_rx>
 8001996:	4603      	mov	r3, r0
 8001998:	72fb      	strb	r3, [r7, #11]
		*(buffer+i) = token; // recieve data
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	7afa      	ldrb	r2, [r7, #11]
 80019a2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++){
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3301      	adds	r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	797a      	ldrb	r2, [r7, #5]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dcef      	bgt.n	8001992 <spi_read_burst+0x34>
	}

	cs_deselect(cs);
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fe35 	bl	8001624 <cs_deselect>

	return SENS_OK;
 80019ba:	2300      	movs	r3, #0

}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <reset_gnss_rx_buffer>:
#define DMA_IT_TC_JETSON_TX						DMA_IT_TCIF3
#define DMA_FLAG_TC_JETSON_TX					DMA_FLAG_TCIF3


//------------------------STATIC FUNCTIONS-------------------//
static void reset_gnss_rx_buffer(){
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
	for(int i=0; i<GNSS_BUFFER_SIZE; i++){
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	e007      	b.n	80019e0 <reset_gnss_rx_buffer+0x1c>
		GNSS_RX_BUFFER[i] = 0;
 80019d0:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <reset_gnss_rx_buffer+0x30>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<GNSS_BUFFER_SIZE; i++){
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3301      	adds	r3, #1
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b63      	cmp	r3, #99	; 0x63
 80019e4:	ddf4      	ble.n	80019d0 <reset_gnss_rx_buffer+0xc>
	}
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	2000002c 	.word	0x2000002c

080019f8 <initialise_dma_jetson>:
/* Initialise DMA for sending to JETSON
 * source: 		GlobalDataUSART_JESTON (USART3)
 * destination: USART_JESTON (USART3)
 * mode			memory to peripheral
 */
static void initialise_dma_jetson(void){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b090      	sub	sp, #64	; 0x40
 80019fc:	af00      	add	r7, sp, #0
	//todo: for transmitting data packet from memory to uart_jetson
	//DMA CONFIG
	DMA_InitTypeDef DMA_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	USART_DMACmd(USART_JETSON, USART_DMAReq_Tx, ENABLE);	//enable dma interface for this uart
 80019fe:	2201      	movs	r2, #1
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	4831      	ldr	r0, [pc, #196]	; (8001ac8 <initialise_dma_jetson+0xd0>)
 8001a04:	f7ff fa7c 	bl	8000f00 <USART_DMACmd>
	RCC_AHB1PeriphClockCmd(RCC_AHBPeriph_JETSON_DMA,ENABLE);
 8001a08:	2101      	movs	r1, #1
 8001a0a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001a0e:	f7ff f881 	bl	8000b14 <RCC_AHB1PeriphClockCmd>

	// De-initialize DMA RX & TX Stream
	DMA_DeInit(DMA_Stream_USART_JETSON_RX);
 8001a12:	482e      	ldr	r0, [pc, #184]	; (8001acc <initialise_dma_jetson+0xd4>)
 8001a14:	f7fe fc3a 	bl	800028c <DMA_DeInit>
	while (DMA_GetCmdStatus(DMA_Stream_USART_JETSON_RX ) != DISABLE) { ; }
 8001a18:	bf00      	nop
 8001a1a:	482c      	ldr	r0, [pc, #176]	; (8001acc <initialise_dma_jetson+0xd4>)
 8001a1c:	f7fe fd9a 	bl	8000554 <DMA_GetCmdStatus>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f9      	bne.n	8001a1a <initialise_dma_jetson+0x22>
	DMA_DeInit(DMA_Stream_USART_JETSON_TX);
 8001a26:	482a      	ldr	r0, [pc, #168]	; (8001ad0 <initialise_dma_jetson+0xd8>)
 8001a28:	f7fe fc30 	bl	800028c <DMA_DeInit>
	while (DMA_GetCmdStatus(DMA_Stream_USART_JETSON_TX ) != DISABLE) { ; }
 8001a2c:	bf00      	nop
 8001a2e:	4828      	ldr	r0, [pc, #160]	; (8001ad0 <initialise_dma_jetson+0xd8>)
 8001a30:	f7fe fd90 	bl	8000554 <DMA_GetCmdStatus>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f9      	bne.n	8001a2e <initialise_dma_jetson+0x36>

	//---------------------------------Memory to Peripherral Mode---------------------//
	//shared DMA configuration values:
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(USART_JETSON->DR));	//data destination
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <initialise_dma_jetson+0xdc>)
 8001a3c:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001a46:	2300      	movs	r3, #0
 8001a48:	63fb      	str	r3, [r7, #60]	; 0x3c

	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)GlobalDataUnion.GlobalDataArray;	//data source
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <initialise_dma_jetson+0xe0>)
 8001a4c:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a56:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38

	DMA_InitStructure.DMA_Channel = DMA_Channel_USART_JETSON_TX;
 8001a5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a60:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8001a62:	2340      	movs	r3, #64	; 0x40
 8001a64:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001a66:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_BufferSize = GLOBAL_DATA_BUFFER_SIZE;
 8001a6c:	237f      	movs	r3, #127	; 0x7f
 8001a6e:	617b      	str	r3, [r7, #20]

	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001a74:	2300      	movs	r3, #0
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34

	//initialise dma
	DMA_Init(DMA_Stream_USART_JETSON_TX, &DMA_InitStructure);
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4813      	ldr	r0, [pc, #76]	; (8001ad0 <initialise_dma_jetson+0xd8>)
 8001a82:	f7fe fcd7 	bl	8000434 <DMA_Init>

	// enable the TE interrupt in the NVIC
	NVIC_InitStructure.NVIC_IRQChannel = DMA_JETSON_TX_IRQn;
 8001a86:	230e      	movs	r3, #14
 8001a88:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = USART_TX_DMA_TE_Priority;
 8001a8a:	230d      	movs	r3, #13
 8001a8c:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = USART_TX_DMA_TE_Sub_Priority;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001a92:	2301      	movs	r3, #1
 8001a94:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 8001a96:	463b      	mov	r3, r7
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fb95 	bl	80001c8 <NVIC_Init>
	DMA_ITConfig(DMA_Stream_USART_JETSON_TX, DMA_IT_TE, ENABLE);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <initialise_dma_jetson+0xd8>)
 8001aa4:	f7fe fdd8 	bl	8000658 <DMA_ITConfig>
	NVIC_Init(&NVIC_InitStructure);
	DMA_ITConfig(DMA_Stream_USART_JETSON_TX, DMA_IT_TC, ENABLE);
	 */

	//------------------ START DMA -----------------------------//
	DMA_Cmd(DMA_Stream_USART_JETSON_TX, ENABLE);
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <initialise_dma_jetson+0xd8>)
 8001aac:	f7fe fd1a 	bl	80004e4 <DMA_Cmd>
	while (DMA_GetCmdStatus(DMA_Stream_USART_JETSON_TX) != ENABLE) { ; }
 8001ab0:	bf00      	nop
 8001ab2:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <initialise_dma_jetson+0xd8>)
 8001ab4:	f7fe fd4e 	bl	8000554 <DMA_GetCmdStatus>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d1f9      	bne.n	8001ab2 <initialise_dma_jetson+0xba>


}
 8001abe:	bf00      	nop
 8001ac0:	3740      	adds	r7, #64	; 0x40
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40004800 	.word	0x40004800
 8001acc:	40026028 	.word	0x40026028
 8001ad0:	40026058 	.word	0x40026058
 8001ad4:	40004804 	.word	0x40004804
 8001ad8:	200000cc 	.word	0x200000cc

08001adc <initialise_dma_gnss>:
/* Initialise DMA for receiving from GNSS
 * source: 		USART_GNSS (USART1)
 * destination: GNSS_RX_BUFFER
 * mode: 		Peripheral to memmory
 */
static void initialise_dma_gnss(void){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b090      	sub	sp, #64	; 0x40
 8001ae0:	af00      	add	r7, sp, #0
	//DMA CONFIG
	DMA_InitTypeDef DMA_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	USART_DMACmd(USART_GNSS, USART_DMAReq_Rx, ENABLE);	//enable dma interface for this uart
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2140      	movs	r1, #64	; 0x40
 8001ae6:	483a      	ldr	r0, [pc, #232]	; (8001bd0 <initialise_dma_gnss+0xf4>)
 8001ae8:	f7ff fa0a 	bl	8000f00 <USART_DMACmd>
	RCC_AHB1PeriphClockCmd(RCC_AHBPeriph_GNSS_DMA,ENABLE);
 8001aec:	2101      	movs	r1, #1
 8001aee:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001af2:	f7ff f80f 	bl	8000b14 <RCC_AHB1PeriphClockCmd>

	// De-initialize DMA RX & TX Stream
	DMA_DeInit(DMA_Stream_USART_GNSS_RX);
 8001af6:	4837      	ldr	r0, [pc, #220]	; (8001bd4 <initialise_dma_gnss+0xf8>)
 8001af8:	f7fe fbc8 	bl	800028c <DMA_DeInit>
	while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_RX ) != DISABLE) { ; }
 8001afc:	bf00      	nop
 8001afe:	4835      	ldr	r0, [pc, #212]	; (8001bd4 <initialise_dma_gnss+0xf8>)
 8001b00:	f7fe fd28 	bl	8000554 <DMA_GetCmdStatus>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f9      	bne.n	8001afe <initialise_dma_gnss+0x22>
	DMA_DeInit(DMA_Stream_USART_GNSS_TX);
 8001b0a:	4833      	ldr	r0, [pc, #204]	; (8001bd8 <initialise_dma_gnss+0xfc>)
 8001b0c:	f7fe fbbe 	bl	800028c <DMA_DeInit>
	while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_TX ) != DISABLE) { ; }
 8001b10:	bf00      	nop
 8001b12:	4831      	ldr	r0, [pc, #196]	; (8001bd8 <initialise_dma_gnss+0xfc>)
 8001b14:	f7fe fd1e 	bl	8000554 <DMA_GetCmdStatus>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f9      	bne.n	8001b12 <initialise_dma_gnss+0x36>

	//---------------------------------Perpiheral to Memory Mode---------------------//
	//shared DMA configuration values:
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(USART_GNSS->DR));	//data source
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <initialise_dma_gnss+0x100>)
 8001b20:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	63fb      	str	r3, [r7, #60]	; 0x3c

	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)GNSS_RX_BUFFER;	//data destination
 8001b2e:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <initialise_dma_gnss+0x104>)
 8001b30:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3a:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38

	DMA_InitStructure.DMA_Channel = DMA_Channel_USART_GNSS_RX;
 8001b40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b44:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001b4a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_BufferSize = GNSS_BUFFER_SIZE;
 8001b50:	2364      	movs	r3, #100	; 0x64
 8001b52:	617b      	str	r3, [r7, #20]

	#ifdef GNSS_NMEA
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
	#else
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8001b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
	#endif

	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34

	DMA_Init(DMA_Stream_USART_GNSS_RX, &DMA_InitStructure);
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	481b      	ldr	r0, [pc, #108]	; (8001bd4 <initialise_dma_gnss+0xf8>)
 8001b68:	f7fe fc64 	bl	8000434 <DMA_Init>


	// enable the TE interrupt in the NVIC
	NVIC_InitStructure.NVIC_IRQChannel = DMA_GNSS_RX_IRQn;
 8001b6c:	233a      	movs	r3, #58	; 0x3a
 8001b6e:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = USART_RX_DMA_TE_Priority;
 8001b70:	230d      	movs	r3, #13
 8001b72:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = USART_RX_DMA_TE_Sub_Priority;
 8001b74:	2300      	movs	r3, #0
 8001b76:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fb22 	bl	80001c8 <NVIC_Init>
	DMA_ITConfig(DMA_Stream_USART_GNSS_RX, DMA_IT_TE, ENABLE);
 8001b84:	2201      	movs	r2, #1
 8001b86:	2104      	movs	r1, #4
 8001b88:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <initialise_dma_gnss+0xf8>)
 8001b8a:	f7fe fd65 	bl	8000658 <DMA_ITConfig>

#ifndef GNSS_NMEA
	//enable the DMA TC interrupt
	NVIC_InitStructure.NVIC_IRQChannel = DMA_GNSS_RX_IRQn;
 8001b8e:	233a      	movs	r3, #58	; 0x3a
 8001b90:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = USART_RX_DMA_TC_Priority;
 8001b92:	230c      	movs	r3, #12
 8001b94:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = USART_RX_DMA_TC_Sub_Priority;
 8001b96:	2300      	movs	r3, #0
 8001b98:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fb11 	bl	80001c8 <NVIC_Init>
	DMA_ITConfig(DMA_Stream_USART_GNSS_RX, DMA_IT_TC, ENABLE);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2110      	movs	r1, #16
 8001baa:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <initialise_dma_gnss+0xf8>)
 8001bac:	f7fe fd54 	bl	8000658 <DMA_ITConfig>

#endif

	//------------------ START DMA -----------------------------//

	DMA_Cmd(DMA_Stream_USART_GNSS_RX, ENABLE);
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4808      	ldr	r0, [pc, #32]	; (8001bd4 <initialise_dma_gnss+0xf8>)
 8001bb4:	f7fe fc96 	bl	80004e4 <DMA_Cmd>
	while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_RX ) != ENABLE) { ; }
 8001bb8:	bf00      	nop
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <initialise_dma_gnss+0xf8>)
 8001bbc:	f7fe fcca 	bl	8000554 <DMA_GetCmdStatus>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d1f9      	bne.n	8001bba <initialise_dma_gnss+0xde>
}
 8001bc6:	bf00      	nop
 8001bc8:	3740      	adds	r7, #64	; 0x40
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	40026440 	.word	0x40026440
 8001bd8:	400264b8 	.word	0x400264b8
 8001bdc:	40011004 	.word	0x40011004
 8001be0:	2000002c 	.word	0x2000002c

08001be4 <initialise_uart_jetson>:

static void initialise_uart_jetson(){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Enable USART_JETSON clock */
	RCC_APB1PeriphClockCmd(RCC_APBPeriph_USART_JETSON, ENABLE);
 8001bea:	2101      	movs	r1, #1
 8001bec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001bf0:	f7fe ffb0 	bl	8000b54 <RCC_APB1PeriphClockCmd>
	/* Enable GPIO clock for USART_JETSON pins */
	RCC_AHB1PeriphClockCmd(RCC_AHBPeriph_USART_JETSON, ENABLE);
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	2008      	movs	r0, #8
 8001bf8:	f7fe ff8c 	bl	8000b14 <RCC_AHB1PeriphClockCmd>

	/*----------USART3 GPIO Configuration -------------------------------*/

	/* Configure USART3 pins: TX & RX */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001c00:	2300      	movs	r3, #0
 8001c02:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	777b      	strb	r3, [r7, #29]

	// USART TX pin configuration
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART_JETSON_TX;	//pin 8
 8001c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c10:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIO_USART_JETSON, &GPIO_InitStructure);
 8001c12:	f107 0318 	add.w	r3, r7, #24
 8001c16:	4619      	mov	r1, r3
 8001c18:	4819      	ldr	r0, [pc, #100]	; (8001c80 <initialise_uart_jetson+0x9c>)
 8001c1a:	f7fe fddd 	bl	80007d8 <GPIO_Init>

	// USART RX pin configuration
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART_JETSON_RX; 	//pin 9
 8001c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c22:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIO_USART_JETSON, &GPIO_InitStructure);
 8001c24:	f107 0318 	add.w	r3, r7, #24
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4815      	ldr	r0, [pc, #84]	; (8001c80 <initialise_uart_jetson+0x9c>)
 8001c2c:	f7fe fdd4 	bl	80007d8 <GPIO_Init>

	// Connect USART pins to AF
	GPIO_PinAFConfig(GPIO_USART_JETSON, GPIO_Pin_USART_JETSON_TX_Src, GPIO_AF_USART_JETSON); //
 8001c30:	2207      	movs	r2, #7
 8001c32:	2108      	movs	r1, #8
 8001c34:	4812      	ldr	r0, [pc, #72]	; (8001c80 <initialise_uart_jetson+0x9c>)
 8001c36:	f7fe fe7b 	bl	8000930 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIO_USART_JETSON, GPIO_Pin_USART_JETSON_RX_Src, GPIO_AF_USART_JETSON);
 8001c3a:	2207      	movs	r2, #7
 8001c3c:	2109      	movs	r1, #9
 8001c3e:	4810      	ldr	r0, [pc, #64]	; (8001c80 <initialise_uart_jetson+0x9c>)
 8001c40:	f7fe fe76 	bl	8000930 <GPIO_PinAFConfig>

	/* -------------USART3 configuration-------------------- */
	USART_InitStructure.USART_Mode = USART_Mode_Tx|USART_Mode_Rx;
 8001c44:	230c      	movs	r3, #12
 8001c46:	827b      	strh	r3, [r7, #18]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8001c50:	2300      	movs	r3, #0
 8001c52:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_BaudRate = USART_BaudRate_JETSON;
 8001c54:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001c58:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	82bb      	strh	r3, [r7, #20]
	USART_Init(USART_JETSON, &USART_InitStructure);
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	4619      	mov	r1, r3
 8001c64:	4807      	ldr	r0, [pc, #28]	; (8001c84 <initialise_uart_jetson+0xa0>)
 8001c66:	f7ff f871 	bl	8000d4c <USART_Init>

	//Enable UART 1
	USART_Cmd(USART_JETSON, ENABLE);
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	4805      	ldr	r0, [pc, #20]	; (8001c84 <initialise_uart_jetson+0xa0>)
 8001c6e:	f7ff f927 	bl	8000ec0 <USART_Cmd>

	initialise_dma_jetson();
 8001c72:	f7ff fec1 	bl	80019f8 <initialise_dma_jetson>

}
 8001c76:	bf00      	nop
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40020c00 	.word	0x40020c00
 8001c84:	40004800 	.word	0x40004800

08001c88 <initialise_uart_gnss>:

static void initialise_uart_gnss(){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
	reset_gnss_rx_buffer();
 8001c8e:	f7ff fe99 	bl	80019c4 <reset_gnss_rx_buffer>
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Enable USART clock */
	RCC_APB2PeriphClockCmd(RCC_APBPeriph_USART_GNSS, ENABLE);
 8001c92:	2101      	movs	r1, #1
 8001c94:	2010      	movs	r0, #16
 8001c96:	f7fe ff7d 	bl	8000b94 <RCC_APB2PeriphClockCmd>
	/* Enable GPIO clock for USART pins */
	RCC_AHB1PeriphClockCmd(RCC_AHBPeriph_USART_GNSS, ENABLE);
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	f7fe ff39 	bl	8000b14 <RCC_AHB1PeriphClockCmd>

	/*----------USART 1 GPIO Configuration -------------------------------*/

	/* Configure USART pins: TX & RX */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	777b      	strb	r3, [r7, #29]

	// USART TX pin configuration
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART_GNSS_TX;	//pin 6
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIO_USART_GNSS, &GPIO_InitStructure);
 8001cb6:	f107 0318 	add.w	r3, r7, #24
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4818      	ldr	r0, [pc, #96]	; (8001d20 <initialise_uart_gnss+0x98>)
 8001cbe:	f7fe fd8b 	bl	80007d8 <GPIO_Init>

	// USART RX pin configuration
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART_GNSS_RX; 	//pin7
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIO_USART_GNSS, &GPIO_InitStructure);
 8001cc6:	f107 0318 	add.w	r3, r7, #24
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4814      	ldr	r0, [pc, #80]	; (8001d20 <initialise_uart_gnss+0x98>)
 8001cce:	f7fe fd83 	bl	80007d8 <GPIO_Init>

	// Connect USART pins to AF
	GPIO_PinAFConfig(GPIO_USART_GNSS, GPIO_Pin_USART_GNSS_TX_Src, GPIO_AF_USART_GNSS); //
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	2106      	movs	r1, #6
 8001cd6:	4812      	ldr	r0, [pc, #72]	; (8001d20 <initialise_uart_gnss+0x98>)
 8001cd8:	f7fe fe2a 	bl	8000930 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIO_USART_GNSS, GPIO_Pin_USART_GNSS_RX_Src, GPIO_AF_USART_GNSS);
 8001cdc:	2207      	movs	r2, #7
 8001cde:	2107      	movs	r1, #7
 8001ce0:	480f      	ldr	r0, [pc, #60]	; (8001d20 <initialise_uart_gnss+0x98>)
 8001ce2:	f7fe fe25 	bl	8000930 <GPIO_PinAFConfig>

	/* -------------USART 1 configuration-------------------- */
	USART_InitStructure.USART_Mode = USART_Mode_Tx|USART_Mode_Rx;
 8001ce6:	230c      	movs	r3, #12
 8001ce8:	827b      	strh	r3, [r7, #18]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001cea:	2300      	movs	r3, #0
 8001cec:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_BaudRate = USART_BaudRate_USART_GNSS;
 8001cf6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001cfa:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	82bb      	strh	r3, [r7, #20]
	USART_Init(USART_GNSS, &USART_InitStructure);
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	4619      	mov	r1, r3
 8001d06:	4807      	ldr	r0, [pc, #28]	; (8001d24 <initialise_uart_gnss+0x9c>)
 8001d08:	f7ff f820 	bl	8000d4c <USART_Init>
	USART_ITConfig(USART_GNSS, USART_IT_IDLE, ENABLE);

#endif

	//Enable UART 1
	USART_Cmd(USART_GNSS, ENABLE);
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <initialise_uart_gnss+0x9c>)
 8001d10:	f7ff f8d6 	bl	8000ec0 <USART_Cmd>

	initialise_dma_gnss();
 8001d14:	f7ff fee2 	bl	8001adc <initialise_dma_gnss>
}
 8001d18:	bf00      	nop
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40020400 	.word	0x40020400
 8001d24:	40011000 	.word	0x40011000

08001d28 <uart_initialise>:

//--------------------------PUBLIC FUNCTIONS---------------------------------//

void uart_initialise(){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	initialise_uart_gnss();
 8001d2c:	f7ff ffac 	bl	8001c88 <initialise_uart_gnss>
	initialise_uart_jetson();
 8001d30:	f7ff ff58 	bl	8001be4 <initialise_uart_jetson>
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <uart_send_to_jetson>:



/*send globa data packet to jetson over uart*/
UART_StatusTypeDef uart_send_to_jetson(){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
	//GlobalData.start_token = '$';

	//populate global data union
	GlobalDataUnion.GlobalDataStruct.start_token = '$';
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <uart_send_to_jetson+0xa8>)
 8001d40:	2224      	movs	r2, #36	; 0x24
 8001d42:	701a      	strb	r2, [r3, #0]
	if(sensor_read_all() != SENS_OK)
 8001d44:	f7ff fb70 	bl	8001428 <sensor_read_all>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <uart_send_to_jetson+0x1a>
		return UART_SEND_ERROR;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e042      	b.n	8001dd8 <uart_send_to_jetson+0xa0>

	if(gnss_read_new_data() != GNSS_OK)
 8001d52:	f7ff fc3f 	bl	80015d4 <gnss_read_new_data>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <uart_send_to_jetson+0x28>
		return UART_SEND_ERROR;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e03b      	b.n	8001dd8 <uart_send_to_jetson+0xa0>

	uint16_t counter = DMA_GetCurrDataCounter(DMA_Stream_USART_JETSON_TX);
 8001d60:	4820      	ldr	r0, [pc, #128]	; (8001de4 <uart_send_to_jetson+0xac>)
 8001d62:	f7fe fbea 	bl	800053a <DMA_GetCurrDataCounter>
 8001d66:	4603      	mov	r3, r0
 8001d68:	80fb      	strh	r3, [r7, #6]
	FlagStatus flag = DMA_GetFlagStatus(DMA_Stream_USART_JETSON_TX, DMA_FLAG_TC_JETSON_TX);
 8001d6a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
 8001d6e:	481d      	ldr	r0, [pc, #116]	; (8001de4 <uart_send_to_jetson+0xac>)
 8001d70:	f7fe fc08 	bl	8000584 <DMA_GetFlagStatus>
 8001d74:	4603      	mov	r3, r0
 8001d76:	717b      	strb	r3, [r7, #5]
	FunctionalState status = DMA_GetCmdStatus(DMA_Stream_USART_JETSON_TX);
 8001d78:	481a      	ldr	r0, [pc, #104]	; (8001de4 <uart_send_to_jetson+0xac>)
 8001d7a:	f7fe fbeb 	bl	8000554 <DMA_GetCmdStatus>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	713b      	strb	r3, [r7, #4]

	if(DMA_GetFlagStatus(DMA_Stream_USART_JETSON_TX, DMA_FLAG_TC_JETSON_TX)){
 8001d82:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
 8001d86:	4817      	ldr	r0, [pc, #92]	; (8001de4 <uart_send_to_jetson+0xac>)
 8001d88:	f7fe fbfc 	bl	8000584 <DMA_GetFlagStatus>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d01f      	beq.n	8001dd2 <uart_send_to_jetson+0x9a>

		//disable the dma
		DMA_Cmd(DMA_Stream_USART_JETSON_TX, DISABLE);
 8001d92:	2100      	movs	r1, #0
 8001d94:	4813      	ldr	r0, [pc, #76]	; (8001de4 <uart_send_to_jetson+0xac>)
 8001d96:	f7fe fba5 	bl	80004e4 <DMA_Cmd>
		while(DMA_GetCmdStatus(DMA_Stream_USART_JETSON_TX) != DISABLE){;}
 8001d9a:	bf00      	nop
 8001d9c:	4811      	ldr	r0, [pc, #68]	; (8001de4 <uart_send_to_jetson+0xac>)
 8001d9e:	f7fe fbd9 	bl	8000554 <DMA_GetCmdStatus>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f9      	bne.n	8001d9c <uart_send_to_jetson+0x64>

		//clear dma tc flag
		DMA_ClearFlag(DMA_Stream_USART_JETSON_TX, DMA_FLAG_TC_JETSON_TX);
 8001da8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
 8001dac:	480d      	ldr	r0, [pc, #52]	; (8001de4 <uart_send_to_jetson+0xac>)
 8001dae:	f7fe fc25 	bl	80005fc <DMA_ClearFlag>
		//DMA_ClearITPendingBit(DMA_Stream_USART_JETSON_TX, DMA_IT_TC_JETSON_TX);

		//reset the dma & enable
		DMA_SetCurrDataCounter(DMA_Stream_USART_JETSON_TX, GLOBAL_DATA_BUFFER_SIZE);
 8001db2:	217f      	movs	r1, #127	; 0x7f
 8001db4:	480b      	ldr	r0, [pc, #44]	; (8001de4 <uart_send_to_jetson+0xac>)
 8001db6:	f7fe fbb1 	bl	800051c <DMA_SetCurrDataCounter>
		DMA_Cmd(DMA_Stream_USART_JETSON_TX, ENABLE);
 8001dba:	2101      	movs	r1, #1
 8001dbc:	4809      	ldr	r0, [pc, #36]	; (8001de4 <uart_send_to_jetson+0xac>)
 8001dbe:	f7fe fb91 	bl	80004e4 <DMA_Cmd>
		while(DMA_GetCmdStatus(DMA_Stream_USART_JETSON_TX) != ENABLE){;}
 8001dc2:	bf00      	nop
 8001dc4:	4807      	ldr	r0, [pc, #28]	; (8001de4 <uart_send_to_jetson+0xac>)
 8001dc6:	f7fe fbc5 	bl	8000554 <DMA_GetCmdStatus>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d1f9      	bne.n	8001dc4 <uart_send_to_jetson+0x8c>
 8001dd0:	e001      	b.n	8001dd6 <uart_send_to_jetson+0x9e>


	}
	else{
		return UART_SEND_ERROR;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e000      	b.n	8001dd8 <uart_send_to_jetson+0xa0>
	}

	return UART_OK;
 8001dd6:	2300      	movs	r3, #0

}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200000cc 	.word	0x200000cc
 8001de4:	40026058 	.word	0x40026058

08001de8 <DMA1_Stream3_IRQHandler>:
}


//---------------------------------------INTERRUPT HANDLERS-----------------------------------///

void DMA_JETSON_TX_IRQHandler(void){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

	/*transfer complete*/
	if(DMA_GetITStatus(DMA_Stream_USART_JETSON_TX, DMA_IT_TC_JETSON_TX)){
 8001dec:	490b      	ldr	r1, [pc, #44]	; (8001e1c <DMA1_Stream3_IRQHandler+0x34>)
 8001dee:	480c      	ldr	r0, [pc, #48]	; (8001e20 <DMA1_Stream3_IRQHandler+0x38>)
 8001df0:	f7fe fc6c 	bl	80006cc <DMA_GetITStatus>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <DMA1_Stream3_IRQHandler+0x1a>
		DMA_ClearITPendingBit(DMA_Stream_USART_JETSON_TX, DMA_IT_TC_JETSON_TX);
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <DMA1_Stream3_IRQHandler+0x34>)
 8001dfc:	4808      	ldr	r0, [pc, #32]	; (8001e20 <DMA1_Stream3_IRQHandler+0x38>)
 8001dfe:	f7fe fcbd 	bl	800077c <DMA_ClearITPendingBit>
	}

	/*transfer error*/
	if(DMA_GetITStatus(DMA_Stream_USART_JETSON_TX, DMA_IT_TE)){
 8001e02:	2104      	movs	r1, #4
 8001e04:	4806      	ldr	r0, [pc, #24]	; (8001e20 <DMA1_Stream3_IRQHandler+0x38>)
 8001e06:	f7fe fc61 	bl	80006cc <DMA_GetITStatus>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <DMA1_Stream3_IRQHandler+0x30>
		DMA_ClearITPendingBit(DMA_Stream_USART_JETSON_TX, DMA_IT_TE);
 8001e10:	2104      	movs	r1, #4
 8001e12:	4803      	ldr	r0, [pc, #12]	; (8001e20 <DMA1_Stream3_IRQHandler+0x38>)
 8001e14:	f7fe fcb2 	bl	800077c <DMA_ClearITPendingBit>
	}

}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	18008000 	.word	0x18008000
 8001e20:	40026058 	.word	0x40026058

08001e24 <DMA2_Stream2_IRQHandler>:


//DMA UART TO MEM INTERRUPTS
void DMA_GNSS_RX_IRQHandler(void){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0

#ifndef GNSS_NMEA
	/*transfer complete*/
	if(DMA_GetITStatus(DMA_Stream_USART_GNSS_RX, DMA_IT_TC_GNSS_RX)){
 8001e28:	490d      	ldr	r1, [pc, #52]	; (8001e60 <DMA2_Stream2_IRQHandler+0x3c>)
 8001e2a:	480e      	ldr	r0, [pc, #56]	; (8001e64 <DMA2_Stream2_IRQHandler+0x40>)
 8001e2c:	f7fe fc4e 	bl	80006cc <DMA_GetITStatus>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00e      	beq.n	8001e54 <DMA2_Stream2_IRQHandler+0x30>

		//reset DMA stream
		DMA_Cmd(DMA_Stream_USART_GNSS_RX, ENABLE);
 8001e36:	2101      	movs	r1, #1
 8001e38:	480a      	ldr	r0, [pc, #40]	; (8001e64 <DMA2_Stream2_IRQHandler+0x40>)
 8001e3a:	f7fe fb53 	bl	80004e4 <DMA_Cmd>
		while(DMA_GetCmdStatus(DMA_Stream_USART_GNSS_RX) != ENABLE){;}
 8001e3e:	bf00      	nop
 8001e40:	4808      	ldr	r0, [pc, #32]	; (8001e64 <DMA2_Stream2_IRQHandler+0x40>)
 8001e42:	f7fe fb87 	bl	8000554 <DMA_GetCmdStatus>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d1f9      	bne.n	8001e40 <DMA2_Stream2_IRQHandler+0x1c>

		/* Clear DMA Stream Transfer Complete interrupt pending bit */
		DMA_ClearITPendingBit(DMA_Stream_USART_GNSS_RX, DMA_IT_TC_GNSS_RX);
 8001e4c:	4904      	ldr	r1, [pc, #16]	; (8001e60 <DMA2_Stream2_IRQHandler+0x3c>)
 8001e4e:	4805      	ldr	r0, [pc, #20]	; (8001e64 <DMA2_Stream2_IRQHandler+0x40>)
 8001e50:	f7fe fc94 	bl	800077c <DMA_ClearITPendingBit>
	}
#endif
	/*transfer error*/
	if(DMA_GetITStatus(DMA_Stream_USART_GNSS_RX, DMA_IT_TE)){
 8001e54:	2104      	movs	r1, #4
 8001e56:	4803      	ldr	r0, [pc, #12]	; (8001e64 <DMA2_Stream2_IRQHandler+0x40>)
 8001e58:	f7fe fc38 	bl	80006cc <DMA_GetITStatus>
		//int a = 1;
	}


}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	10208000 	.word	0x10208000
 8001e64:	40026440 	.word	0x40026440

08001e68 <__libc_init_array>:
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	4e0d      	ldr	r6, [pc, #52]	; (8001ea0 <__libc_init_array+0x38>)
 8001e6c:	4c0d      	ldr	r4, [pc, #52]	; (8001ea4 <__libc_init_array+0x3c>)
 8001e6e:	1ba4      	subs	r4, r4, r6
 8001e70:	10a4      	asrs	r4, r4, #2
 8001e72:	2500      	movs	r5, #0
 8001e74:	42a5      	cmp	r5, r4
 8001e76:	d109      	bne.n	8001e8c <__libc_init_array+0x24>
 8001e78:	4e0b      	ldr	r6, [pc, #44]	; (8001ea8 <__libc_init_array+0x40>)
 8001e7a:	4c0c      	ldr	r4, [pc, #48]	; (8001eac <__libc_init_array+0x44>)
 8001e7c:	f000 f818 	bl	8001eb0 <_init>
 8001e80:	1ba4      	subs	r4, r4, r6
 8001e82:	10a4      	asrs	r4, r4, #2
 8001e84:	2500      	movs	r5, #0
 8001e86:	42a5      	cmp	r5, r4
 8001e88:	d105      	bne.n	8001e96 <__libc_init_array+0x2e>
 8001e8a:	bd70      	pop	{r4, r5, r6, pc}
 8001e8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e90:	4798      	blx	r3
 8001e92:	3501      	adds	r5, #1
 8001e94:	e7ee      	b.n	8001e74 <__libc_init_array+0xc>
 8001e96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e9a:	4798      	blx	r3
 8001e9c:	3501      	adds	r5, #1
 8001e9e:	e7f2      	b.n	8001e86 <__libc_init_array+0x1e>
 8001ea0:	08001ec8 	.word	0x08001ec8
 8001ea4:	08001ec8 	.word	0x08001ec8
 8001ea8:	08001ec8 	.word	0x08001ec8
 8001eac:	08001ecc 	.word	0x08001ecc

08001eb0 <_init>:
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	bf00      	nop
 8001eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb6:	bc08      	pop	{r3}
 8001eb8:	469e      	mov	lr, r3
 8001eba:	4770      	bx	lr

08001ebc <_fini>:
 8001ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ebe:	bf00      	nop
 8001ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ec2:	bc08      	pop	{r3}
 8001ec4:	469e      	mov	lr, r3
 8001ec6:	4770      	bx	lr
