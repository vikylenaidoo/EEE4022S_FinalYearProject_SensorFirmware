
DIMA_SensorBoard_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001280  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001408  08001410  00011410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001408  08001408  00011408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800140c  0800140c  0001140c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00011410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00011410  2**0
                  CONTENTS
  7 .bss          0000083c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000083c  2000083c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00011410  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004f71  00000000  00000000  00011440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000109e  00000000  00000000  000163b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000698  00000000  00000000  00017450  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005e0  00000000  00000000  00017ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000025af  00000000  00000000  000180c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000239b  00000000  00000000  0001a677  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001ca12  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ac0  00000000  00000000  0001ca90  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001e550  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080013f0 	.word	0x080013f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080013f0 	.word	0x080013f0

080001c8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80001d4:	78fb      	ldrb	r3, [r7, #3]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d006      	beq.n	80001e8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f043 0201 	orr.w	r2, r3, #1
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80001e6:	e005      	b.n	80001f4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f023 0201 	bic.w	r2, r3, #1
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	601a      	str	r2, [r3, #0]
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	460b      	mov	r3, r1
 800020a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 800020c:	887a      	ldrh	r2, [r7, #2]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	605a      	str	r2, [r3, #4]
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800021e:	b480      	push	{r7}
 8000220:	b083      	sub	sp, #12
 8000222:	af00      	add	r7, sp, #0
 8000224:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	685b      	ldr	r3, [r3, #4]
 800022a:	b29b      	uxth	r3, r3
}
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr

08000238 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000240:	2300      	movs	r3, #0
 8000242:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d002      	beq.n	8000256 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000250:	2301      	movs	r3, #1
 8000252:	73fb      	strb	r3, [r7, #15]
 8000254:	e001      	b.n	800025a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000256:	2300      	movs	r3, #0
 8000258:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800025a:	7bfb      	ldrb	r3, [r7, #15]
}
 800025c:	4618      	mov	r0, r3
 800025e:	3714      	adds	r7, #20
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr

08000268 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000268:	b480      	push	{r7}
 800026a:	b087      	sub	sp, #28
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000272:	2300      	movs	r3, #0
 8000274:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4a15      	ldr	r2, [pc, #84]	; (80002d4 <DMA_GetFlagStatus+0x6c>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d802      	bhi.n	8000288 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000282:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <DMA_GetFlagStatus+0x70>)
 8000284:	613b      	str	r3, [r7, #16]
 8000286:	e001      	b.n	800028c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <DMA_GetFlagStatus+0x74>)
 800028a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000292:	2b00      	cmp	r3, #0
 8000294:	d003      	beq.n	800029e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	60fb      	str	r3, [r7, #12]
 800029c:	e002      	b.n	80002a4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800029e:	693b      	ldr	r3, [r7, #16]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80002aa:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80002ae:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80002b0:	68fa      	ldr	r2, [r7, #12]
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	4013      	ands	r3, r2
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d002      	beq.n	80002c0 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80002ba:	2301      	movs	r3, #1
 80002bc:	75fb      	strb	r3, [r7, #23]
 80002be:	e001      	b.n	80002c4 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80002c0:	2300      	movs	r3, #0
 80002c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80002c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	371c      	adds	r7, #28
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	4002640f 	.word	0x4002640f
 80002d8:	40026000 	.word	0x40026000
 80002dc:	40026400 	.word	0x40026400

080002e0 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a10      	ldr	r2, [pc, #64]	; (8000330 <DMA_ClearFlag+0x50>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d802      	bhi.n	80002f8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <DMA_ClearFlag+0x54>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e001      	b.n	80002fc <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <DMA_ClearFlag+0x58>)
 80002fa:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000302:	2b00      	cmp	r3, #0
 8000304:	d007      	beq.n	8000316 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800030c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000310:	68fa      	ldr	r2, [r7, #12]
 8000312:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000314:	e006      	b.n	8000324 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800031c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000320:	68fa      	ldr	r2, [r7, #12]
 8000322:	6093      	str	r3, [r2, #8]
}
 8000324:	bf00      	nop
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	4002640f 	.word	0x4002640f
 8000334:	40026000 	.word	0x40026000
 8000338:	40026400 	.word	0x40026400

0800033c <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800033c:	b480      	push	{r7}
 800033e:	b087      	sub	sp, #28
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8000346:	2300      	movs	r3, #0
 8000348:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	2300      	movs	r3, #0
 8000350:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a22      	ldr	r2, [pc, #136]	; (80003e0 <DMA_GetITStatus+0xa4>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d802      	bhi.n	8000360 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <DMA_GetITStatus+0xa8>)
 800035c:	613b      	str	r3, [r7, #16]
 800035e:	e001      	b.n	8000364 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000360:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <DMA_GetITStatus+0xac>)
 8000362:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800036a:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 800036e:	2b00      	cmp	r3, #0
 8000370:	d00a      	beq.n	8000388 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	0adb      	lsrs	r3, r3, #11
 8000376:	f003 031e 	and.w	r3, r3, #30
 800037a:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	4013      	ands	r3, r2
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	e004      	b.n	8000392 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000390:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d003      	beq.n	80003a4 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	e002      	b.n	80003aa <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003b0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003b4:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80003b6:	68fa      	ldr	r2, [r7, #12]
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	4013      	ands	r3, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d005      	beq.n	80003cc <DMA_GetITStatus+0x90>
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d002      	beq.n	80003cc <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 80003c6:	2301      	movs	r3, #1
 80003c8:	75fb      	strb	r3, [r7, #23]
 80003ca:	e001      	b.n	80003d0 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 80003cc:	2300      	movs	r3, #0
 80003ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 80003d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	371c      	adds	r7, #28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	4002640f 	.word	0x4002640f
 80003e4:	40026000 	.word	0x40026000
 80003e8:	40026400 	.word	0x40026400

080003ec <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a10      	ldr	r2, [pc, #64]	; (800043c <DMA_ClearITPendingBit+0x50>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d802      	bhi.n	8000404 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <DMA_ClearITPendingBit+0x54>)
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	e001      	b.n	8000408 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <DMA_ClearITPendingBit+0x58>)
 8000406:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800040e:	2b00      	cmp	r3, #0
 8000410:	d007      	beq.n	8000422 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000418:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8000420:	e006      	b.n	8000430 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000428:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800042c:	68fa      	ldr	r2, [r7, #12]
 800042e:	6093      	str	r3, [r2, #8]
}
 8000430:	bf00      	nop
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	4002640f 	.word	0x4002640f
 8000440:	40026000 	.word	0x40026000
 8000444:	40026400 	.word	0x40026400

08000448 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000448:	b480      	push	{r7}
 800044a:	b087      	sub	sp, #28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
 8000456:	2300      	movs	r3, #0
 8000458:	613b      	str	r3, [r7, #16]
 800045a:	2300      	movs	r3, #0
 800045c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]
 8000462:	e076      	b.n	8000552 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000464:	2201      	movs	r2, #1
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	fa02 f303 	lsl.w	r3, r2, r3
 800046c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	693b      	ldr	r3, [r7, #16]
 8000474:	4013      	ands	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000478:	68fa      	ldr	r2, [r7, #12]
 800047a:	693b      	ldr	r3, [r7, #16]
 800047c:	429a      	cmp	r2, r3
 800047e:	d165      	bne.n	800054c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	2103      	movs	r1, #3
 800048a:	fa01 f303 	lsl.w	r3, r1, r3
 800048e:	43db      	mvns	r3, r3
 8000490:	401a      	ands	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	791b      	ldrb	r3, [r3, #4]
 800049e:	4619      	mov	r1, r3
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	fa01 f303 	lsl.w	r3, r1, r3
 80004a8:	431a      	orrs	r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	791b      	ldrb	r3, [r3, #4]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d003      	beq.n	80004be <GPIO_Init+0x76>
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d12e      	bne.n	800051c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	689a      	ldr	r2, [r3, #8]
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	2103      	movs	r1, #3
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	43db      	mvns	r3, r3
 80004ce:	401a      	ands	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	689a      	ldr	r2, [r3, #8]
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	795b      	ldrb	r3, [r3, #5]
 80004dc:	4619      	mov	r1, r3
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	431a      	orrs	r2, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	685a      	ldr	r2, [r3, #4]
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	4619      	mov	r1, r3
 80004f6:	2301      	movs	r3, #1
 80004f8:	408b      	lsls	r3, r1
 80004fa:	43db      	mvns	r3, r3
 80004fc:	401a      	ands	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	683a      	ldr	r2, [r7, #0]
 8000508:	7992      	ldrb	r2, [r2, #6]
 800050a:	4611      	mov	r1, r2
 800050c:	697a      	ldr	r2, [r7, #20]
 800050e:	b292      	uxth	r2, r2
 8000510:	fa01 f202 	lsl.w	r2, r1, r2
 8000514:	b292      	uxth	r2, r2
 8000516:	431a      	orrs	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	68da      	ldr	r2, [r3, #12]
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	b29b      	uxth	r3, r3
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	2103      	movs	r1, #3
 8000528:	fa01 f303 	lsl.w	r3, r1, r3
 800052c:	43db      	mvns	r3, r3
 800052e:	401a      	ands	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	68da      	ldr	r2, [r3, #12]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	79db      	ldrb	r3, [r3, #7]
 800053c:	4619      	mov	r1, r3
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	fa01 f303 	lsl.w	r3, r1, r3
 8000546:	431a      	orrs	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	3301      	adds	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d985      	bls.n	8000464 <GPIO_Init+0x1c>
    }
  }
}
 8000558:	bf00      	nop
 800055a:	371c      	adds	r7, #28
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	887a      	ldrh	r2, [r7, #2]
 8000574:	831a      	strh	r2, [r3, #24]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	460b      	mov	r3, r1
 800058c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	887a      	ldrh	r2, [r7, #2]
 8000592:	835a      	strh	r2, [r3, #26]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	807b      	strh	r3, [r7, #2]
 80005ac:	4613      	mov	r3, r2
 80005ae:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005b8:	787a      	ldrb	r2, [r7, #1]
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	f003 0307 	and.w	r3, r3, #7
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005c8:	887b      	ldrh	r3, [r7, #2]
 80005ca:	08db      	lsrs	r3, r3, #3
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	4618      	mov	r0, r3
 80005d0:	887b      	ldrh	r3, [r7, #2]
 80005d2:	08db      	lsrs	r3, r3, #3
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3208      	adds	r2, #8
 80005dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005e0:	887b      	ldrh	r3, [r7, #2]
 80005e2:	f003 0307 	and.w	r3, r3, #7
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	210f      	movs	r1, #15
 80005ea:	fa01 f303 	lsl.w	r3, r1, r3
 80005ee:	43db      	mvns	r3, r3
 80005f0:	ea02 0103 	and.w	r1, r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f100 0208 	add.w	r2, r0, #8
 80005fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80005fe:	887b      	ldrh	r3, [r7, #2]
 8000600:	08db      	lsrs	r3, r3, #3
 8000602:	b29b      	uxth	r3, r3
 8000604:	461a      	mov	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3208      	adds	r2, #8
 800060a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4313      	orrs	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000614:	887b      	ldrh	r3, [r7, #2]
 8000616:	08db      	lsrs	r3, r3, #3
 8000618:	b29b      	uxth	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3208      	adds	r2, #8
 8000620:	68b9      	ldr	r1, [r7, #8]
 8000622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000646:	490a      	ldr	r1, [pc, #40]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 800064a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4313      	orrs	r3, r2
 8000650:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000652:	e006      	b.n	8000662 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000654:	4906      	ldr	r1, [pc, #24]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	43db      	mvns	r3, r3
 800065e:	4013      	ands	r3, r2
 8000660:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800

08000674 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000680:	78fb      	ldrb	r3, [r7, #3]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d006      	beq.n	8000694 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000686:	490a      	ldr	r1, [pc, #40]	; (80006b0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <RCC_APB2PeriphClockCmd+0x3c>)
 800068a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4313      	orrs	r3, r2
 8000690:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000692:	e006      	b.n	80006a2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000694:	4906      	ldr	r1, [pc, #24]	; (80006b0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	43db      	mvns	r3, r3
 800069e:	4013      	ands	r3, r2
 80006a0:	644b      	str	r3, [r1, #68]	; 0x44
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800

080006b4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80006c8:	89fb      	ldrh	r3, [r7, #14]
 80006ca:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80006ce:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	881a      	ldrh	r2, [r3, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	885b      	ldrh	r3, [r3, #2]
 80006d8:	4313      	orrs	r3, r2
 80006da:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000700:	4313      	orrs	r3, r2
 8000702:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000708:	4313      	orrs	r3, r2
 800070a:	b29a      	uxth	r2, r3
 800070c:	89fb      	ldrh	r3, [r7, #14]
 800070e:	4313      	orrs	r3, r2
 8000710:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	89fa      	ldrh	r2, [r7, #14]
 8000716:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	8b9b      	ldrh	r3, [r3, #28]
 800071c:	b29b      	uxth	r3, r3
 800071e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000722:	b29a      	uxth	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	8a1a      	ldrh	r2, [r3, #16]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	821a      	strh	r2, [r3, #16]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d008      	beq.n	8000760 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	b29b      	uxth	r3, r3
 8000754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000758:	b29a      	uxth	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 800075e:	e007      	b.n	8000770 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	b29b      	uxth	r3, r3
 8000766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800076a:	b29a      	uxth	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	801a      	strh	r2, [r3, #0]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	899b      	ldrh	r3, [r3, #12]
 8000788:	b29b      	uxth	r3, r3
}
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	460b      	mov	r3, r1
 80007a0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	887a      	ldrh	r2, [r7, #2]
 80007a6:	819a      	strh	r2, [r3, #12]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d008      	beq.n	80007d8 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
  }
}
 80007d6:	e007      	b.n	80007e8 <SPI_CalculateCRC+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	801a      	strh	r2, [r3, #0]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	891b      	ldrh	r3, [r3, #8]
 8000808:	b29a      	uxth	r2, r3
 800080a:	887b      	ldrh	r3, [r7, #2]
 800080c:	4013      	ands	r3, r2
 800080e:	b29b      	uxth	r3, r3
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000814:	2301      	movs	r3, #1
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e001      	b.n	800081e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800081e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	889b      	ldrh	r3, [r3, #4]
 8000838:	b29b      	uxth	r3, r3
 800083a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800083e:	b29b      	uxth	r3, r3
}
 8000840:	4618      	mov	r0, r3
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800084c:	b480      	push	{r7}
 800084e:	b087      	sub	sp, #28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000868:	887b      	ldrh	r3, [r7, #2]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	095b      	lsrs	r3, r3, #5
 800086e:	b2db      	uxtb	r3, r3
 8000870:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000872:	887b      	ldrh	r3, [r7, #2]
 8000874:	f003 031f 	and.w	r3, r3, #31
 8000878:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800087a:	2201      	movs	r2, #1
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d107      	bne.n	800089a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	899b      	ldrh	r3, [r3, #12]
 800088e:	b29b      	uxth	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	4013      	ands	r3, r2
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	e011      	b.n	80008be <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d107      	bne.n	80008b0 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	8a1b      	ldrh	r3, [r3, #16]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	461a      	mov	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	4013      	ands	r3, r2
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	e006      	b.n	80008be <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	8a9b      	ldrh	r3, [r3, #20]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	4013      	ands	r3, r2
 80008bc:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80008c6:	2201      	movs	r2, #1
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4013      	ands	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d005      	beq.n	80008f0 <USART_GetITStatus+0xa4>
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d002      	beq.n	80008f0 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80008ea:	2301      	movs	r3, #1
 80008ec:	74fb      	strb	r3, [r7, #19]
 80008ee:	e001      	b.n	80008f4 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80008f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	371c      	adds	r7, #28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <main>:
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void){
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
	spi_initialise();
 8000908:	f000 fb8a 	bl	8001020 <spi_initialise>

	Sensor_StatusTypeDef status;
	//uint8_t chipid_gyro = spi_read_single(SPI_CS_Acc, BMX055_ACC_CHIP_ID|ACC_CHIP_ID_CHIP_ID);
	do{
		 status = sensor_check_id();
 800090c:	f000 f9a8 	bl	8000c60 <sensor_check_id>
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
	}while (status != SENS_OK);
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f8      	bne.n	800090c <main+0xa>

	status = sensor_config();
 800091a:	f000 f9d8 	bl	8000cce <sensor_config>
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
	//uint8_t acc_buffer [6];
	//uint8_t gyro_buffer [6];
	//uint8_t mag_buffer [8];
	*/

	uint8_t data = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	71bb      	strb	r3, [r7, #6]
		/*if(USART_GetFlagStatus(USART1, USART_FLAG_RXNE))
			data = uart_receive(UART_DEVICE_GNSS);
		 */

		//gnss_read_new_data();
		sensor_read_all();
 8000926:	f000 fa45 	bl	8000db4 <sensor_read_all>
 800092a:	e7fc      	b.n	8000926 <main+0x24>

0800092c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000964 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000930:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000932:	e003      	b.n	800093c <LoopCopyDataInit>

08000934 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000936:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000938:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800093a:	3104      	adds	r1, #4

0800093c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000940:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000942:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000944:	d3f6      	bcc.n	8000934 <CopyDataInit>
  ldr  r2, =_sbss
 8000946:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000948:	e002      	b.n	8000950 <LoopFillZerobss>

0800094a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800094a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800094c:	f842 3b04 	str.w	r3, [r2], #4

08000950 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000952:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000954:	d3f9      	bcc.n	800094a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000956:	f000 f841 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095a:	f000 fd25 	bl	80013a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095e:	f7ff ffd0 	bl	8000902 <main>
  bx  lr    
 8000962:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000964:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000968:	08001410 	.word	0x08001410
  ldr  r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000970:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000974:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000978:	2000083c 	.word	0x2000083c

0800097c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>

0800097e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000990:	e7fe      	b.n	8000990 <HardFault_Handler+0x4>

08000992 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000996:	e7fe      	b.n	8000996 <MemManage_Handler+0x4>

08000998 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800099c:	e7fe      	b.n	800099c <BusFault_Handler+0x4>

0800099e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <UsageFault_Handler+0x4>

080009a4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e0:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <SystemInit+0x60>)
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <SystemInit+0x60>)
 80009e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009f0:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <SystemInit+0x64>)
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <SystemInit+0x64>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <SystemInit+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <SystemInit+0x64>)
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <SystemInit+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <SystemInit+0x64>)
 8000a14:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <SystemInit+0x68>)
 8000a16:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <SystemInit+0x64>)
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <SystemInit+0x64>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000a2a:	f000 f80d 	bl	8000a48 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a2e:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <SystemInit+0x60>)
 8000a30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a34:	609a      	str	r2, [r3, #8]
#endif
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00
 8000a40:	40023800 	.word	0x40023800
 8000a44:	24003010 	.word	0x24003010

08000a48 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000a56:	4a36      	ldr	r2, [pc, #216]	; (8000b30 <SetSysClock+0xe8>)
 8000a58:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <SetSysClock+0xe8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a60:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000a62:	4b33      	ldr	r3, [pc, #204]	; (8000b30 <SetSysClock+0xe8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d103      	bne.n	8000a80 <SetSysClock+0x38>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a7e:	d1f0      	bne.n	8000a62 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <SetSysClock+0xe8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	e001      	b.n	8000a96 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d142      	bne.n	8000b22 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a9c:	4a24      	ldr	r2, [pc, #144]	; (8000b30 <SetSysClock+0xe8>)
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <SetSysClock+0xe8>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000aa8:	4a22      	ldr	r2, [pc, #136]	; (8000b34 <SetSysClock+0xec>)
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <SetSysClock+0xec>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000ab4:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <SetSysClock+0xe8>)
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <SetSysClock+0xe8>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000abc:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <SetSysClock+0xe8>)
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <SetSysClock+0xe8>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000ac8:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <SetSysClock+0xe8>)
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <SetSysClock+0xe8>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000ad2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <SetSysClock+0xe8>)
 8000ad6:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <SetSysClock+0xf0>)
 8000ad8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000ada:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <SetSysClock+0xe8>)
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <SetSysClock+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ae4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ae6:	bf00      	nop
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <SetSysClock+0xe8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f9      	beq.n	8000ae8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <SetSysClock+0xf4>)
 8000af6:	f240 7205 	movw	r2, #1797	; 0x705
 8000afa:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000afc:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <SetSysClock+0xe8>)
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <SetSysClock+0xe8>)
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f023 0303 	bic.w	r3, r3, #3
 8000b06:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b08:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <SetSysClock+0xe8>)
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <SetSysClock+0xe8>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f043 0302 	orr.w	r3, r3, #2
 8000b12:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000b14:	bf00      	nop
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SetSysClock+0xe8>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f003 030c 	and.w	r3, r3, #12
 8000b1e:	2b08      	cmp	r3, #8
 8000b20:	d1f9      	bne.n	8000b16 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000
 8000b38:	07405419 	.word	0x07405419
 8000b3c:	40023c00 	.word	0x40023c00

08000b40 <sensor_mag_power_control>:
//------------------------------STATIC FUNCTIONS--------------------------------//
/* @brief change magneto mode between sleep / suspend
 * cmd==ENABLE: put the magneto to sleep mode
 * cmd==Disable: put magneto to suspend mode
 */
static void sensor_mag_power_control(FunctionalState cmd){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	if(cmd == ENABLE){
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d105      	bne.n	8000b5c <sensor_mag_power_control+0x1c>
		spi_write_single(SPI_CS_Mag, MAG_PWR_CR1_POWER_CONTROL_BIT, BMX055_MAG_PWR_CR1);
 8000b50:	224b      	movs	r2, #75	; 0x4b
 8000b52:	2101      	movs	r1, #1
 8000b54:	2002      	movs	r0, #2
 8000b56:	f000 fb38 	bl	80011ca <spi_write_single>
	}
	else{
		spi_write_single(SPI_CS_Mag, 0x00, BMX055_MAG_PWR_CR1);
	}
}
 8000b5a:	e004      	b.n	8000b66 <sensor_mag_power_control+0x26>
		spi_write_single(SPI_CS_Mag, 0x00, BMX055_MAG_PWR_CR1);
 8000b5c:	224b      	movs	r2, #75	; 0x4b
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2002      	movs	r0, #2
 8000b62:	f000 fb32 	bl	80011ca <spi_write_single>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <bmp280_config>:
 * BMP_CTRL_MEAS	osrs_t		001		7,6,5	x1 sampling
 * 					osrs_p		001		4,3,2	x1 sampling
 * 					mode		11		1,0		(set to normal mode)
 *
 */
static Sensor_StatusTypeDef bmp280_config(){
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
	//write 001000100 to BMP_CTRL_MEAS
	//uint8_t calib_data = CTRL_MEAS_OSRS_P_1|CTRL_MEAS_OSRS_T_1;
	uint8_t calib_data = CTRL_MEAS_OSRS_P_1|CTRL_MEAS_OSRS_T_1|CTRL_MEAS_MODE_NORMAL;
 8000b74:	2327      	movs	r3, #39	; 0x27
 8000b76:	71fb      	strb	r3, [r7, #7]

	if( spi_write_single(SPI_CS_Baro, calib_data, BMP280_CTRL_MEAS) != SENS_OK)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	22f4      	movs	r2, #244	; 0xf4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	2003      	movs	r0, #3
 8000b80:	f000 fb23 	bl	80011ca <spi_write_single>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <bmp280_config+0x20>
		return SENS_CONFERR;
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	e000      	b.n	8000b90 <bmp280_config+0x22>

	//if (spi_write_single(SPI_CS_Baro, 0x04, BMP280_CONFIG) != SENS_OK)
		//return SENS_CONFERR;

	return SENS_OK;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <bmx055_config>:
 *
 * use Sensor_ConfigTypeDef to set
 * rates and ranges
 *
 */
static Sensor_StatusTypeDef bmx055_config(Sensor_ConfigTypeDef *f){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

	//----------------ACCELEROMETER-------------------------//
	/* Accelerometer measurement range
	 * Default	: 0b(0000)0011 	= +-2g
	 * Set		: user-defined*/
	if(spi_write_single(SPI_CS_Acc, f->accel_range, BMX055_ACC_PMU_RANGE) != SENS_OK){
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	785b      	ldrb	r3, [r3, #1]
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f000 fb0e 	bl	80011ca <spi_write_single>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <bmx055_config+0x20>
		return SENS_CONFERR;
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	e04f      	b.n	8000c58 <bmx055_config+0xc0>
	}
	/* Accelerometer measurement output data rate
	 * Default	: 0b(000)01111 	= 1000 Hz
	 * Set		: user-defined*/
	if(spi_write_single(SPI_CS_Acc, f->accel_rate, BMX055_ACC_PMU_BW) != SENS_OK){
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2210      	movs	r2, #16
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 fb02 	bl	80011ca <spi_write_single>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <bmx055_config+0x38>
		return SENS_CONFERR;
 8000bcc:	2305      	movs	r3, #5
 8000bce:	e043      	b.n	8000c58 <bmx055_config+0xc0>
	}
	/* Accelerometer power mode
	 * Default	: 0b0000000(0) 	= normal mode
	 * Set		: 0b0000000(0) 	= normal mode */
	if(spi_write_single(SPI_CS_Acc, ACC_PWR_NORMAL, BMX055_ACC_PMU_LPW) != SENS_OK){
 8000bd0:	2211      	movs	r2, #17
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 faf8 	bl	80011ca <spi_write_single>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <bmx055_config+0x4c>
		return SENS_CONFERR;
 8000be0:	2305      	movs	r3, #5
 8000be2:	e039      	b.n	8000c58 <bmx055_config+0xc0>

	//-----------------------GYROSCOPE-----------------------//
	/* Gyroscope measurement range
	 * Default	: 0b(00000)000 	= +-2000d/s
	 * Set		: user-defined*/
	if(spi_write_single(SPI_CS_Gyro, f->gyro_range, BMX055_GYRO_RANGE) != SENS_OK){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	78db      	ldrb	r3, [r3, #3]
 8000be8:	220f      	movs	r2, #15
 8000bea:	4619      	mov	r1, r3
 8000bec:	2001      	movs	r0, #1
 8000bee:	f000 faec 	bl	80011ca <spi_write_single>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <bmx055_config+0x64>
		return SENS_CONFERR;
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	e02d      	b.n	8000c58 <bmx055_config+0xc0>
	}
	/* Gyroscope measurement output data rate (bandwidth)
	 * Default	: 0b(1000)0000 	= 2000 Hz with no filter
	 * Set		: user-defined*/
	if(spi_write_single(SPI_CS_Gyro, f->gyro_rate|GYRO_BW_RESET, BMX055_GYRO_BW) != SENS_OK){
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	789b      	ldrb	r3, [r3, #2]
 8000c00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2210      	movs	r2, #16
 8000c08:	4619      	mov	r1, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f000 fadd 	bl	80011ca <spi_write_single>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <bmx055_config+0x82>
		return SENS_CONFERR;
 8000c16:	2305      	movs	r3, #5
 8000c18:	e01e      	b.n	8000c58 <bmx055_config+0xc0>
	}
	/* Gyroscope power mode
	 * Default	: 0b0(0)0(0)000(0)	= normal mode
	 * Set		: 0b0(0)0(0)000(0)	= normal mode*/
	if(spi_write_single(SPI_CS_Gyro, GYRO_LPM1_NORMAL_MODE, BMX055_GYRO_LPM1) != SENS_OK){
 8000c1a:	2211      	movs	r2, #17
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f000 fad3 	bl	80011ca <spi_write_single>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <bmx055_config+0x96>
		return SENS_CONFERR;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	e014      	b.n	8000c58 <bmx055_config+0xc0>

	/*Magneto meter xy repetitions
	 *choose nXY=3 ==> REPXY=1 (see pg122 table37 and pg138 of datasheet)
	 *default	: 0b00000000
	 *set to	: 0b00000001 */
	if(spi_write_single(SPI_CS_Mag, MAG_REP_XY_LOW_POWER_PRESET_REPXY, BMX055_MAG_REP_XY) != SENS_OK){
 8000c2e:	2251      	movs	r2, #81	; 0x51
 8000c30:	2101      	movs	r1, #1
 8000c32:	2002      	movs	r0, #2
 8000c34:	f000 fac9 	bl	80011ca <spi_write_single>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <bmx055_config+0xaa>
		return SENS_CONFERR;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	e00a      	b.n	8000c58 <bmx055_config+0xc0>

	/*Magneto meter z repetitions
	 *choose nZ=3 ==> REPZ=2 (see pg122 table37 and pg138 of datasheet)
	 *default	: 0b00000000
	 *set to	: 0b00000010 */
	if(spi_write_single(SPI_CS_Mag, MAG_REP_Z_LOW_POWER_PRESET_REPZ, BMX055_MAG_REP_Z) != SENS_OK ){
 8000c42:	2252      	movs	r2, #82	; 0x52
 8000c44:	2102      	movs	r1, #2
 8000c46:	2002      	movs	r0, #2
 8000c48:	f000 fabf 	bl	80011ca <spi_write_single>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <bmx055_config+0xbe>
		return SENS_CONFERR;
 8000c52:	2305      	movs	r3, #5
 8000c54:	e000      	b.n	8000c58 <bmx055_config+0xc0>
	}



	return SENS_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <sensor_check_id>:
//-----------------------------PUBLIC FUNCTIONS-------------------------------//

/**
 * @brief used to check sensors are present
 */
Sensor_StatusTypeDef sensor_check_id(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0

	uint8_t acc_id = spi_read_single(SPI_CS_Acc, BMX055_ACC_CHIP_ID);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f000 fa8d 	bl	8001188 <spi_read_single>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
	if(acc_id != BMX055_ACC_ID){
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2bfa      	cmp	r3, #250	; 0xfa
 8000c76:	d001      	beq.n	8000c7c <sensor_check_id+0x1c>
		return SENS_IDERR;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	e024      	b.n	8000cc6 <sensor_check_id+0x66>
	}

	uint8_t gyro_id = spi_read_single(SPI_CS_Gyro, BMX055_GYRO_CHIP_ID);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f000 fa82 	bl	8001188 <spi_read_single>
 8000c84:	4603      	mov	r3, r0
 8000c86:	71bb      	strb	r3, [r7, #6]
	if(gyro_id != BMX055_GYRO_ID){
 8000c88:	79bb      	ldrb	r3, [r7, #6]
 8000c8a:	2b0f      	cmp	r3, #15
 8000c8c:	d001      	beq.n	8000c92 <sensor_check_id+0x32>
		return SENS_IDERR;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	e019      	b.n	8000cc6 <sensor_check_id+0x66>
	}

	sensor_mag_power_control(ENABLE);
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff ff54 	bl	8000b40 <sensor_mag_power_control>
	uint8_t mag_id = spi_read_single(SPI_CS_Mag, BMX055_MAG_CHIP_ID);
 8000c98:	2140      	movs	r1, #64	; 0x40
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	f000 fa74 	bl	8001188 <spi_read_single>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	717b      	strb	r3, [r7, #5]
	if(mag_id != BMX055_MAG_ID){
 8000ca4:	797b      	ldrb	r3, [r7, #5]
 8000ca6:	2b32      	cmp	r3, #50	; 0x32
 8000ca8:	d001      	beq.n	8000cae <sensor_check_id+0x4e>
		return SENS_IDERR;
 8000caa:	2304      	movs	r3, #4
 8000cac:	e00b      	b.n	8000cc6 <sensor_check_id+0x66>
	}

	uint8_t baro_id = spi_read_single(SPI_CS_Baro, BMP280_CHIP_ID);
 8000cae:	21d0      	movs	r1, #208	; 0xd0
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 fa69 	bl	8001188 <spi_read_single>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	713b      	strb	r3, [r7, #4]
	if(baro_id != BMP280_ID){
 8000cba:	793b      	ldrb	r3, [r7, #4]
 8000cbc:	2b58      	cmp	r3, #88	; 0x58
 8000cbe:	d001      	beq.n	8000cc4 <sensor_check_id+0x64>
		return SENS_IDERR;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	e000      	b.n	8000cc6 <sensor_check_id+0x66>
	}

	return SENS_OK;
 8000cc4:	2300      	movs	r3, #0

}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <sensor_config>:

Sensor_StatusTypeDef sensor_config(){
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
	if(bmp280_config() != SENS_OK){
 8000cd4:	f7ff ff4b 	bl	8000b6e <bmp280_config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <sensor_config+0x14>
		return SENS_CONFERR;
 8000cde:	2305      	movs	r3, #5
 8000ce0:	e014      	b.n	8000d0c <sensor_config+0x3e>
	}

	//@TODO: decide rate and range
	Sensor_ConfigTypeDef *f;
	f->accel_range = ACC_PMU_RANGE_02;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	705a      	strb	r2, [r3, #1]
	f->accel_rate = ACC_PMU_BW_1000;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	220f      	movs	r2, #15
 8000cec:	701a      	strb	r2, [r3, #0]
	f->gyro_rate = GYRO_ODR_2000;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2281      	movs	r2, #129	; 0x81
 8000cf2:	709a      	strb	r2, [r3, #2]
	f->gyro_range = GYRO_RANGE_RANGE_2000;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	70da      	strb	r2, [r3, #3]
	if(bmx055_config(f) != SENS_OK){
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ff4c 	bl	8000b98 <bmx055_config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <sensor_config+0x3c>
		return SENS_CONFERR;
 8000d06:	2305      	movs	r3, #5
 8000d08:	e000      	b.n	8000d0c <sensor_config+0x3e>
	}
	return SENS_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <sensor_read_acc>:
/**
 * @brief	read x,y,z data from acc, LSB first
 * @param	buff: variable to store read values
 * @param	lenght: how many bytes to read. recommended 6
 * */
Sensor_StatusTypeDef sensor_read_acc(uint8_t *buff, uint8_t length){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	70fb      	strb	r3, [r7, #3]
	return spi_read_burst(SPI_CS_Acc, BMX055_ACC_D_X_LSB, buff, length);
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	2102      	movs	r1, #2
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 fa7f 	bl	800122a <spi_read_burst>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <sensor_read_gyro>:
/**
 * @brief	read x,y,z data from gyro, LSB first
 * @param	buff: variable to store read values
 * @param	lenght: how many bytes to read. recommended 6
 * */
Sensor_StatusTypeDef sensor_read_gyro(uint8_t *buff, uint8_t length){
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	70fb      	strb	r3, [r7, #3]
	return spi_read_burst(SPI_CS_Gyro, BMX055_GYRO_RATE_X_LSB, buff, length);
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	2102      	movs	r1, #2
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f000 fa6e 	bl	800122a <spi_read_burst>
 8000d4e:	4603      	mov	r3, r0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <sensor_read_mag>:
/**
 * @brief	read x,y,z data from magneto, LSB first
 * @param	buff: variable to store read values
 * @param	lenght: how many bytes to read. recommended 8
 * */
Sensor_StatusTypeDef sensor_read_mag(uint8_t *buff, uint8_t length){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
	//select forced mode
	Sensor_StatusTypeDef status = spi_write_single(SPI_CS_Mag, MAG_PWR_CR2_FORCED_MODE, BMX055_MAG_PWR_CR2);
 8000d64:	224c      	movs	r2, #76	; 0x4c
 8000d66:	2102      	movs	r1, #2
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f000 fa2e 	bl	80011ca <spi_write_single>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73fb      	strb	r3, [r7, #15]
	//read data
	status= spi_read_burst(SPI_CS_Mag, BMX055_MAG_XOUT_LSB, buff, length);
 8000d72:	78fb      	ldrb	r3, [r7, #3]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	2142      	movs	r1, #66	; 0x42
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f000 fa56 	bl	800122a <spi_read_burst>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	73fb      	strb	r3, [r7, #15]
	return status;
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <sensor_read_baro>:
/**
 * @brief	read pressure and temperature data from baro, MSB first
 * @param	buff: variable to store read values
 * @param	lenght: how many bytes to read. recommended 6
 * */
Sensor_StatusTypeDef sensor_read_baro(uint8_t *buff, uint8_t length){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	70fb      	strb	r3, [r7, #3]
	//select forced mode
	//Sensor_StatusTypeDef status = spi_write_single(SPI_CS_Baro, CTRL_MEAS_MODE_FORCED, BMP280_CTRL_MEAS);
	//read data
	//uint8_t mode1 = spi_read_single(SPI_CS_Baro, BMP280_CTRL_MEAS);
	Sensor_StatusTypeDef status = spi_read_burst(SPI_CS_Baro, BMP280_PRESS_MSB, buff, length);
 8000d98:	78fb      	ldrb	r3, [r7, #3]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	21f7      	movs	r1, #247	; 0xf7
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f000 fa43 	bl	800122a <spi_read_burst>
 8000da4:	4603      	mov	r3, r0
 8000da6:	73fb      	strb	r3, [r7, #15]
	//uint8_t mode2 = spi_read_single(SPI_CS_Baro, BMP280_CTRL_MEAS);
	return status;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <sensor_read_all>:

/*@brief	reall data from all sensors and pack into SensorData Struct
 * */
Sensor_StatusTypeDef sensor_read_all(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
	uint8_t gyro_buffer [GYRO_READ_LENGTH];
	uint8_t mag_buffer [MAG_READ_LENGTH];
	uint8_t baro_buffer [BARO_READ_LENGTH];

	//read acc data
	if(sensor_read_acc(acc_buffer, ACC_READ_LENGTH) != SENS_OK)
 8000dba:	f107 0318 	add.w	r3, r7, #24
 8000dbe:	2106      	movs	r1, #6
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ffa7 	bl	8000d14 <sensor_read_acc>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <sensor_read_all+0x1c>
		return SENS_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e089      	b.n	8000ee4 <sensor_read_all+0x130>

	SensorDataGlobal.AccX_LSB = (acc_buffer[0])&ACC_MASK_LSB;
 8000dd0:	7e3b      	ldrb	r3, [r7, #24]
 8000dd2:	f023 030f 	bic.w	r3, r3, #15
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b44      	ldr	r3, [pc, #272]	; (8000eec <sensor_read_all+0x138>)
 8000dda:	701a      	strb	r2, [r3, #0]
	SensorDataGlobal.AccX_MSB = acc_buffer[1];
 8000ddc:	7e7a      	ldrb	r2, [r7, #25]
 8000dde:	4b43      	ldr	r3, [pc, #268]	; (8000eec <sensor_read_all+0x138>)
 8000de0:	705a      	strb	r2, [r3, #1]
	SensorDataGlobal.AccY_LSB = (acc_buffer[2])&ACC_MASK_LSB;
 8000de2:	7ebb      	ldrb	r3, [r7, #26]
 8000de4:	f023 030f 	bic.w	r3, r3, #15
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4b40      	ldr	r3, [pc, #256]	; (8000eec <sensor_read_all+0x138>)
 8000dec:	709a      	strb	r2, [r3, #2]
	SensorDataGlobal.AccY_MSB = acc_buffer[3];
 8000dee:	7efa      	ldrb	r2, [r7, #27]
 8000df0:	4b3e      	ldr	r3, [pc, #248]	; (8000eec <sensor_read_all+0x138>)
 8000df2:	70da      	strb	r2, [r3, #3]
	SensorDataGlobal.AccZ_LSB = (acc_buffer[4])&ACC_MASK_LSB;
 8000df4:	7f3b      	ldrb	r3, [r7, #28]
 8000df6:	f023 030f 	bic.w	r3, r3, #15
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <sensor_read_all+0x138>)
 8000dfe:	711a      	strb	r2, [r3, #4]
	SensorDataGlobal.AccZ_MSB = acc_buffer[5];
 8000e00:	7f7a      	ldrb	r2, [r7, #29]
 8000e02:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <sensor_read_all+0x138>)
 8000e04:	715a      	strb	r2, [r3, #5]

	//read gyro data
	if(sensor_read_gyro(gyro_buffer, GYRO_READ_LENGTH))
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	2106      	movs	r1, #6
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff92 	bl	8000d36 <sensor_read_gyro>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <sensor_read_all+0x68>
		return SENS_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e063      	b.n	8000ee4 <sensor_read_all+0x130>

	SensorDataGlobal.GyroX_LSB = gyro_buffer[0];
 8000e1c:	7c3a      	ldrb	r2, [r7, #16]
 8000e1e:	4b33      	ldr	r3, [pc, #204]	; (8000eec <sensor_read_all+0x138>)
 8000e20:	719a      	strb	r2, [r3, #6]
	SensorDataGlobal.GyroX_MSB = gyro_buffer[1];
 8000e22:	7c7a      	ldrb	r2, [r7, #17]
 8000e24:	4b31      	ldr	r3, [pc, #196]	; (8000eec <sensor_read_all+0x138>)
 8000e26:	71da      	strb	r2, [r3, #7]
	SensorDataGlobal.GyroY_LSB = gyro_buffer[2];
 8000e28:	7cba      	ldrb	r2, [r7, #18]
 8000e2a:	4b30      	ldr	r3, [pc, #192]	; (8000eec <sensor_read_all+0x138>)
 8000e2c:	721a      	strb	r2, [r3, #8]
	SensorDataGlobal.GyroY_MSB = gyro_buffer[3];
 8000e2e:	7cfa      	ldrb	r2, [r7, #19]
 8000e30:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <sensor_read_all+0x138>)
 8000e32:	725a      	strb	r2, [r3, #9]
	SensorDataGlobal.GyroZ_LSB = gyro_buffer[4];
 8000e34:	7d3a      	ldrb	r2, [r7, #20]
 8000e36:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <sensor_read_all+0x138>)
 8000e38:	729a      	strb	r2, [r3, #10]
	SensorDataGlobal.GyroZ_MSB = gyro_buffer[5];
 8000e3a:	7d7a      	ldrb	r2, [r7, #21]
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <sensor_read_all+0x138>)
 8000e3e:	72da      	strb	r2, [r3, #11]

	//read mag data
	if(sensor_read_mag(mag_buffer, MAG_READ_LENGTH)!= SENS_OK)
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	2108      	movs	r1, #8
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff86 	bl	8000d58 <sensor_read_mag>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <sensor_read_all+0xa2>
		return SENS_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e046      	b.n	8000ee4 <sensor_read_all+0x130>

	SensorDataGlobal.MagX_LSB = mag_buffer[0]&MAG_MASK_XY_LSB;
 8000e56:	7a3b      	ldrb	r3, [r7, #8]
 8000e58:	f023 0307 	bic.w	r3, r3, #7
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b23      	ldr	r3, [pc, #140]	; (8000eec <sensor_read_all+0x138>)
 8000e60:	731a      	strb	r2, [r3, #12]
	SensorDataGlobal.MagX_MSB = mag_buffer[1];
 8000e62:	7a7a      	ldrb	r2, [r7, #9]
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <sensor_read_all+0x138>)
 8000e66:	735a      	strb	r2, [r3, #13]
	SensorDataGlobal.MagY_LSB = mag_buffer[2]&MAG_MASK_XY_LSB;
 8000e68:	7abb      	ldrb	r3, [r7, #10]
 8000e6a:	f023 0307 	bic.w	r3, r3, #7
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <sensor_read_all+0x138>)
 8000e72:	739a      	strb	r2, [r3, #14]
	SensorDataGlobal.MagY_MSB = mag_buffer[3];
 8000e74:	7afa      	ldrb	r2, [r7, #11]
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <sensor_read_all+0x138>)
 8000e78:	73da      	strb	r2, [r3, #15]
	SensorDataGlobal.MagZ_LSB = mag_buffer[4]&MAG_MASK_Z_LSB;
 8000e7a:	7b3b      	ldrb	r3, [r7, #12]
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <sensor_read_all+0x138>)
 8000e84:	741a      	strb	r2, [r3, #16]
	SensorDataGlobal.MagZ_MSB = mag_buffer[5];
 8000e86:	7b7a      	ldrb	r2, [r7, #13]
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <sensor_read_all+0x138>)
 8000e8a:	745a      	strb	r2, [r3, #17]
	SensorDataGlobal.MagHall_LSB = mag_buffer[6]&MAG_MASK_HALL_LSB;
 8000e8c:	7bbb      	ldrb	r3, [r7, #14]
 8000e8e:	f023 0303 	bic.w	r3, r3, #3
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <sensor_read_all+0x138>)
 8000e96:	749a      	strb	r2, [r3, #18]
	SensorDataGlobal.MagHall_MSB = mag_buffer[7];
 8000e98:	7bfa      	ldrb	r2, [r7, #15]
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <sensor_read_all+0x138>)
 8000e9c:	74da      	strb	r2, [r3, #19]

	//read baro data
	if(sensor_read_baro(baro_buffer, ACC_READ_LENGTH)!= SENS_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2106      	movs	r1, #6
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff72 	bl	8000d8c <sensor_read_baro>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <sensor_read_all+0xfe>
		return SENS_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e018      	b.n	8000ee4 <sensor_read_all+0x130>

	SensorDataGlobal.BaroPress_MSB = baro_buffer[0];
 8000eb2:	783a      	ldrb	r2, [r7, #0]
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <sensor_read_all+0x138>)
 8000eb6:	751a      	strb	r2, [r3, #20]
	SensorDataGlobal.BaroPress_LSB = baro_buffer[1];
 8000eb8:	787a      	ldrb	r2, [r7, #1]
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <sensor_read_all+0x138>)
 8000ebc:	755a      	strb	r2, [r3, #21]
	SensorDataGlobal.BaroPress_XLSB = baro_buffer[2]&BARO_MASK_XLSB;
 8000ebe:	78bb      	ldrb	r3, [r7, #2]
 8000ec0:	f023 030f 	bic.w	r3, r3, #15
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <sensor_read_all+0x138>)
 8000ec8:	759a      	strb	r2, [r3, #22]
	SensorDataGlobal.BaroTemp_MSB = baro_buffer[3];
 8000eca:	78fa      	ldrb	r2, [r7, #3]
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <sensor_read_all+0x138>)
 8000ece:	75da      	strb	r2, [r3, #23]
	SensorDataGlobal.BaroTemp_LSB = baro_buffer[4];
 8000ed0:	793a      	ldrb	r2, [r7, #4]
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <sensor_read_all+0x138>)
 8000ed4:	761a      	strb	r2, [r3, #24]
	SensorDataGlobal.BaroTemp_XLSB = baro_buffer[5]&BARO_MASK_XLSB;
 8000ed6:	797b      	ldrb	r3, [r7, #5]
 8000ed8:	f023 030f 	bic.w	r3, r3, #15
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b03      	ldr	r3, [pc, #12]	; (8000eec <sensor_read_all+0x138>)
 8000ee0:	765a      	strb	r2, [r3, #25]



	return SENS_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000001c 	.word	0x2000001c

08000ef0 <cs_deselect>:
//------------------------------STATIC FUNCTIONS--------------------------------//

/**
 * @brief deselect cs pin means set high
 */
static void cs_deselect(SPI_ChipSelectTypeDef cs){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	switch(cs){
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d822      	bhi.n	8000f46 <cs_deselect+0x56>
 8000f00:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <cs_deselect+0x18>)
 8000f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f06:	bf00      	nop
 8000f08:	08000f19 	.word	0x08000f19
 8000f0c:	08000f23 	.word	0x08000f23
 8000f10:	08000f2f 	.word	0x08000f2f
 8000f14:	08000f3b 	.word	0x08000f3b
	case SPI_CS_Acc	 : 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Acc);	break;
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <cs_deselect+0x60>)
 8000f1c:	f7ff fb22 	bl	8000564 <GPIO_SetBits>
 8000f20:	e011      	b.n	8000f46 <cs_deselect+0x56>
	case SPI_CS_Gyro : 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Gyro);	break;
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	480a      	ldr	r0, [pc, #40]	; (8000f50 <cs_deselect+0x60>)
 8000f28:	f7ff fb1c 	bl	8000564 <GPIO_SetBits>
 8000f2c:	e00b      	b.n	8000f46 <cs_deselect+0x56>
	case SPI_CS_Mag	 : 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Mag);	break;
 8000f2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f32:	4807      	ldr	r0, [pc, #28]	; (8000f50 <cs_deselect+0x60>)
 8000f34:	f7ff fb16 	bl	8000564 <GPIO_SetBits>
 8000f38:	e005      	b.n	8000f46 <cs_deselect+0x56>
	case SPI_CS_Baro : 	GPIO_SetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Baro);	break;
 8000f3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f3e:	4804      	ldr	r0, [pc, #16]	; (8000f50 <cs_deselect+0x60>)
 8000f40:	f7ff fb10 	bl	8000564 <GPIO_SetBits>
 8000f44:	bf00      	nop
	default 		 :	;
	}
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000

08000f54 <cs_select>:

/**
 * @brief select cs pin means set low
 */
static void cs_select(SPI_ChipSelectTypeDef cs){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	switch(cs){
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d822      	bhi.n	8000faa <cs_select+0x56>
 8000f64:	a201      	add	r2, pc, #4	; (adr r2, 8000f6c <cs_select+0x18>)
 8000f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6a:	bf00      	nop
 8000f6c:	08000f7d 	.word	0x08000f7d
 8000f70:	08000f87 	.word	0x08000f87
 8000f74:	08000f93 	.word	0x08000f93
 8000f78:	08000f9f 	.word	0x08000f9f
	case SPI_CS_Acc : 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Acc);	break;
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <cs_select+0x60>)
 8000f80:	f7ff faff 	bl	8000582 <GPIO_ResetBits>
 8000f84:	e011      	b.n	8000faa <cs_select+0x56>
	case SPI_CS_Gyro: 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Gyro);	break;
 8000f86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8a:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <cs_select+0x60>)
 8000f8c:	f7ff faf9 	bl	8000582 <GPIO_ResetBits>
 8000f90:	e00b      	b.n	8000faa <cs_select+0x56>
	case SPI_CS_Mag	: 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Mag);	break;
 8000f92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <cs_select+0x60>)
 8000f98:	f7ff faf3 	bl	8000582 <GPIO_ResetBits>
 8000f9c:	e005      	b.n	8000faa <cs_select+0x56>
	case SPI_CS_Baro: 	GPIO_ResetBits(GPIO_SPI_Port_CS, GPIO_SPI_Pin_CS_Baro);	break;
 8000f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa2:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <cs_select+0x60>)
 8000fa4:	f7ff faed 	bl	8000582 <GPIO_ResetBits>
 8000fa8:	bf00      	nop
	default			:	;
	}
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <stm32_spi_rw>:

static uint8_t stm32_spi_rw(uint8_t data_out){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI1, data_out);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <stm32_spi_rw+0x38>)
 8000fca:	f7ff fbe4 	bl	8000796 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8000fce:	bf00      	nop
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <stm32_spi_rw+0x38>)
 8000fd4:	f7ff fc0e 	bl	80007f4 <SPI_I2S_GetFlagStatus>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f8      	beq.n	8000fd0 <stm32_spi_rw+0x18>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI1);
 8000fde:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <stm32_spi_rw+0x38>)
 8000fe0:	f7ff fbcc 	bl	800077c <SPI_I2S_ReceiveData>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b2db      	uxtb	r3, r3

}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40013000 	.word	0x40013000

08000ff4 <spi_tx>:
static void spi_tx(uint8_t data){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	stm32_spi_rw(data);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ffd9 	bl	8000fb8 <stm32_spi_rw>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <spi_rx>:

static uint8_t spi_rx(void){
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
	return stm32_spi_rw(0xff);
 8001012:	20ff      	movs	r0, #255	; 0xff
 8001014:	f7ff ffd0 	bl	8000fb8 <stm32_spi_rw>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <spi_initialise>:

/**
 * @brief intialise all clock and registers needed for spi. assign and initialise all gpio pins needed
 * @return void
 */
void spi_initialise(void){
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0

	//enable SPI clock: APB2 for SPI1
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001026:	2101      	movs	r1, #1
 8001028:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800102c:	f7ff fb22 	bl	8000674 <RCC_APB2PeriphClockCmd>
	//enable GPIO clock for SCK, MOSI, MISO
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001030:	2101      	movs	r1, #1
 8001032:	2001      	movs	r0, #1
 8001034:	f7ff fafe 	bl	8000634 <RCC_AHB1PeriphClockCmd>
	//enable GPIO clock for CS pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001038:	2101      	movs	r1, #1
 800103a:	2010      	movs	r0, #16
 800103c:	f7ff fafa 	bl	8000634 <RCC_AHB1PeriphClockCmd>

	//SPI GPIO configurations:
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure SPI Chip Select pins */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001040:	2301      	movs	r3, #1
 8001042:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001044:	2300      	movs	r3, #0
 8001046:	76bb      	strb	r3, [r7, #26]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001048:	2301      	movs	r3, #1
 800104a:	76fb      	strb	r3, [r7, #27]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800104c:	2303      	movs	r3, #3
 800104e:	767b      	strb	r3, [r7, #25]

	/* SPI Accelerometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_CS_Acc;
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port_CS, &GPIO_InitStructure);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4848      	ldr	r0, [pc, #288]	; (800117c <spi_initialise+0x15c>)
 800105c:	f7ff f9f4 	bl	8000448 <GPIO_Init>

	/* SPI Gyroscope CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_CS_Gyro;
 8001060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001064:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port_CS, &GPIO_InitStructure);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4843      	ldr	r0, [pc, #268]	; (800117c <spi_initialise+0x15c>)
 800106e:	f7ff f9eb 	bl	8000448 <GPIO_Init>

	/* SPI Magnetometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_CS_Mag;
 8001072:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001076:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port_CS, &GPIO_InitStructure);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	483f      	ldr	r0, [pc, #252]	; (800117c <spi_initialise+0x15c>)
 8001080:	f7ff f9e2 	bl	8000448 <GPIO_Init>

	/* SPI Barometer CS pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_CS_Baro;
 8001084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001088:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port_CS, &GPIO_InitStructure);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	483a      	ldr	r0, [pc, #232]	; (800117c <spi_initialise+0x15c>)
 8001092:	f7ff f9d9 	bl	8000448 <GPIO_Init>

	//deselect all cs pins
	cs_deselect(SPI_CS_Acc);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff2a 	bl	8000ef0 <cs_deselect>
	cs_deselect(SPI_CS_Gyro);
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff ff27 	bl	8000ef0 <cs_deselect>
	cs_deselect(SPI_CS_Mag);
 80010a2:	2002      	movs	r0, #2
 80010a4:	f7ff ff24 	bl	8000ef0 <cs_deselect>
	cs_deselect(SPI_CS_Baro);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f7ff ff21 	bl	8000ef0 <cs_deselect>

	/* Configure SPI pins: SCK and MOSI with default alternate function push-pull output*/
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80010ae:	2302      	movs	r3, #2
 80010b0:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80010b2:	2300      	movs	r3, #0
 80010b4:	76bb      	strb	r3, [r7, #26]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80010b6:	2302      	movs	r3, #2
 80010b8:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 80010ba:	2302      	movs	r3, #2
 80010bc:	76fb      	strb	r3, [r7, #27]

	/* SPI SCK pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_SCK;
 80010be:	2320      	movs	r3, #32
 80010c0:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port, &GPIO_InitStructure);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	482d      	ldr	r0, [pc, #180]	; (8001180 <spi_initialise+0x160>)
 80010ca:	f7ff f9bd 	bl	8000448 <GPIO_Init>

	/* SPI MOSI pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_MOSI;
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port, &GPIO_InitStructure);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4829      	ldr	r0, [pc, #164]	; (8001180 <spi_initialise+0x160>)
 80010da:	f7ff f9b5 	bl	8000448 <GPIO_Init>

	/* Configure MISO as Input with internal pull-up */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80010de:	2302      	movs	r3, #2
 80010e0:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
 80010e2:	2300      	movs	r3, #0
 80010e4:	76bb      	strb	r3, [r7, #26]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	76fb      	strb	r3, [r7, #27]

	/* SPI MISO pin configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_SPI_Pin_MISO;
 80010ea:	2340      	movs	r3, #64	; 0x40
 80010ec:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIO_SPI_Port, &GPIO_InitStructure);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4822      	ldr	r0, [pc, #136]	; (8001180 <spi_initialise+0x160>)
 80010f6:	f7ff f9a7 	bl	8000448 <GPIO_Init>

	/* Connect SPI pins to AF5 */
	GPIO_PinAFConfig(GPIO_SPI_Port, GPIO_SPI_Pinsource_SCK, GPIO_AF_SPI1);	// SCK
 80010fa:	2205      	movs	r2, #5
 80010fc:	2105      	movs	r1, #5
 80010fe:	4820      	ldr	r0, [pc, #128]	; (8001180 <spi_initialise+0x160>)
 8001100:	f7ff fa4e 	bl	80005a0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIO_SPI_Port, GPIO_SPI_Pinsource_MOSI, GPIO_AF_SPI1);	// MOSI
 8001104:	2205      	movs	r2, #5
 8001106:	2107      	movs	r1, #7
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <spi_initialise+0x160>)
 800110a:	f7ff fa49 	bl	80005a0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIO_SPI_Port, GPIO_SPI_Pinsource_MISO, GPIO_AF_SPI1);	// MISO
 800110e:	2205      	movs	r2, #5
 8001110:	2106      	movs	r1, #6
 8001112:	481b      	ldr	r0, [pc, #108]	; (8001180 <spi_initialise+0x160>)
 8001114:	f7ff fa44 	bl	80005a0 <GPIO_PinAFConfig>

	/* SPI configuration */
	SPI_InitTypeDef SPI_InitStructure;

	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001118:	2300      	movs	r3, #0
 800111a:	803b      	strh	r3, [r7, #0]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 800111c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001120:	807b      	strh	r3, [r7, #2]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001122:	2300      	movs	r3, #0
 8001124:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 8001126:	2302      	movs	r3, #2
 8001128:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 800112a:	2301      	movs	r3, #1
 800112c:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 800112e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001132:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_SPI; // 72000kHz/16 = 4500kHz < 10000kHz
 8001134:	2318      	movs	r3, #24
 8001136:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8001138:	2300      	movs	r3, #0
 800113a:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 800113c:	2307      	movs	r3, #7
 800113e:	823b      	strh	r3, [r7, #16]

	SPI_Init(SPI1, &SPI_InitStructure);
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	480f      	ldr	r0, [pc, #60]	; (8001184 <spi_initialise+0x164>)
 8001146:	f7ff fab5 	bl	80006b4 <SPI_Init>
	SPI_CalculateCRC(SPI1, DISABLE);
 800114a:	2100      	movs	r1, #0
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <spi_initialise+0x164>)
 800114e:	f7ff fb31 	bl	80007b4 <SPI_CalculateCRC>
	SPI_Cmd(SPI1, ENABLE);
 8001152:	2101      	movs	r1, #1
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <spi_initialise+0x164>)
 8001156:	f7ff faf1 	bl	800073c <SPI_Cmd>

	/* drain SPI */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) { ; } //wait for TX buffer to empty
 800115a:	bf00      	nop
 800115c:	2102      	movs	r1, #2
 800115e:	4809      	ldr	r0, [pc, #36]	; (8001184 <spi_initialise+0x164>)
 8001160:	f7ff fb48 	bl	80007f4 <SPI_I2S_GetFlagStatus>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f8      	beq.n	800115c <spi_initialise+0x13c>
	uint8_t dummyread = SPI_I2S_ReceiveData(SPI1);
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <spi_initialise+0x164>)
 800116c:	f7ff fb06 	bl	800077c <SPI_I2S_ReceiveData>
 8001170:	4603      	mov	r3, r0
 8001172:	77fb      	strb	r3, [r7, #31]
	if (dummyread) { ; }
}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	40020000 	.word	0x40020000
 8001184:	40013000 	.word	0x40013000

08001188 <spi_read_single>:
/**
 * @brief	read single byte of data from spi
 * @param 	cs: chip select
 * @param	addr: start address to read from
 */
uint8_t spi_read_single(SPI_ChipSelectTypeDef cs, uint8_t addr){
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	460a      	mov	r2, r1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	4613      	mov	r3, r2
 8001196:	71bb      	strb	r3, [r7, #6]
	cs_select(cs);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff feda 	bl	8000f54 <cs_select>

	uint8_t token = 0x80 | addr;	//read control byte = address but with MSB=1
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011a6:	73fb      	strb	r3, [r7, #15]
	spi_tx(token);			//send control byte
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff22 	bl	8000ff4 <spi_tx>

	token = spi_rx(); 		// recieve data
 80011b0:	f7ff ff2d 	bl	800100e <spi_rx>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]

	cs_deselect(cs);
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fe98 	bl	8000ef0 <cs_deselect>
	return token;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <spi_write_single>:
 * @brief	send single byte of data to spi
 * @param 	cs: chip select
 * @param	addr: start address to read from
 * @param	data_out: //data to be written
 */
Sensor_StatusTypeDef spi_write_single(SPI_ChipSelectTypeDef cs, uint8_t data_out, uint8_t addr){
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	460b      	mov	r3, r1
 80011d6:	71bb      	strb	r3, [r7, #6]
 80011d8:	4613      	mov	r3, r2
 80011da:	717b      	strb	r3, [r7, #5]
	cs_select(cs);
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff feb8 	bl	8000f54 <cs_select>

	uint8_t token = 0x7F & addr;	//write control byte = address but with MSB=0
 80011e4:	797b      	ldrb	r3, [r7, #5]
 80011e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011ea:	73fb      	strb	r3, [r7, #15]

	spi_tx(token);
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff00 	bl	8000ff4 <spi_tx>
	spi_tx(data_out);
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fefc 	bl	8000ff4 <spi_tx>

	cs_deselect(cs);
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fe76 	bl	8000ef0 <cs_deselect>

	token = spi_read_single(cs, addr);
 8001204:	797a      	ldrb	r2, [r7, #5]
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ffbc 	bl	8001188 <spi_read_single>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]

	if(token!=data_out){
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	429a      	cmp	r2, r3
 800121a:	d001      	beq.n	8001220 <spi_write_single+0x56>
		return SENS_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <spi_write_single+0x58>
	}

	return SENS_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <spi_read_burst>:
 * @param	addr: start address to read from
 * @param	buffer: //buffer to store read result
 * @param	length // length of the buffer (how many bytes to read)
 */

Sensor_StatusTypeDef spi_read_burst(SPI_ChipSelectTypeDef cs, uint8_t addr, uint8_t* buffer, uint8_t length){
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	603a      	str	r2, [r7, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	4603      	mov	r3, r0
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	460b      	mov	r3, r1
 800123a:	71bb      	strb	r3, [r7, #6]
 800123c:	4613      	mov	r3, r2
 800123e:	717b      	strb	r3, [r7, #5]
	cs_select(cs);
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe86 	bl	8000f54 <cs_select>

	uint8_t token = 0x80 | addr;	//read control byte = address but with MSB=1
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800124e:	72fb      	strb	r3, [r7, #11]
	spi_tx(token);			//send control byte
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fece 	bl	8000ff4 <spi_tx>

	for(int i=0; i<length; i++){
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	e00b      	b.n	8001276 <spi_read_burst+0x4c>
		token = spi_rx();
 800125e:	f7ff fed6 	bl	800100e <spi_rx>
 8001262:	4603      	mov	r3, r0
 8001264:	72fb      	strb	r3, [r7, #11]
		*(buffer+i) = token; // recieve data
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	4413      	add	r3, r2
 800126c:	7afa      	ldrb	r2, [r7, #11]
 800126e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++){
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3301      	adds	r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	797a      	ldrb	r2, [r7, #5]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	429a      	cmp	r2, r3
 800127c:	dcef      	bgt.n	800125e <spi_read_burst+0x34>
	}

	cs_deselect(cs);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe35 	bl	8000ef0 <cs_deselect>

	return SENS_OK;
 8001286:	2300      	movs	r3, #0

}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <reset_gnss_rx_buffer>:

/*JETSON UART*/


//------------------------STATIC FUNCTIONS-------------------//
static void reset_gnss_rx_buffer(){
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
	for(int i=0; i<GNSS_BUFFER_SIZE; i++){
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	e007      	b.n	80012ac <reset_gnss_rx_buffer+0x1c>
		GNSS_RX_BUFFER[i] = 0;
 800129c:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <reset_gnss_rx_buffer+0x30>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<GNSS_BUFFER_SIZE; i++){
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3301      	adds	r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b2:	dbf3      	blt.n	800129c <reset_gnss_rx_buffer+0xc>
	}
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	20000438 	.word	0x20000438

080012c4 <DMA2_Stream2_IRQHandler>:


//---------------------------------------INTERRUPT HANDLERS-----------------------------------///

//DMA UART TO MEM INTERRUPTS
void DMA_GNSS_RX_IRQHandler(void){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
		//DMA_Cmd(DMA_Stream_USART_MEM, ENABLE);
		//while (DMA_GetCmdStatus(DMA_Stream_USART_MEM) != ENABLE) { ; }

	//}

	if(DMA_GetITStatus(DMA_Stream_USART_GNSS_RX, DMA_IT_TE)){
 80012c8:	2104      	movs	r1, #4
 80012ca:	4802      	ldr	r0, [pc, #8]	; (80012d4 <DMA2_Stream2_IRQHandler+0x10>)
 80012cc:	f7ff f836 	bl	800033c <DMA_GetITStatus>
		;
	}


}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40026440 	.word	0x40026440

080012d8 <DMA2_Stream0_IRQHandler>:

//DMA MEM OT MEM INTERRUPTS
void DMA_USART_MEM_IRQHandler (void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	/* Test on DMA Stream Transfer Complete interrupt */
	if (DMA_GetFlagStatus(DMA_Stream_USART_MEM, DMA_FLAG_USART_MEM_TC) != RESET){
 80012dc:	490b      	ldr	r1, [pc, #44]	; (800130c <DMA2_Stream0_IRQHandler+0x34>)
 80012de:	480c      	ldr	r0, [pc, #48]	; (8001310 <DMA2_Stream0_IRQHandler+0x38>)
 80012e0:	f7fe ffc2 	bl	8000268 <DMA_GetFlagStatus>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00e      	beq.n	8001308 <DMA2_Stream0_IRQHandler+0x30>
		/* Clear DMA Stream Transfer Complete interrupt pending bit */
		DMA_ClearITPendingBit(DMA_Stream_USART_MEM, DMA_Stream_USART_MEM_IT);
 80012ea:	490a      	ldr	r1, [pc, #40]	; (8001314 <DMA2_Stream0_IRQHandler+0x3c>)
 80012ec:	4808      	ldr	r0, [pc, #32]	; (8001310 <DMA2_Stream0_IRQHandler+0x38>)
 80012ee:	f7ff f87d 	bl	80003ec <DMA_ClearITPendingBit>

		/* Enable DMA transfer from uart rx*/
		DMA_Cmd(DMA_Stream_USART_GNSS_RX, ENABLE);
 80012f2:	2101      	movs	r1, #1
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <DMA2_Stream0_IRQHandler+0x40>)
 80012f6:	f7fe ff67 	bl	80001c8 <DMA_Cmd>
		while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_RX ) != ENABLE) { ; }
 80012fa:	bf00      	nop
 80012fc:	4806      	ldr	r0, [pc, #24]	; (8001318 <DMA2_Stream0_IRQHandler+0x40>)
 80012fe:	f7fe ff9b 	bl	8000238 <DMA_GetCmdStatus>
 8001302:	4603      	mov	r3, r0
 8001304:	2b01      	cmp	r3, #1
 8001306:	d1f9      	bne.n	80012fc <DMA2_Stream0_IRQHandler+0x24>
	}
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	10000020 	.word	0x10000020
 8001310:	40026410 	.word	0x40026410
 8001314:	10008020 	.word	0x10008020
 8001318:	40026440 	.word	0x40026440

0800131c <USART1_IRQHandler>:

//UART INTERRUPTS
void USART_GNSS_IRQHandler(){
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
		index++;
		//USART_ClearITPendingBit(USART_GNSS, USART_IT_RXNE);
		//USART_ClearFlag(USART_GNSS, USART_FLAG_RXNE);
		return;
	}*/
	if(USART_GetITStatus(USART_GNSS, USART_IT_IDLE)){
 8001322:	f240 4124 	movw	r1, #1060	; 0x424
 8001326:	481d      	ldr	r0, [pc, #116]	; (800139c <USART1_IRQHandler+0x80>)
 8001328:	f7ff fa90 	bl	800084c <USART_GetITStatus>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d02f      	beq.n	8001392 <USART1_IRQHandler+0x76>
	//if(USART_GetFlagStatus(USART_GNSS, USART_FLAG_IDLE)){

		// Disable DMA RX Stream
		DMA_Cmd(DMA_Stream_USART_GNSS_RX, DISABLE);
 8001332:	2100      	movs	r1, #0
 8001334:	481a      	ldr	r0, [pc, #104]	; (80013a0 <USART1_IRQHandler+0x84>)
 8001336:	f7fe ff47 	bl	80001c8 <DMA_Cmd>
		while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_RX ) != DISABLE) { ; }
 800133a:	bf00      	nop
 800133c:	4818      	ldr	r0, [pc, #96]	; (80013a0 <USART1_IRQHandler+0x84>)
 800133e:	f7fe ff7b 	bl	8000238 <DMA_GetCmdStatus>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f9      	bne.n	800133c <USART1_IRQHandler+0x20>

		//clear DMA Flag
		DMA_ClearFlag(DMA_Stream_USART_GNSS_RX,DMA_FLAG_GNSS_RX_TC);
 8001348:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 800134c:	4814      	ldr	r0, [pc, #80]	; (80013a0 <USART1_IRQHandler+0x84>)
 800134e:	f7fe ffc7 	bl	80002e0 <DMA_ClearFlag>

		//find the lenght of data
		volatile uint32_t temp = DMA_GetCurrDataCounter(DMA_Stream_USART_GNSS_RX);
 8001352:	4813      	ldr	r0, [pc, #76]	; (80013a0 <USART1_IRQHandler+0x84>)
 8001354:	f7fe ff63 	bl	800021e <DMA_GetCurrDataCounter>
 8001358:	4603      	mov	r3, r0
 800135a:	607b      	str	r3, [r7, #4]
		GNSS_DATA_LENGTH = GNSS_BUFFER_SIZE - temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	425b      	negs	r3, r3
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <USART1_IRQHandler+0x88>)
 8001366:	701a      	strb	r2, [r3, #0]

		//reset the data counter
		DMA_SetCurrDataCounter(DMA_Stream_USART_GNSS_RX, GNSS_BUFFER_SIZE);
 8001368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <USART1_IRQHandler+0x84>)
 800136e:	f7fe ff47 	bl	8000200 <DMA_SetCurrDataCounter>
		//temp = DMA_GetCurrDataCounter(DMA_Stream_USART_GNSS_RX);

		//gnss_read_new_data();
		reset_gnss_rx_buffer();
 8001372:	f7ff ff8d 	bl	8001290 <reset_gnss_rx_buffer>


		/* Enable DMA transfer */
		DMA_Cmd(DMA_Stream_USART_GNSS_RX, ENABLE);
 8001376:	2101      	movs	r1, #1
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <USART1_IRQHandler+0x84>)
 800137a:	f7fe ff25 	bl	80001c8 <DMA_Cmd>
		while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_RX) != ENABLE) { ; }
 800137e:	bf00      	nop
 8001380:	4807      	ldr	r0, [pc, #28]	; (80013a0 <USART1_IRQHandler+0x84>)
 8001382:	f7fe ff59 	bl	8000238 <DMA_GetCmdStatus>
 8001386:	4603      	mov	r3, r0
 8001388:	2b01      	cmp	r3, #1
 800138a:	d1f9      	bne.n	8001380 <USART1_IRQHandler+0x64>

		//clear usart IDLE interrupt

		//USART_ClearITPendingBit(USART_GNSS, USART_IT_IDLE);
		//tmp = USART_GetITStatus(USART_GNSS, USART_IT_IDLE);
		USART_ReceiveData(USART_GNSS);
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <USART1_IRQHandler+0x80>)
 800138e:	f7ff fa4d 	bl	800082c <USART_ReceiveData>
		//(void)tmp;

		//return;
	}

}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40011000 	.word	0x40011000
 80013a0:	40026440 	.word	0x40026440
 80013a4:	20000838 	.word	0x20000838

080013a8 <__libc_init_array>:
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	4e0d      	ldr	r6, [pc, #52]	; (80013e0 <__libc_init_array+0x38>)
 80013ac:	4c0d      	ldr	r4, [pc, #52]	; (80013e4 <__libc_init_array+0x3c>)
 80013ae:	1ba4      	subs	r4, r4, r6
 80013b0:	10a4      	asrs	r4, r4, #2
 80013b2:	2500      	movs	r5, #0
 80013b4:	42a5      	cmp	r5, r4
 80013b6:	d109      	bne.n	80013cc <__libc_init_array+0x24>
 80013b8:	4e0b      	ldr	r6, [pc, #44]	; (80013e8 <__libc_init_array+0x40>)
 80013ba:	4c0c      	ldr	r4, [pc, #48]	; (80013ec <__libc_init_array+0x44>)
 80013bc:	f000 f818 	bl	80013f0 <_init>
 80013c0:	1ba4      	subs	r4, r4, r6
 80013c2:	10a4      	asrs	r4, r4, #2
 80013c4:	2500      	movs	r5, #0
 80013c6:	42a5      	cmp	r5, r4
 80013c8:	d105      	bne.n	80013d6 <__libc_init_array+0x2e>
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
 80013cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013d0:	4798      	blx	r3
 80013d2:	3501      	adds	r5, #1
 80013d4:	e7ee      	b.n	80013b4 <__libc_init_array+0xc>
 80013d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013da:	4798      	blx	r3
 80013dc:	3501      	adds	r5, #1
 80013de:	e7f2      	b.n	80013c6 <__libc_init_array+0x1e>
 80013e0:	08001408 	.word	0x08001408
 80013e4:	08001408 	.word	0x08001408
 80013e8:	08001408 	.word	0x08001408
 80013ec:	0800140c 	.word	0x0800140c

080013f0 <_init>:
 80013f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f2:	bf00      	nop
 80013f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f6:	bc08      	pop	{r3}
 80013f8:	469e      	mov	lr, r3
 80013fa:	4770      	bx	lr

080013fc <_fini>:
 80013fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fe:	bf00      	nop
 8001400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001402:	bc08      	pop	{r3}
 8001404:	469e      	mov	lr, r3
 8001406:	4770      	bx	lr
